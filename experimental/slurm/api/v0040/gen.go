//go:build go1.22

// Package v0040 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v0040

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	TokenScopes      = "token.Scopes"
	UserScopes       = "user.Scopes"
)

// Defines values for V0040AccountFlags.
const (
	V0040AccountFlagsDELETED V0040AccountFlags = "DELETED"
)

// Defines values for V0040AssocFlags.
const (
	V0040AssocFlagsDELETED V0040AssocFlags = "DELETED"
)

// Defines values for V0040AssocSharesObjWrapType.
const (
	ASSOCIATION V0040AssocSharesObjWrapType = "ASSOCIATION"
	USER        V0040AssocSharesObjWrapType = "USER"
)

// Defines values for V0040ClusterRecFlags.
const (
	V0040ClusterRecFlagsEXTERNAL       V0040ClusterRecFlags = "EXTERNAL"
	V0040ClusterRecFlagsFEDERATION     V0040ClusterRecFlags = "FEDERATION"
	V0040ClusterRecFlagsFRONTEND       V0040ClusterRecFlags = "FRONT_END"
	V0040ClusterRecFlagsMULTIPLESLURMD V0040ClusterRecFlags = "MULTIPLE_SLURMD"
	V0040ClusterRecFlagsREGISTERING    V0040ClusterRecFlags = "REGISTERING"
)

// Defines values for V0040CronEntryFlags.
const (
	WILDDAYOFMONTH V0040CronEntryFlags = "WILD_DAY_OF_MONTH"
	WILDDAYOFWEEK  V0040CronEntryFlags = "WILD_DAY_OF_WEEK"
	WILDHOUR       V0040CronEntryFlags = "WILD_HOUR"
	WILDMINUTE     V0040CronEntryFlags = "WILD_MINUTE"
	WILDMONTH      V0040CronEntryFlags = "WILD_MONTH"
)

// Defines values for V0040JobFlags.
const (
	V0040JobFlagsCLEARSCHEDULING   V0040JobFlags = "CLEAR_SCHEDULING"
	V0040JobFlagsNONE              V0040JobFlags = "NONE"
	V0040JobFlagsNOTSET            V0040JobFlags = "NOT_SET"
	V0040JobFlagsSTARTEDONBACKFILL V0040JobFlags = "STARTED_ON_BACKFILL"
	V0040JobFlagsSTARTEDONSCHEDULE V0040JobFlags = "STARTED_ON_SCHEDULE"
	V0040JobFlagsSTARTEDONSUBMIT   V0040JobFlags = "STARTED_ON_SUBMIT"
	V0040JobFlagsSTARTRECEIVED     V0040JobFlags = "START_RECEIVED"
)

// Defines values for V0040JobStateCurrent.
const (
	V0040JobStateCurrentBOOTFAIL     V0040JobStateCurrent = "BOOT_FAIL"
	V0040JobStateCurrentCANCELLED    V0040JobStateCurrent = "CANCELLED"
	V0040JobStateCurrentCOMPLETED    V0040JobStateCurrent = "COMPLETED"
	V0040JobStateCurrentCOMPLETING   V0040JobStateCurrent = "COMPLETING"
	V0040JobStateCurrentCONFIGURING  V0040JobStateCurrent = "CONFIGURING"
	V0040JobStateCurrentDEADLINE     V0040JobStateCurrent = "DEADLINE"
	V0040JobStateCurrentFAILED       V0040JobStateCurrent = "FAILED"
	V0040JobStateCurrentLAUNCHFAILED V0040JobStateCurrent = "LAUNCH_FAILED"
	V0040JobStateCurrentNODEFAIL     V0040JobStateCurrent = "NODE_FAIL"
	V0040JobStateCurrentOUTOFMEMORY  V0040JobStateCurrent = "OUT_OF_MEMORY"
	V0040JobStateCurrentPENDING      V0040JobStateCurrent = "PENDING"
	V0040JobStateCurrentPOWERUPNODE  V0040JobStateCurrent = "POWER_UP_NODE"
	V0040JobStateCurrentPREEMPTED    V0040JobStateCurrent = "PREEMPTED"
	V0040JobStateCurrentRECONFIGFAIL V0040JobStateCurrent = "RECONFIG_FAIL"
	V0040JobStateCurrentREQUEUED     V0040JobStateCurrent = "REQUEUED"
	V0040JobStateCurrentREQUEUEFED   V0040JobStateCurrent = "REQUEUE_FED"
	V0040JobStateCurrentREQUEUEHOLD  V0040JobStateCurrent = "REQUEUE_HOLD"
	V0040JobStateCurrentRESIZING     V0040JobStateCurrent = "RESIZING"
	V0040JobStateCurrentRESVDELHOLD  V0040JobStateCurrent = "RESV_DEL_HOLD"
	V0040JobStateCurrentREVOKED      V0040JobStateCurrent = "REVOKED"
	V0040JobStateCurrentRUNNING      V0040JobStateCurrent = "RUNNING"
	V0040JobStateCurrentSIGNALING    V0040JobStateCurrent = "SIGNALING"
	V0040JobStateCurrentSPECIALEXIT  V0040JobStateCurrent = "SPECIAL_EXIT"
	V0040JobStateCurrentSTAGEOUT     V0040JobStateCurrent = "STAGE_OUT"
	V0040JobStateCurrentSTOPPED      V0040JobStateCurrent = "STOPPED"
	V0040JobStateCurrentSUSPENDED    V0040JobStateCurrent = "SUSPENDED"
	V0040JobStateCurrentTIMEOUT      V0040JobStateCurrent = "TIMEOUT"
	V0040JobStateCurrentUPDATEDB     V0040JobStateCurrent = "UPDATE_DB"
)

// Defines values for V0040JobDescMsgCpuBindingFlags.
const (
	V0040JobDescMsgCpuBindingFlagsCPUBINDLDMAP            V0040JobDescMsgCpuBindingFlags = "CPU_BIND_LDMAP"
	V0040JobDescMsgCpuBindingFlagsCPUBINDLDMASK           V0040JobDescMsgCpuBindingFlags = "CPU_BIND_LDMASK"
	V0040JobDescMsgCpuBindingFlagsCPUBINDLDRANK           V0040JobDescMsgCpuBindingFlags = "CPU_BIND_LDRANK"
	V0040JobDescMsgCpuBindingFlagsCPUBINDMAP              V0040JobDescMsgCpuBindingFlags = "CPU_BIND_MAP"
	V0040JobDescMsgCpuBindingFlagsCPUBINDMASK             V0040JobDescMsgCpuBindingFlags = "CPU_BIND_MASK"
	V0040JobDescMsgCpuBindingFlagsCPUBINDNONE             V0040JobDescMsgCpuBindingFlags = "CPU_BIND_NONE"
	V0040JobDescMsgCpuBindingFlagsCPUBINDONETHREADPERCORE V0040JobDescMsgCpuBindingFlags = "CPU_BIND_ONE_THREAD_PER_CORE"
	V0040JobDescMsgCpuBindingFlagsCPUBINDRANK             V0040JobDescMsgCpuBindingFlags = "CPU_BIND_RANK"
	V0040JobDescMsgCpuBindingFlagsCPUBINDTOCORES          V0040JobDescMsgCpuBindingFlags = "CPU_BIND_TO_CORES"
	V0040JobDescMsgCpuBindingFlagsCPUBINDTOLDOMS          V0040JobDescMsgCpuBindingFlags = "CPU_BIND_TO_LDOMS"
	V0040JobDescMsgCpuBindingFlagsCPUBINDTOSOCKETS        V0040JobDescMsgCpuBindingFlags = "CPU_BIND_TO_SOCKETS"
	V0040JobDescMsgCpuBindingFlagsCPUBINDTOTHREADS        V0040JobDescMsgCpuBindingFlags = "CPU_BIND_TO_THREADS"
	V0040JobDescMsgCpuBindingFlagsVERBOSE                 V0040JobDescMsgCpuBindingFlags = "VERBOSE"
)

// Defines values for V0040JobDescMsgExclusive.
const (
	V0040JobDescMsgExclusiveFalse V0040JobDescMsgExclusive = "false"
	V0040JobDescMsgExclusiveMcs   V0040JobDescMsgExclusive = "mcs"
	V0040JobDescMsgExclusiveTrue  V0040JobDescMsgExclusive = "true"
	V0040JobDescMsgExclusiveUser  V0040JobDescMsgExclusive = "user"
)

// Defines values for V0040JobDescMsgFlags.
const (
	V0040JobDescMsgFlagsACCRUECOUNTCLEARED          V0040JobDescMsgFlags = "ACCRUE_COUNT_CLEARED"
	V0040JobDescMsgFlagsBACKFILLATTEMPTED           V0040JobDescMsgFlags = "BACKFILL_ATTEMPTED"
	V0040JobDescMsgFlagsCRONJOB                     V0040JobDescMsgFlags = "CRON_JOB"
	V0040JobDescMsgFlagsDEPENDENT                   V0040JobDescMsgFlags = "DEPENDENT"
	V0040JobDescMsgFlagsEXACTCPUCOUNTREQUESTED      V0040JobDescMsgFlags = "EXACT_CPU_COUNT_REQUESTED"
	V0040JobDescMsgFlagsEXACTMEMORYREQUESTED        V0040JobDescMsgFlags = "EXACT_MEMORY_REQUESTED"
	V0040JobDescMsgFlagsEXACTTASKCOUNTREQUESTED     V0040JobDescMsgFlags = "EXACT_TASK_COUNT_REQUESTED"
	V0040JobDescMsgFlagsGRESALLOWTASKSHARING        V0040JobDescMsgFlags = "GRES_ALLOW_TASK_SHARING"
	V0040JobDescMsgFlagsGRESBINDINGDISABLED         V0040JobDescMsgFlags = "GRES_BINDING_DISABLED"
	V0040JobDescMsgFlagsGRESBINDINGENFORCED         V0040JobDescMsgFlags = "GRES_BINDING_ENFORCED"
	V0040JobDescMsgFlagsGRESMULTIPLETASKSPERSHARING V0040JobDescMsgFlags = "GRES_MULTIPLE_TASKS_PER_SHARING"
	V0040JobDescMsgFlagsGRESONETASKPERSHARING       V0040JobDescMsgFlags = "GRES_ONE_TASK_PER_SHARING"
	V0040JobDescMsgFlagsHASSTATEDIRECTORY           V0040JobDescMsgFlags = "HAS_STATE_DIRECTORY"
	V0040JobDescMsgFlagsHETEROGENEOUSJOB            V0040JobDescMsgFlags = "HETEROGENEOUS_JOB"
	V0040JobDescMsgFlagsJOBACCRUETIMERESET          V0040JobDescMsgFlags = "JOB_ACCRUE_TIME_RESET"
	V0040JobDescMsgFlagsJOBKILLHURRY                V0040JobDescMsgFlags = "JOB_KILL_HURRY"
	V0040JobDescMsgFlagsJOBWASRUNNING               V0040JobDescMsgFlags = "JOB_WAS_RUNNING"
	V0040JobDescMsgFlagsKILLINVALIDDEPENDENCY       V0040JobDescMsgFlags = "KILL_INVALID_DEPENDENCY"
	V0040JobDescMsgFlagsMAGNETIC                    V0040JobDescMsgFlags = "MAGNETIC"
	V0040JobDescMsgFlagsNOKILLINVALIDDEPENDENCY     V0040JobDescMsgFlags = "NO_KILL_INVALID_DEPENDENCY"
	V0040JobDescMsgFlagsPARTITIONASSIGNED           V0040JobDescMsgFlags = "PARTITION_ASSIGNED"
	V0040JobDescMsgFlagsPREFERMINIMUMNODECOUNT      V0040JobDescMsgFlags = "PREFER_MINIMUM_NODE_COUNT"
	V0040JobDescMsgFlagsSAVEBATCHSCRIPT             V0040JobDescMsgFlags = "SAVE_BATCH_SCRIPT"
	V0040JobDescMsgFlagsSCHEDULINGATTEMPTED         V0040JobDescMsgFlags = "SCHEDULING_ATTEMPTED"
	V0040JobDescMsgFlagsSENDJOBENVIRONMENT          V0040JobDescMsgFlags = "SEND_JOB_ENVIRONMENT"
	V0040JobDescMsgFlagsSIBLINGCLUSTERUPDATEONLY    V0040JobDescMsgFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	V0040JobDescMsgFlagsSKIPTRESSTRINGACCOUNTING    V0040JobDescMsgFlags = "SKIP_TRES_STRING_ACCOUNTING"
	V0040JobDescMsgFlagsSPREADJOB                   V0040JobDescMsgFlags = "SPREAD_JOB"
	V0040JobDescMsgFlagsTESTINGBACKFILL             V0040JobDescMsgFlags = "TESTING_BACKFILL"
	V0040JobDescMsgFlagsTESTINGWHOLENODEBACKFILL    V0040JobDescMsgFlags = "TESTING_WHOLE_NODE_BACKFILL"
	V0040JobDescMsgFlagsTESTNOWONLY                 V0040JobDescMsgFlags = "TEST_NOW_ONLY"
	V0040JobDescMsgFlagsTOPPRIORITYJOB              V0040JobDescMsgFlags = "TOP_PRIORITY_JOB"
	V0040JobDescMsgFlagsUSINGDEFAULTACCOUNT         V0040JobDescMsgFlags = "USING_DEFAULT_ACCOUNT"
	V0040JobDescMsgFlagsUSINGDEFAULTPARTITION       V0040JobDescMsgFlags = "USING_DEFAULT_PARTITION"
	V0040JobDescMsgFlagsUSINGDEFAULTQOS             V0040JobDescMsgFlags = "USING_DEFAULT_QOS"
	V0040JobDescMsgFlagsUSINGDEFAULTWCKEY           V0040JobDescMsgFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for V0040JobDescMsgKillWarningFlags.
const (
	V0040JobDescMsgKillWarningFlagsARRAYTASK         V0040JobDescMsgKillWarningFlags = "ARRAY_TASK"
	V0040JobDescMsgKillWarningFlagsBATCHJOB          V0040JobDescMsgKillWarningFlags = "BATCH_JOB"
	V0040JobDescMsgKillWarningFlagsCRONJOBS          V0040JobDescMsgKillWarningFlags = "CRON_JOBS"
	V0040JobDescMsgKillWarningFlagsFEDERATIONREQUEUE V0040JobDescMsgKillWarningFlags = "FEDERATION_REQUEUE"
	V0040JobDescMsgKillWarningFlagsFULLJOB           V0040JobDescMsgKillWarningFlags = "FULL_JOB"
	V0040JobDescMsgKillWarningFlagsFULLSTEPSONLY     V0040JobDescMsgKillWarningFlags = "FULL_STEPS_ONLY"
	V0040JobDescMsgKillWarningFlagsHURRY             V0040JobDescMsgKillWarningFlags = "HURRY"
	V0040JobDescMsgKillWarningFlagsNOCRONJOBS        V0040JobDescMsgKillWarningFlags = "NO_CRON_JOBS"
	V0040JobDescMsgKillWarningFlagsNOSIBLINGJOBS     V0040JobDescMsgKillWarningFlags = "NO_SIBLING_JOBS"
	V0040JobDescMsgKillWarningFlagsOUTOFMEMORY       V0040JobDescMsgKillWarningFlags = "OUT_OF_MEMORY"
	V0040JobDescMsgKillWarningFlagsRESERVATIONJOB    V0040JobDescMsgKillWarningFlags = "RESERVATION_JOB"
	V0040JobDescMsgKillWarningFlagsVERBOSE           V0040JobDescMsgKillWarningFlags = "VERBOSE"
	V0040JobDescMsgKillWarningFlagsWARNINGSENT       V0040JobDescMsgKillWarningFlags = "WARNING_SENT"
)

// Defines values for V0040JobDescMsgMailType.
const (
	V0040JobDescMsgMailTypeARRAYTASKS        V0040JobDescMsgMailType = "ARRAY_TASKS"
	V0040JobDescMsgMailTypeBEGIN             V0040JobDescMsgMailType = "BEGIN"
	V0040JobDescMsgMailTypeEND               V0040JobDescMsgMailType = "END"
	V0040JobDescMsgMailTypeFAIL              V0040JobDescMsgMailType = "FAIL"
	V0040JobDescMsgMailTypeINVALIDDEPENDENCY V0040JobDescMsgMailType = "INVALID_DEPENDENCY"
	V0040JobDescMsgMailTypeREQUEUE           V0040JobDescMsgMailType = "REQUEUE"
	V0040JobDescMsgMailTypeSTAGEOUT          V0040JobDescMsgMailType = "STAGE_OUT"
	V0040JobDescMsgMailTypeTIME100           V0040JobDescMsgMailType = "TIME=100%"
	V0040JobDescMsgMailTypeTIME50            V0040JobDescMsgMailType = "TIME=50%"
	V0040JobDescMsgMailTypeTIME80            V0040JobDescMsgMailType = "TIME=80%"
	V0040JobDescMsgMailTypeTIME90            V0040JobDescMsgMailType = "TIME=90%"
)

// Defines values for V0040JobDescMsgMemoryBindingType.
const (
	V0040JobDescMsgMemoryBindingTypeLOCAL   V0040JobDescMsgMemoryBindingType = "LOCAL"
	V0040JobDescMsgMemoryBindingTypeMAP     V0040JobDescMsgMemoryBindingType = "MAP"
	V0040JobDescMsgMemoryBindingTypeMASK    V0040JobDescMsgMemoryBindingType = "MASK"
	V0040JobDescMsgMemoryBindingTypeNONE    V0040JobDescMsgMemoryBindingType = "NONE"
	V0040JobDescMsgMemoryBindingTypePREFER  V0040JobDescMsgMemoryBindingType = "PREFER"
	V0040JobDescMsgMemoryBindingTypeRANK    V0040JobDescMsgMemoryBindingType = "RANK"
	V0040JobDescMsgMemoryBindingTypeSORT    V0040JobDescMsgMemoryBindingType = "SORT"
	V0040JobDescMsgMemoryBindingTypeVERBOSE V0040JobDescMsgMemoryBindingType = "VERBOSE"
)

// Defines values for V0040JobDescMsgOpenMode.
const (
	APPEND   V0040JobDescMsgOpenMode = "APPEND"
	TRUNCATE V0040JobDescMsgOpenMode = "TRUNCATE"
)

// Defines values for V0040JobDescMsgProfile.
const (
	V0040JobDescMsgProfileENERGY  V0040JobDescMsgProfile = "ENERGY"
	V0040JobDescMsgProfileLUSTRE  V0040JobDescMsgProfile = "LUSTRE"
	V0040JobDescMsgProfileNETWORK V0040JobDescMsgProfile = "NETWORK"
	V0040JobDescMsgProfileNONE    V0040JobDescMsgProfile = "NONE"
	V0040JobDescMsgProfileNOTSET  V0040JobDescMsgProfile = "NOT_SET"
	V0040JobDescMsgProfileTASK    V0040JobDescMsgProfile = "TASK"
)

// Defines values for V0040JobDescMsgShared.
const (
	V0040JobDescMsgSharedMcs           V0040JobDescMsgShared = "mcs"
	V0040JobDescMsgSharedNone          V0040JobDescMsgShared = "none"
	V0040JobDescMsgSharedOversubscribe V0040JobDescMsgShared = "oversubscribe"
	V0040JobDescMsgSharedUser          V0040JobDescMsgShared = "user"
)

// Defines values for V0040JobDescMsgX11.
const (
	BATCHNODE       V0040JobDescMsgX11 = "BATCH_NODE"
	FIRSTNODE       V0040JobDescMsgX11 = "FIRST_NODE"
	FORWARDALLNODES V0040JobDescMsgX11 = "FORWARD_ALL_NODES"
	LASTNODE        V0040JobDescMsgX11 = "LAST_NODE"
)

// Defines values for V0040JobInfoExclusive.
const (
	V0040JobInfoExclusiveFalse V0040JobInfoExclusive = "false"
	V0040JobInfoExclusiveMcs   V0040JobInfoExclusive = "mcs"
	V0040JobInfoExclusiveTrue  V0040JobInfoExclusive = "true"
	V0040JobInfoExclusiveUser  V0040JobInfoExclusive = "user"
)

// Defines values for V0040JobInfoFlags.
const (
	V0040JobInfoFlagsACCRUECOUNTCLEARED          V0040JobInfoFlags = "ACCRUE_COUNT_CLEARED"
	V0040JobInfoFlagsBACKFILLATTEMPTED           V0040JobInfoFlags = "BACKFILL_ATTEMPTED"
	V0040JobInfoFlagsCRONJOB                     V0040JobInfoFlags = "CRON_JOB"
	V0040JobInfoFlagsDEPENDENT                   V0040JobInfoFlags = "DEPENDENT"
	V0040JobInfoFlagsEXACTCPUCOUNTREQUESTED      V0040JobInfoFlags = "EXACT_CPU_COUNT_REQUESTED"
	V0040JobInfoFlagsEXACTMEMORYREQUESTED        V0040JobInfoFlags = "EXACT_MEMORY_REQUESTED"
	V0040JobInfoFlagsEXACTTASKCOUNTREQUESTED     V0040JobInfoFlags = "EXACT_TASK_COUNT_REQUESTED"
	V0040JobInfoFlagsGRESALLOWTASKSHARING        V0040JobInfoFlags = "GRES_ALLOW_TASK_SHARING"
	V0040JobInfoFlagsGRESBINDINGDISABLED         V0040JobInfoFlags = "GRES_BINDING_DISABLED"
	V0040JobInfoFlagsGRESBINDINGENFORCED         V0040JobInfoFlags = "GRES_BINDING_ENFORCED"
	V0040JobInfoFlagsGRESMULTIPLETASKSPERSHARING V0040JobInfoFlags = "GRES_MULTIPLE_TASKS_PER_SHARING"
	V0040JobInfoFlagsGRESONETASKPERSHARING       V0040JobInfoFlags = "GRES_ONE_TASK_PER_SHARING"
	V0040JobInfoFlagsHASSTATEDIRECTORY           V0040JobInfoFlags = "HAS_STATE_DIRECTORY"
	V0040JobInfoFlagsHETEROGENEOUSJOB            V0040JobInfoFlags = "HETEROGENEOUS_JOB"
	V0040JobInfoFlagsJOBACCRUETIMERESET          V0040JobInfoFlags = "JOB_ACCRUE_TIME_RESET"
	V0040JobInfoFlagsJOBKILLHURRY                V0040JobInfoFlags = "JOB_KILL_HURRY"
	V0040JobInfoFlagsJOBWASRUNNING               V0040JobInfoFlags = "JOB_WAS_RUNNING"
	V0040JobInfoFlagsKILLINVALIDDEPENDENCY       V0040JobInfoFlags = "KILL_INVALID_DEPENDENCY"
	V0040JobInfoFlagsMAGNETIC                    V0040JobInfoFlags = "MAGNETIC"
	V0040JobInfoFlagsNOKILLINVALIDDEPENDENCY     V0040JobInfoFlags = "NO_KILL_INVALID_DEPENDENCY"
	V0040JobInfoFlagsPARTITIONASSIGNED           V0040JobInfoFlags = "PARTITION_ASSIGNED"
	V0040JobInfoFlagsPREFERMINIMUMNODECOUNT      V0040JobInfoFlags = "PREFER_MINIMUM_NODE_COUNT"
	V0040JobInfoFlagsSAVEBATCHSCRIPT             V0040JobInfoFlags = "SAVE_BATCH_SCRIPT"
	V0040JobInfoFlagsSCHEDULINGATTEMPTED         V0040JobInfoFlags = "SCHEDULING_ATTEMPTED"
	V0040JobInfoFlagsSENDJOBENVIRONMENT          V0040JobInfoFlags = "SEND_JOB_ENVIRONMENT"
	V0040JobInfoFlagsSIBLINGCLUSTERUPDATEONLY    V0040JobInfoFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	V0040JobInfoFlagsSKIPTRESSTRINGACCOUNTING    V0040JobInfoFlags = "SKIP_TRES_STRING_ACCOUNTING"
	V0040JobInfoFlagsSPREADJOB                   V0040JobInfoFlags = "SPREAD_JOB"
	V0040JobInfoFlagsTESTINGBACKFILL             V0040JobInfoFlags = "TESTING_BACKFILL"
	V0040JobInfoFlagsTESTINGWHOLENODEBACKFILL    V0040JobInfoFlags = "TESTING_WHOLE_NODE_BACKFILL"
	V0040JobInfoFlagsTESTNOWONLY                 V0040JobInfoFlags = "TEST_NOW_ONLY"
	V0040JobInfoFlagsTOPPRIORITYJOB              V0040JobInfoFlags = "TOP_PRIORITY_JOB"
	V0040JobInfoFlagsUSINGDEFAULTACCOUNT         V0040JobInfoFlags = "USING_DEFAULT_ACCOUNT"
	V0040JobInfoFlagsUSINGDEFAULTPARTITION       V0040JobInfoFlags = "USING_DEFAULT_PARTITION"
	V0040JobInfoFlagsUSINGDEFAULTQOS             V0040JobInfoFlags = "USING_DEFAULT_QOS"
	V0040JobInfoFlagsUSINGDEFAULTWCKEY           V0040JobInfoFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for V0040JobInfoJobState.
const (
	V0040JobInfoJobStateBOOTFAIL     V0040JobInfoJobState = "BOOT_FAIL"
	V0040JobInfoJobStateCANCELLED    V0040JobInfoJobState = "CANCELLED"
	V0040JobInfoJobStateCOMPLETED    V0040JobInfoJobState = "COMPLETED"
	V0040JobInfoJobStateCOMPLETING   V0040JobInfoJobState = "COMPLETING"
	V0040JobInfoJobStateCONFIGURING  V0040JobInfoJobState = "CONFIGURING"
	V0040JobInfoJobStateDEADLINE     V0040JobInfoJobState = "DEADLINE"
	V0040JobInfoJobStateFAILED       V0040JobInfoJobState = "FAILED"
	V0040JobInfoJobStateLAUNCHFAILED V0040JobInfoJobState = "LAUNCH_FAILED"
	V0040JobInfoJobStateNODEFAIL     V0040JobInfoJobState = "NODE_FAIL"
	V0040JobInfoJobStateOUTOFMEMORY  V0040JobInfoJobState = "OUT_OF_MEMORY"
	V0040JobInfoJobStatePENDING      V0040JobInfoJobState = "PENDING"
	V0040JobInfoJobStatePOWERUPNODE  V0040JobInfoJobState = "POWER_UP_NODE"
	V0040JobInfoJobStatePREEMPTED    V0040JobInfoJobState = "PREEMPTED"
	V0040JobInfoJobStateRECONFIGFAIL V0040JobInfoJobState = "RECONFIG_FAIL"
	V0040JobInfoJobStateREQUEUED     V0040JobInfoJobState = "REQUEUED"
	V0040JobInfoJobStateREQUEUEFED   V0040JobInfoJobState = "REQUEUE_FED"
	V0040JobInfoJobStateREQUEUEHOLD  V0040JobInfoJobState = "REQUEUE_HOLD"
	V0040JobInfoJobStateRESIZING     V0040JobInfoJobState = "RESIZING"
	V0040JobInfoJobStateRESVDELHOLD  V0040JobInfoJobState = "RESV_DEL_HOLD"
	V0040JobInfoJobStateREVOKED      V0040JobInfoJobState = "REVOKED"
	V0040JobInfoJobStateRUNNING      V0040JobInfoJobState = "RUNNING"
	V0040JobInfoJobStateSIGNALING    V0040JobInfoJobState = "SIGNALING"
	V0040JobInfoJobStateSPECIALEXIT  V0040JobInfoJobState = "SPECIAL_EXIT"
	V0040JobInfoJobStateSTAGEOUT     V0040JobInfoJobState = "STAGE_OUT"
	V0040JobInfoJobStateSTOPPED      V0040JobInfoJobState = "STOPPED"
	V0040JobInfoJobStateSUSPENDED    V0040JobInfoJobState = "SUSPENDED"
	V0040JobInfoJobStateTIMEOUT      V0040JobInfoJobState = "TIMEOUT"
	V0040JobInfoJobStateUPDATEDB     V0040JobInfoJobState = "UPDATE_DB"
)

// Defines values for V0040JobInfoMailType.
const (
	V0040JobInfoMailTypeARRAYTASKS        V0040JobInfoMailType = "ARRAY_TASKS"
	V0040JobInfoMailTypeBEGIN             V0040JobInfoMailType = "BEGIN"
	V0040JobInfoMailTypeEND               V0040JobInfoMailType = "END"
	V0040JobInfoMailTypeFAIL              V0040JobInfoMailType = "FAIL"
	V0040JobInfoMailTypeINVALIDDEPENDENCY V0040JobInfoMailType = "INVALID_DEPENDENCY"
	V0040JobInfoMailTypeREQUEUE           V0040JobInfoMailType = "REQUEUE"
	V0040JobInfoMailTypeSTAGEOUT          V0040JobInfoMailType = "STAGE_OUT"
	V0040JobInfoMailTypeTIME100           V0040JobInfoMailType = "TIME=100%"
	V0040JobInfoMailTypeTIME50            V0040JobInfoMailType = "TIME=50%"
	V0040JobInfoMailTypeTIME80            V0040JobInfoMailType = "TIME=80%"
	V0040JobInfoMailTypeTIME90            V0040JobInfoMailType = "TIME=90%"
)

// Defines values for V0040JobInfoProfile.
const (
	V0040JobInfoProfileENERGY  V0040JobInfoProfile = "ENERGY"
	V0040JobInfoProfileLUSTRE  V0040JobInfoProfile = "LUSTRE"
	V0040JobInfoProfileNETWORK V0040JobInfoProfile = "NETWORK"
	V0040JobInfoProfileNONE    V0040JobInfoProfile = "NONE"
	V0040JobInfoProfileNOTSET  V0040JobInfoProfile = "NOT_SET"
	V0040JobInfoProfileTASK    V0040JobInfoProfile = "TASK"
)

// Defines values for V0040JobInfoShared.
const (
	V0040JobInfoSharedMcs           V0040JobInfoShared = "mcs"
	V0040JobInfoSharedNone          V0040JobInfoShared = "none"
	V0040JobInfoSharedOversubscribe V0040JobInfoShared = "oversubscribe"
	V0040JobInfoSharedUser          V0040JobInfoShared = "user"
)

// Defines values for V0040JobInfoShowFlags.
const (
	V0040JobInfoShowFlagsALL        V0040JobInfoShowFlags = "ALL"
	V0040JobInfoShowFlagsDETAIL     V0040JobInfoShowFlags = "DETAIL"
	V0040JobInfoShowFlagsFEDERATION V0040JobInfoShowFlags = "FEDERATION"
	V0040JobInfoShowFlagsFUTURE     V0040JobInfoShowFlags = "FUTURE"
	V0040JobInfoShowFlagsLOCAL      V0040JobInfoShowFlags = "LOCAL"
	V0040JobInfoShowFlagsMIXED      V0040JobInfoShowFlags = "MIXED"
	V0040JobInfoShowFlagsSIBLING    V0040JobInfoShowFlags = "SIBLING"
)

// Defines values for V0040KillJobsMsgFlags.
const (
	V0040KillJobsMsgFlagsARRAYTASK         V0040KillJobsMsgFlags = "ARRAY_TASK"
	V0040KillJobsMsgFlagsBATCHJOB          V0040KillJobsMsgFlags = "BATCH_JOB"
	V0040KillJobsMsgFlagsCRONJOBS          V0040KillJobsMsgFlags = "CRON_JOBS"
	V0040KillJobsMsgFlagsFEDERATIONREQUEUE V0040KillJobsMsgFlags = "FEDERATION_REQUEUE"
	V0040KillJobsMsgFlagsFULLJOB           V0040KillJobsMsgFlags = "FULL_JOB"
	V0040KillJobsMsgFlagsFULLSTEPSONLY     V0040KillJobsMsgFlags = "FULL_STEPS_ONLY"
	V0040KillJobsMsgFlagsHURRY             V0040KillJobsMsgFlags = "HURRY"
	V0040KillJobsMsgFlagsNOCRONJOBS        V0040KillJobsMsgFlags = "NO_CRON_JOBS"
	V0040KillJobsMsgFlagsNOSIBLINGJOBS     V0040KillJobsMsgFlags = "NO_SIBLING_JOBS"
	V0040KillJobsMsgFlagsOUTOFMEMORY       V0040KillJobsMsgFlags = "OUT_OF_MEMORY"
	V0040KillJobsMsgFlagsRESERVATIONJOB    V0040KillJobsMsgFlags = "RESERVATION_JOB"
	V0040KillJobsMsgFlagsVERBOSE           V0040KillJobsMsgFlags = "VERBOSE"
	V0040KillJobsMsgFlagsWARNINGSENT       V0040KillJobsMsgFlags = "WARNING_SENT"
)

// Defines values for V0040KillJobsMsgJobState.
const (
	V0040KillJobsMsgJobStateBOOTFAIL     V0040KillJobsMsgJobState = "BOOT_FAIL"
	V0040KillJobsMsgJobStateCANCELLED    V0040KillJobsMsgJobState = "CANCELLED"
	V0040KillJobsMsgJobStateCOMPLETED    V0040KillJobsMsgJobState = "COMPLETED"
	V0040KillJobsMsgJobStateCOMPLETING   V0040KillJobsMsgJobState = "COMPLETING"
	V0040KillJobsMsgJobStateCONFIGURING  V0040KillJobsMsgJobState = "CONFIGURING"
	V0040KillJobsMsgJobStateDEADLINE     V0040KillJobsMsgJobState = "DEADLINE"
	V0040KillJobsMsgJobStateFAILED       V0040KillJobsMsgJobState = "FAILED"
	V0040KillJobsMsgJobStateLAUNCHFAILED V0040KillJobsMsgJobState = "LAUNCH_FAILED"
	V0040KillJobsMsgJobStateNODEFAIL     V0040KillJobsMsgJobState = "NODE_FAIL"
	V0040KillJobsMsgJobStateOUTOFMEMORY  V0040KillJobsMsgJobState = "OUT_OF_MEMORY"
	V0040KillJobsMsgJobStatePENDING      V0040KillJobsMsgJobState = "PENDING"
	V0040KillJobsMsgJobStatePOWERUPNODE  V0040KillJobsMsgJobState = "POWER_UP_NODE"
	V0040KillJobsMsgJobStatePREEMPTED    V0040KillJobsMsgJobState = "PREEMPTED"
	V0040KillJobsMsgJobStateRECONFIGFAIL V0040KillJobsMsgJobState = "RECONFIG_FAIL"
	V0040KillJobsMsgJobStateREQUEUED     V0040KillJobsMsgJobState = "REQUEUED"
	V0040KillJobsMsgJobStateREQUEUEFED   V0040KillJobsMsgJobState = "REQUEUE_FED"
	V0040KillJobsMsgJobStateREQUEUEHOLD  V0040KillJobsMsgJobState = "REQUEUE_HOLD"
	V0040KillJobsMsgJobStateRESIZING     V0040KillJobsMsgJobState = "RESIZING"
	V0040KillJobsMsgJobStateRESVDELHOLD  V0040KillJobsMsgJobState = "RESV_DEL_HOLD"
	V0040KillJobsMsgJobStateREVOKED      V0040KillJobsMsgJobState = "REVOKED"
	V0040KillJobsMsgJobStateRUNNING      V0040KillJobsMsgJobState = "RUNNING"
	V0040KillJobsMsgJobStateSIGNALING    V0040KillJobsMsgJobState = "SIGNALING"
	V0040KillJobsMsgJobStateSPECIALEXIT  V0040KillJobsMsgJobState = "SPECIAL_EXIT"
	V0040KillJobsMsgJobStateSTAGEOUT     V0040KillJobsMsgJobState = "STAGE_OUT"
	V0040KillJobsMsgJobStateSTOPPED      V0040KillJobsMsgJobState = "STOPPED"
	V0040KillJobsMsgJobStateSUSPENDED    V0040KillJobsMsgJobState = "SUSPENDED"
	V0040KillJobsMsgJobStateTIMEOUT      V0040KillJobsMsgJobState = "TIMEOUT"
	V0040KillJobsMsgJobStateUPDATEDB     V0040KillJobsMsgJobState = "UPDATE_DB"
)

// Defines values for V0040NodeNextStateAfterReboot.
const (
	V0040NodeNextStateAfterRebootALLOCATED       V0040NodeNextStateAfterReboot = "ALLOCATED"
	V0040NodeNextStateAfterRebootCLOUD           V0040NodeNextStateAfterReboot = "CLOUD"
	V0040NodeNextStateAfterRebootCOMPLETING      V0040NodeNextStateAfterReboot = "COMPLETING"
	V0040NodeNextStateAfterRebootDOWN            V0040NodeNextStateAfterReboot = "DOWN"
	V0040NodeNextStateAfterRebootDRAIN           V0040NodeNextStateAfterReboot = "DRAIN"
	V0040NodeNextStateAfterRebootDYNAMICFUTURE   V0040NodeNextStateAfterReboot = "DYNAMIC_FUTURE"
	V0040NodeNextStateAfterRebootDYNAMICNORM     V0040NodeNextStateAfterReboot = "DYNAMIC_NORM"
	V0040NodeNextStateAfterRebootERROR           V0040NodeNextStateAfterReboot = "ERROR"
	V0040NodeNextStateAfterRebootFAIL            V0040NodeNextStateAfterReboot = "FAIL"
	V0040NodeNextStateAfterRebootFUTURE          V0040NodeNextStateAfterReboot = "FUTURE"
	V0040NodeNextStateAfterRebootIDLE            V0040NodeNextStateAfterReboot = "IDLE"
	V0040NodeNextStateAfterRebootINVALID         V0040NodeNextStateAfterReboot = "INVALID"
	V0040NodeNextStateAfterRebootINVALIDREG      V0040NodeNextStateAfterReboot = "INVALID_REG"
	V0040NodeNextStateAfterRebootMAINTENANCE     V0040NodeNextStateAfterReboot = "MAINTENANCE"
	V0040NodeNextStateAfterRebootMIXED           V0040NodeNextStateAfterReboot = "MIXED"
	V0040NodeNextStateAfterRebootNOTRESPONDING   V0040NodeNextStateAfterReboot = "NOT_RESPONDING"
	V0040NodeNextStateAfterRebootPLANNED         V0040NodeNextStateAfterReboot = "PLANNED"
	V0040NodeNextStateAfterRebootPOWERDOWN       V0040NodeNextStateAfterReboot = "POWER_DOWN"
	V0040NodeNextStateAfterRebootPOWERDRAIN      V0040NodeNextStateAfterReboot = "POWER_DRAIN"
	V0040NodeNextStateAfterRebootPOWEREDDOWN     V0040NodeNextStateAfterReboot = "POWERED_DOWN"
	V0040NodeNextStateAfterRebootPOWERINGDOWN    V0040NodeNextStateAfterReboot = "POWERING_DOWN"
	V0040NodeNextStateAfterRebootPOWERINGUP      V0040NodeNextStateAfterReboot = "POWERING_UP"
	V0040NodeNextStateAfterRebootPOWERUP         V0040NodeNextStateAfterReboot = "POWER_UP"
	V0040NodeNextStateAfterRebootREBOOTCANCELED  V0040NodeNextStateAfterReboot = "REBOOT_CANCELED"
	V0040NodeNextStateAfterRebootREBOOTISSUED    V0040NodeNextStateAfterReboot = "REBOOT_ISSUED"
	V0040NodeNextStateAfterRebootREBOOTREQUESTED V0040NodeNextStateAfterReboot = "REBOOT_REQUESTED"
	V0040NodeNextStateAfterRebootRESERVED        V0040NodeNextStateAfterReboot = "RESERVED"
	V0040NodeNextStateAfterRebootRESUME          V0040NodeNextStateAfterReboot = "RESUME"
	V0040NodeNextStateAfterRebootUNDRAIN         V0040NodeNextStateAfterReboot = "UNDRAIN"
	V0040NodeNextStateAfterRebootUNKNOWN         V0040NodeNextStateAfterReboot = "UNKNOWN"
)

// Defines values for V0040NodeState.
const (
	V0040NodeStateALLOCATED       V0040NodeState = "ALLOCATED"
	V0040NodeStateCLOUD           V0040NodeState = "CLOUD"
	V0040NodeStateCOMPLETING      V0040NodeState = "COMPLETING"
	V0040NodeStateDOWN            V0040NodeState = "DOWN"
	V0040NodeStateDRAIN           V0040NodeState = "DRAIN"
	V0040NodeStateDYNAMICFUTURE   V0040NodeState = "DYNAMIC_FUTURE"
	V0040NodeStateDYNAMICNORM     V0040NodeState = "DYNAMIC_NORM"
	V0040NodeStateERROR           V0040NodeState = "ERROR"
	V0040NodeStateFAIL            V0040NodeState = "FAIL"
	V0040NodeStateFUTURE          V0040NodeState = "FUTURE"
	V0040NodeStateIDLE            V0040NodeState = "IDLE"
	V0040NodeStateINVALID         V0040NodeState = "INVALID"
	V0040NodeStateINVALIDREG      V0040NodeState = "INVALID_REG"
	V0040NodeStateMAINTENANCE     V0040NodeState = "MAINTENANCE"
	V0040NodeStateMIXED           V0040NodeState = "MIXED"
	V0040NodeStateNOTRESPONDING   V0040NodeState = "NOT_RESPONDING"
	V0040NodeStatePLANNED         V0040NodeState = "PLANNED"
	V0040NodeStatePOWERDOWN       V0040NodeState = "POWER_DOWN"
	V0040NodeStatePOWERDRAIN      V0040NodeState = "POWER_DRAIN"
	V0040NodeStatePOWEREDDOWN     V0040NodeState = "POWERED_DOWN"
	V0040NodeStatePOWERINGDOWN    V0040NodeState = "POWERING_DOWN"
	V0040NodeStatePOWERINGUP      V0040NodeState = "POWERING_UP"
	V0040NodeStatePOWERUP         V0040NodeState = "POWER_UP"
	V0040NodeStateREBOOTCANCELED  V0040NodeState = "REBOOT_CANCELED"
	V0040NodeStateREBOOTISSUED    V0040NodeState = "REBOOT_ISSUED"
	V0040NodeStateREBOOTREQUESTED V0040NodeState = "REBOOT_REQUESTED"
	V0040NodeStateRESERVED        V0040NodeState = "RESERVED"
	V0040NodeStateRESUME          V0040NodeState = "RESUME"
	V0040NodeStateUNDRAIN         V0040NodeState = "UNDRAIN"
	V0040NodeStateUNKNOWN         V0040NodeState = "UNKNOWN"
)

// Defines values for V0040PartitionInfoMaximumsOversubscribeFlags.
const (
	Force V0040PartitionInfoMaximumsOversubscribeFlags = "force"
)

// Defines values for V0040PartitionInfoPartitionState.
const (
	V0040PartitionInfoPartitionStateDOWN     V0040PartitionInfoPartitionState = "DOWN"
	V0040PartitionInfoPartitionStateDRAIN    V0040PartitionInfoPartitionState = "DRAIN"
	V0040PartitionInfoPartitionStateINACTIVE V0040PartitionInfoPartitionState = "INACTIVE"
	V0040PartitionInfoPartitionStateUNKNOWN  V0040PartitionInfoPartitionState = "UNKNOWN"
	V0040PartitionInfoPartitionStateUP       V0040PartitionInfoPartitionState = "UP"
)

// Defines values for V0040ProcessExitCodeVerboseStatus.
const (
	V0040ProcessExitCodeVerboseStatusCOREDUMPED V0040ProcessExitCodeVerboseStatus = "CORE_DUMPED"
	V0040ProcessExitCodeVerboseStatusERROR      V0040ProcessExitCodeVerboseStatus = "ERROR"
	V0040ProcessExitCodeVerboseStatusINVALID    V0040ProcessExitCodeVerboseStatus = "INVALID"
	V0040ProcessExitCodeVerboseStatusPENDING    V0040ProcessExitCodeVerboseStatus = "PENDING"
	V0040ProcessExitCodeVerboseStatusSIGNALED   V0040ProcessExitCodeVerboseStatus = "SIGNALED"
	V0040ProcessExitCodeVerboseStatusSUCCESS    V0040ProcessExitCodeVerboseStatus = "SUCCESS"
)

// Defines values for V0040QosFlags.
const (
	ADD                   V0040QosFlags = "ADD"
	DENYLIMIT             V0040QosFlags = "DENY_LIMIT"
	ENFORCEUSAGETHRESHOLD V0040QosFlags = "ENFORCE_USAGE_THRESHOLD"
	NODECAY               V0040QosFlags = "NO_DECAY"
	NORESERVE             V0040QosFlags = "NO_RESERVE"
	NOTSET                V0040QosFlags = "NOT_SET"
	OVERRIDEPARTITIONQOS  V0040QosFlags = "OVERRIDE_PARTITION_QOS"
	PARTITIONMAXIMUMNODE  V0040QosFlags = "PARTITION_MAXIMUM_NODE"
	PARTITIONMINIMUMNODE  V0040QosFlags = "PARTITION_MINIMUM_NODE"
	PARTITIONTIMELIMIT    V0040QosFlags = "PARTITION_TIME_LIMIT"
	RELATIVE              V0040QosFlags = "RELATIVE"
	REMOVE                V0040QosFlags = "REMOVE"
	REQUIREDRESERVATION   V0040QosFlags = "REQUIRED_RESERVATION"
	USAGEFACTORSAFE       V0040QosFlags = "USAGE_FACTOR_SAFE"
)

// Defines values for V0040QosPreemptMode.
const (
	V0040QosPreemptModeCANCEL   V0040QosPreemptMode = "CANCEL"
	V0040QosPreemptModeDISABLED V0040QosPreemptMode = "DISABLED"
	V0040QosPreemptModeGANG     V0040QosPreemptMode = "GANG"
	V0040QosPreemptModeREQUEUE  V0040QosPreemptMode = "REQUEUE"
	V0040QosPreemptModeSUSPEND  V0040QosPreemptMode = "SUSPEND"
)

// Defines values for V0040ReservationInfoFlags.
const (
	ALLNODES           V0040ReservationInfoFlags = "ALL_NODES"
	ANYNODES           V0040ReservationInfoFlags = "ANY_NODES"
	DAILY              V0040ReservationInfoFlags = "DAILY"
	DURATIONMINUS      V0040ReservationInfoFlags = "DURATION_MINUS"
	DURATIONPLUS       V0040ReservationInfoFlags = "DURATION_PLUS"
	FLEX               V0040ReservationInfoFlags = "FLEX"
	HOURLY             V0040ReservationInfoFlags = "HOURLY"
	IGNOREJOBS         V0040ReservationInfoFlags = "IGNORE_JOBS"
	MAGNETIC           V0040ReservationInfoFlags = "MAGNETIC"
	MAINT              V0040ReservationInfoFlags = "MAINT"
	NODAILY            V0040ReservationInfoFlags = "NO_DAILY"
	NOFLEX             V0040ReservationInfoFlags = "NO_FLEX"
	NOHOLDJOBSAFTEREND V0040ReservationInfoFlags = "NO_HOLD_JOBS_AFTER_END"
	NOHOURLY           V0040ReservationInfoFlags = "NO_HOURLY"
	NOIGNOREJOBS       V0040ReservationInfoFlags = "NO_IGNORE_JOBS"
	NOMAINT            V0040ReservationInfoFlags = "NO_MAINT"
	NOPARTNODES        V0040ReservationInfoFlags = "NO_PART_NODES"
	NOPURGECOMP        V0040ReservationInfoFlags = "NO_PURGE_COMP"
	NOSTATIC           V0040ReservationInfoFlags = "NO_STATIC"
	NOWEEKDAY          V0040ReservationInfoFlags = "NO_WEEKDAY"
	NOWEEKEND          V0040ReservationInfoFlags = "NO_WEEKEND"
	NOWEEKLY           V0040ReservationInfoFlags = "NO_WEEKLY"
	OVERLAP            V0040ReservationInfoFlags = "OVERLAP"
	PARTNODES          V0040ReservationInfoFlags = "PART_NODES"
	PURGECOMP          V0040ReservationInfoFlags = "PURGE_COMP"
	REOCCURRING        V0040ReservationInfoFlags = "REOCCURRING"
	REPLACE            V0040ReservationInfoFlags = "REPLACE"
	SKIP               V0040ReservationInfoFlags = "SKIP"
	SPECNODES          V0040ReservationInfoFlags = "SPEC_NODES"
	STATIC             V0040ReservationInfoFlags = "STATIC"
	TIMEFLOAT          V0040ReservationInfoFlags = "TIME_FLOAT"
	WEEKDAY            V0040ReservationInfoFlags = "WEEKDAY"
	WEEKEND            V0040ReservationInfoFlags = "WEEKEND"
	WEEKLY             V0040ReservationInfoFlags = "WEEKLY"
)

// Defines values for V0040RollupStatsType.
const (
	Internal V0040RollupStatsType = "internal"
	Unknown  V0040RollupStatsType = "unknown"
	User     V0040RollupStatsType = "user"
)

// Defines values for V0040StepState.
const (
	V0040StepStateBOOTFAIL     V0040StepState = "BOOT_FAIL"
	V0040StepStateCANCELLED    V0040StepState = "CANCELLED"
	V0040StepStateCOMPLETED    V0040StepState = "COMPLETED"
	V0040StepStateCOMPLETING   V0040StepState = "COMPLETING"
	V0040StepStateCONFIGURING  V0040StepState = "CONFIGURING"
	V0040StepStateDEADLINE     V0040StepState = "DEADLINE"
	V0040StepStateFAILED       V0040StepState = "FAILED"
	V0040StepStateLAUNCHFAILED V0040StepState = "LAUNCH_FAILED"
	V0040StepStateNODEFAIL     V0040StepState = "NODE_FAIL"
	V0040StepStateOUTOFMEMORY  V0040StepState = "OUT_OF_MEMORY"
	V0040StepStatePENDING      V0040StepState = "PENDING"
	V0040StepStatePOWERUPNODE  V0040StepState = "POWER_UP_NODE"
	V0040StepStatePREEMPTED    V0040StepState = "PREEMPTED"
	V0040StepStateRECONFIGFAIL V0040StepState = "RECONFIG_FAIL"
	V0040StepStateREQUEUED     V0040StepState = "REQUEUED"
	V0040StepStateREQUEUEFED   V0040StepState = "REQUEUE_FED"
	V0040StepStateREQUEUEHOLD  V0040StepState = "REQUEUE_HOLD"
	V0040StepStateRESIZING     V0040StepState = "RESIZING"
	V0040StepStateRESVDELHOLD  V0040StepState = "RESV_DEL_HOLD"
	V0040StepStateREVOKED      V0040StepState = "REVOKED"
	V0040StepStateRUNNING      V0040StepState = "RUNNING"
	V0040StepStateSIGNALING    V0040StepState = "SIGNALING"
	V0040StepStateSPECIALEXIT  V0040StepState = "SPECIAL_EXIT"
	V0040StepStateSTAGEOUT     V0040StepState = "STAGE_OUT"
	V0040StepStateSTOPPED      V0040StepState = "STOPPED"
	V0040StepStateSUSPENDED    V0040StepState = "SUSPENDED"
	V0040StepStateTIMEOUT      V0040StepState = "TIMEOUT"
	V0040StepStateUPDATEDB     V0040StepState = "UPDATE_DB"
)

// Defines values for V0040UpdateNodeMsgState.
const (
	V0040UpdateNodeMsgStateALLOCATED       V0040UpdateNodeMsgState = "ALLOCATED"
	V0040UpdateNodeMsgStateCLOUD           V0040UpdateNodeMsgState = "CLOUD"
	V0040UpdateNodeMsgStateCOMPLETING      V0040UpdateNodeMsgState = "COMPLETING"
	V0040UpdateNodeMsgStateDOWN            V0040UpdateNodeMsgState = "DOWN"
	V0040UpdateNodeMsgStateDRAIN           V0040UpdateNodeMsgState = "DRAIN"
	V0040UpdateNodeMsgStateDYNAMICFUTURE   V0040UpdateNodeMsgState = "DYNAMIC_FUTURE"
	V0040UpdateNodeMsgStateDYNAMICNORM     V0040UpdateNodeMsgState = "DYNAMIC_NORM"
	V0040UpdateNodeMsgStateERROR           V0040UpdateNodeMsgState = "ERROR"
	V0040UpdateNodeMsgStateFAIL            V0040UpdateNodeMsgState = "FAIL"
	V0040UpdateNodeMsgStateFUTURE          V0040UpdateNodeMsgState = "FUTURE"
	V0040UpdateNodeMsgStateIDLE            V0040UpdateNodeMsgState = "IDLE"
	V0040UpdateNodeMsgStateINVALID         V0040UpdateNodeMsgState = "INVALID"
	V0040UpdateNodeMsgStateINVALIDREG      V0040UpdateNodeMsgState = "INVALID_REG"
	V0040UpdateNodeMsgStateMAINTENANCE     V0040UpdateNodeMsgState = "MAINTENANCE"
	V0040UpdateNodeMsgStateMIXED           V0040UpdateNodeMsgState = "MIXED"
	V0040UpdateNodeMsgStateNOTRESPONDING   V0040UpdateNodeMsgState = "NOT_RESPONDING"
	V0040UpdateNodeMsgStatePLANNED         V0040UpdateNodeMsgState = "PLANNED"
	V0040UpdateNodeMsgStatePOWERDOWN       V0040UpdateNodeMsgState = "POWER_DOWN"
	V0040UpdateNodeMsgStatePOWERDRAIN      V0040UpdateNodeMsgState = "POWER_DRAIN"
	V0040UpdateNodeMsgStatePOWEREDDOWN     V0040UpdateNodeMsgState = "POWERED_DOWN"
	V0040UpdateNodeMsgStatePOWERINGDOWN    V0040UpdateNodeMsgState = "POWERING_DOWN"
	V0040UpdateNodeMsgStatePOWERINGUP      V0040UpdateNodeMsgState = "POWERING_UP"
	V0040UpdateNodeMsgStatePOWERUP         V0040UpdateNodeMsgState = "POWER_UP"
	V0040UpdateNodeMsgStateREBOOTCANCELED  V0040UpdateNodeMsgState = "REBOOT_CANCELED"
	V0040UpdateNodeMsgStateREBOOTISSUED    V0040UpdateNodeMsgState = "REBOOT_ISSUED"
	V0040UpdateNodeMsgStateREBOOTREQUESTED V0040UpdateNodeMsgState = "REBOOT_REQUESTED"
	V0040UpdateNodeMsgStateRESERVED        V0040UpdateNodeMsgState = "RESERVED"
	V0040UpdateNodeMsgStateRESUME          V0040UpdateNodeMsgState = "RESUME"
	V0040UpdateNodeMsgStateUNDRAIN         V0040UpdateNodeMsgState = "UNDRAIN"
	V0040UpdateNodeMsgStateUNKNOWN         V0040UpdateNodeMsgState = "UNKNOWN"
)

// Defines values for V0040UserAdministratorLevel.
const (
	V0040UserAdministratorLevelAdministrator V0040UserAdministratorLevel = "Administrator"
	V0040UserAdministratorLevelNone          V0040UserAdministratorLevel = "None"
	V0040UserAdministratorLevelNotSet        V0040UserAdministratorLevel = "Not Set"
	V0040UserAdministratorLevelOperator      V0040UserAdministratorLevel = "Operator"
)

// Defines values for V0040UserFlags.
const (
	V0040UserFlagsDELETED V0040UserFlags = "DELETED"
	V0040UserFlagsNONE    V0040UserFlags = "NONE"
)

// Defines values for V0040UserShortAdminlevel.
const (
	V0040UserShortAdminlevelAdministrator V0040UserShortAdminlevel = "Administrator"
	V0040UserShortAdminlevelNone          V0040UserShortAdminlevel = "None"
	V0040UserShortAdminlevelNotSet        V0040UserShortAdminlevel = "Not Set"
	V0040UserShortAdminlevelOperator      V0040UserShortAdminlevel = "Operator"
)

// Defines values for V0040WckeyFlags.
const (
	V0040WckeyFlagsDELETED V0040WckeyFlags = "DELETED"
)

// Defines values for V0040WckeyTagStructFlags.
const (
	ASSIGNEDDEFAULT V0040WckeyTagStructFlags = "ASSIGNED_DEFAULT"
)

// Defines values for SlurmV0040DeleteJobParamsFlags.
const (
	ARRAYTASK         SlurmV0040DeleteJobParamsFlags = "ARRAY_TASK"
	BATCHJOB          SlurmV0040DeleteJobParamsFlags = "BATCH_JOB"
	CRONJOBS          SlurmV0040DeleteJobParamsFlags = "CRON_JOBS"
	FEDERATIONREQUEUE SlurmV0040DeleteJobParamsFlags = "FEDERATION_REQUEUE"
	FULLJOB           SlurmV0040DeleteJobParamsFlags = "FULL_JOB"
	FULLSTEPSONLY     SlurmV0040DeleteJobParamsFlags = "FULL_STEPS_ONLY"
	HURRY             SlurmV0040DeleteJobParamsFlags = "HURRY"
	NOCRONJOBS        SlurmV0040DeleteJobParamsFlags = "NO_CRON_JOBS"
	NOSIBLINGJOBS     SlurmV0040DeleteJobParamsFlags = "NO_SIBLING_JOBS"
	OUTOFMEMORY       SlurmV0040DeleteJobParamsFlags = "OUT_OF_MEMORY"
	RESERVATIONJOB    SlurmV0040DeleteJobParamsFlags = "RESERVATION_JOB"
	VERBOSE           SlurmV0040DeleteJobParamsFlags = "VERBOSE"
	WARNINGSENT       SlurmV0040DeleteJobParamsFlags = "WARNING_SENT"
)

// Defines values for SlurmV0040GetJobParamsFlags.
const (
	SlurmV0040GetJobParamsFlagsALL        SlurmV0040GetJobParamsFlags = "ALL"
	SlurmV0040GetJobParamsFlagsDETAIL     SlurmV0040GetJobParamsFlags = "DETAIL"
	SlurmV0040GetJobParamsFlagsFEDERATION SlurmV0040GetJobParamsFlags = "FEDERATION"
	SlurmV0040GetJobParamsFlagsFUTURE     SlurmV0040GetJobParamsFlags = "FUTURE"
	SlurmV0040GetJobParamsFlagsLOCAL      SlurmV0040GetJobParamsFlags = "LOCAL"
	SlurmV0040GetJobParamsFlagsMIXED      SlurmV0040GetJobParamsFlags = "MIXED"
	SlurmV0040GetJobParamsFlagsSIBLING    SlurmV0040GetJobParamsFlags = "SIBLING"
)

// Defines values for SlurmV0040GetJobsParamsFlags.
const (
	SlurmV0040GetJobsParamsFlagsALL        SlurmV0040GetJobsParamsFlags = "ALL"
	SlurmV0040GetJobsParamsFlagsDETAIL     SlurmV0040GetJobsParamsFlags = "DETAIL"
	SlurmV0040GetJobsParamsFlagsFEDERATION SlurmV0040GetJobsParamsFlags = "FEDERATION"
	SlurmV0040GetJobsParamsFlagsFUTURE     SlurmV0040GetJobsParamsFlags = "FUTURE"
	SlurmV0040GetJobsParamsFlagsLOCAL      SlurmV0040GetJobsParamsFlags = "LOCAL"
	SlurmV0040GetJobsParamsFlagsMIXED      SlurmV0040GetJobsParamsFlags = "MIXED"
	SlurmV0040GetJobsParamsFlagsSIBLING    SlurmV0040GetJobsParamsFlags = "SIBLING"
)

// Defines values for SlurmV0040GetJobsStateParamsFlags.
const (
	SlurmV0040GetJobsStateParamsFlagsALL        SlurmV0040GetJobsStateParamsFlags = "ALL"
	SlurmV0040GetJobsStateParamsFlagsDETAIL     SlurmV0040GetJobsStateParamsFlags = "DETAIL"
	SlurmV0040GetJobsStateParamsFlagsFEDERATION SlurmV0040GetJobsStateParamsFlags = "FEDERATION"
	SlurmV0040GetJobsStateParamsFlagsFUTURE     SlurmV0040GetJobsStateParamsFlags = "FUTURE"
	SlurmV0040GetJobsStateParamsFlagsLOCAL      SlurmV0040GetJobsStateParamsFlags = "LOCAL"
	SlurmV0040GetJobsStateParamsFlagsMIXED      SlurmV0040GetJobsStateParamsFlags = "MIXED"
	SlurmV0040GetJobsStateParamsFlagsSIBLING    SlurmV0040GetJobsStateParamsFlags = "SIBLING"
)

// Defines values for SlurmV0040GetNodeParamsFlags.
const (
	SlurmV0040GetNodeParamsFlagsALL        SlurmV0040GetNodeParamsFlags = "ALL"
	SlurmV0040GetNodeParamsFlagsDETAIL     SlurmV0040GetNodeParamsFlags = "DETAIL"
	SlurmV0040GetNodeParamsFlagsFEDERATION SlurmV0040GetNodeParamsFlags = "FEDERATION"
	SlurmV0040GetNodeParamsFlagsFUTURE     SlurmV0040GetNodeParamsFlags = "FUTURE"
	SlurmV0040GetNodeParamsFlagsLOCAL      SlurmV0040GetNodeParamsFlags = "LOCAL"
	SlurmV0040GetNodeParamsFlagsMIXED      SlurmV0040GetNodeParamsFlags = "MIXED"
	SlurmV0040GetNodeParamsFlagsSIBLING    SlurmV0040GetNodeParamsFlags = "SIBLING"
)

// Defines values for SlurmV0040GetNodesParamsFlags.
const (
	SlurmV0040GetNodesParamsFlagsALL        SlurmV0040GetNodesParamsFlags = "ALL"
	SlurmV0040GetNodesParamsFlagsDETAIL     SlurmV0040GetNodesParamsFlags = "DETAIL"
	SlurmV0040GetNodesParamsFlagsFEDERATION SlurmV0040GetNodesParamsFlags = "FEDERATION"
	SlurmV0040GetNodesParamsFlagsFUTURE     SlurmV0040GetNodesParamsFlags = "FUTURE"
	SlurmV0040GetNodesParamsFlagsLOCAL      SlurmV0040GetNodesParamsFlags = "LOCAL"
	SlurmV0040GetNodesParamsFlagsMIXED      SlurmV0040GetNodesParamsFlags = "MIXED"
	SlurmV0040GetNodesParamsFlagsSIBLING    SlurmV0040GetNodesParamsFlags = "SIBLING"
)

// Defines values for SlurmV0040GetPartitionParamsFlags.
const (
	SlurmV0040GetPartitionParamsFlagsALL        SlurmV0040GetPartitionParamsFlags = "ALL"
	SlurmV0040GetPartitionParamsFlagsDETAIL     SlurmV0040GetPartitionParamsFlags = "DETAIL"
	SlurmV0040GetPartitionParamsFlagsFEDERATION SlurmV0040GetPartitionParamsFlags = "FEDERATION"
	SlurmV0040GetPartitionParamsFlagsFUTURE     SlurmV0040GetPartitionParamsFlags = "FUTURE"
	SlurmV0040GetPartitionParamsFlagsLOCAL      SlurmV0040GetPartitionParamsFlags = "LOCAL"
	SlurmV0040GetPartitionParamsFlagsMIXED      SlurmV0040GetPartitionParamsFlags = "MIXED"
	SlurmV0040GetPartitionParamsFlagsSIBLING    SlurmV0040GetPartitionParamsFlags = "SIBLING"
)

// Defines values for SlurmV0040GetPartitionsParamsFlags.
const (
	SlurmV0040GetPartitionsParamsFlagsALL        SlurmV0040GetPartitionsParamsFlags = "ALL"
	SlurmV0040GetPartitionsParamsFlagsDETAIL     SlurmV0040GetPartitionsParamsFlags = "DETAIL"
	SlurmV0040GetPartitionsParamsFlagsFEDERATION SlurmV0040GetPartitionsParamsFlags = "FEDERATION"
	SlurmV0040GetPartitionsParamsFlagsFUTURE     SlurmV0040GetPartitionsParamsFlags = "FUTURE"
	SlurmV0040GetPartitionsParamsFlagsLOCAL      SlurmV0040GetPartitionsParamsFlags = "LOCAL"
	SlurmV0040GetPartitionsParamsFlagsMIXED      SlurmV0040GetPartitionsParamsFlags = "MIXED"
	SlurmV0040GetPartitionsParamsFlagsSIBLING    SlurmV0040GetPartitionsParamsFlags = "SIBLING"
)

// Defines values for SlurmdbV0040DeleteClusterParamsClassification.
const (
	SlurmdbV0040DeleteClusterParamsClassificationCAPABILITY                          SlurmdbV0040DeleteClusterParamsClassification = "CAPABILITY"
	SlurmdbV0040DeleteClusterParamsClassificationCAPACITY                            SlurmdbV0040DeleteClusterParamsClassification = "CAPACITY"
	SlurmdbV0040DeleteClusterParamsClassificationCAPAPACITYBothCAPABILITYAndCAPACITY SlurmdbV0040DeleteClusterParamsClassification = "CAPAPACITY (both CAPABILITY and CAPACITY)"
	SlurmdbV0040DeleteClusterParamsClassificationUNCLASSIFIED                        SlurmdbV0040DeleteClusterParamsClassification = "UNCLASSIFIED"
)

// Defines values for SlurmdbV0040DeleteClusterParamsFlags.
const (
	SlurmdbV0040DeleteClusterParamsFlagsEXTERNAL       SlurmdbV0040DeleteClusterParamsFlags = "EXTERNAL"
	SlurmdbV0040DeleteClusterParamsFlagsFEDERATION     SlurmdbV0040DeleteClusterParamsFlags = "FEDERATION"
	SlurmdbV0040DeleteClusterParamsFlagsFRONTEND       SlurmdbV0040DeleteClusterParamsFlags = "FRONT_END"
	SlurmdbV0040DeleteClusterParamsFlagsMULTIPLESLURMD SlurmdbV0040DeleteClusterParamsFlags = "MULTIPLE_SLURMD"
	SlurmdbV0040DeleteClusterParamsFlagsREGISTERING    SlurmdbV0040DeleteClusterParamsFlags = "REGISTERING"
)

// Defines values for SlurmdbV0040GetClusterParamsClassification.
const (
	SlurmdbV0040GetClusterParamsClassificationCAPABILITY                          SlurmdbV0040GetClusterParamsClassification = "CAPABILITY"
	SlurmdbV0040GetClusterParamsClassificationCAPACITY                            SlurmdbV0040GetClusterParamsClassification = "CAPACITY"
	SlurmdbV0040GetClusterParamsClassificationCAPAPACITYBothCAPABILITYAndCAPACITY SlurmdbV0040GetClusterParamsClassification = "CAPAPACITY (both CAPABILITY and CAPACITY)"
	SlurmdbV0040GetClusterParamsClassificationUNCLASSIFIED                        SlurmdbV0040GetClusterParamsClassification = "UNCLASSIFIED"
)

// Defines values for SlurmdbV0040GetClusterParamsFlags.
const (
	SlurmdbV0040GetClusterParamsFlagsEXTERNAL       SlurmdbV0040GetClusterParamsFlags = "EXTERNAL"
	SlurmdbV0040GetClusterParamsFlagsFEDERATION     SlurmdbV0040GetClusterParamsFlags = "FEDERATION"
	SlurmdbV0040GetClusterParamsFlagsFRONTEND       SlurmdbV0040GetClusterParamsFlags = "FRONT_END"
	SlurmdbV0040GetClusterParamsFlagsMULTIPLESLURMD SlurmdbV0040GetClusterParamsFlags = "MULTIPLE_SLURMD"
	SlurmdbV0040GetClusterParamsFlagsREGISTERING    SlurmdbV0040GetClusterParamsFlags = "REGISTERING"
)

// Defines values for SlurmdbV0040GetQosParamsPreemptMode.
const (
	SlurmdbV0040GetQosParamsPreemptModeCANCEL   SlurmdbV0040GetQosParamsPreemptMode = "CANCEL"
	SlurmdbV0040GetQosParamsPreemptModeDISABLED SlurmdbV0040GetQosParamsPreemptMode = "DISABLED"
	SlurmdbV0040GetQosParamsPreemptModeGANG     SlurmdbV0040GetQosParamsPreemptMode = "GANG"
	SlurmdbV0040GetQosParamsPreemptModeREQUEUE  SlurmdbV0040GetQosParamsPreemptMode = "REQUEUE"
	SlurmdbV0040GetQosParamsPreemptModeSUSPEND  SlurmdbV0040GetQosParamsPreemptMode = "SUSPEND"
)

// Defines values for SlurmdbV0040PostQosParamsPreemptMode.
const (
	CANCEL   SlurmdbV0040PostQosParamsPreemptMode = "CANCEL"
	DISABLED SlurmdbV0040PostQosParamsPreemptMode = "DISABLED"
	GANG     SlurmdbV0040PostQosParamsPreemptMode = "GANG"
	REQUEUE  SlurmdbV0040PostQosParamsPreemptMode = "REQUEUE"
	SUSPEND  SlurmdbV0040PostQosParamsPreemptMode = "SUSPEND"
)

// Defines values for SlurmdbV0040GetUsersParamsAdminLevel.
const (
	Administrator SlurmdbV0040GetUsersParamsAdminLevel = "Administrator"
	None          SlurmdbV0040GetUsersParamsAdminLevel = "None"
	NotSet        SlurmdbV0040GetUsersParamsAdminLevel = "Not Set"
	Operator      SlurmdbV0040GetUsersParamsAdminLevel = "Operator"
)

// Defines values for SlurmdbV0040PostUsersAssociationParamsFlags.
const (
	SlurmdbV0040PostUsersAssociationParamsFlagsALL        SlurmdbV0040PostUsersAssociationParamsFlags = "ALL"
	SlurmdbV0040PostUsersAssociationParamsFlagsDETAIL     SlurmdbV0040PostUsersAssociationParamsFlags = "DETAIL"
	SlurmdbV0040PostUsersAssociationParamsFlagsFEDERATION SlurmdbV0040PostUsersAssociationParamsFlags = "FEDERATION"
	SlurmdbV0040PostUsersAssociationParamsFlagsFUTURE     SlurmdbV0040PostUsersAssociationParamsFlags = "FUTURE"
	SlurmdbV0040PostUsersAssociationParamsFlagsLOCAL      SlurmdbV0040PostUsersAssociationParamsFlags = "LOCAL"
	SlurmdbV0040PostUsersAssociationParamsFlagsMIXED      SlurmdbV0040PostUsersAssociationParamsFlags = "MIXED"
	SlurmdbV0040PostUsersAssociationParamsFlagsSIBLING    SlurmdbV0040PostUsersAssociationParamsFlags = "SIBLING"
)

// V0040Account defines model for v0.0.40_account.
type V0040Account struct {
	Associations *V0040AssocShortList `json:"associations,omitempty"`
	Coordinators *V0040CoordList      `json:"coordinators,omitempty"`

	// Description Arbitrary string describing the account
	Description string `json:"description"`

	// Flags Flags associated with the account
	Flags *[]V0040AccountFlags `json:"flags,omitempty"`

	// Name Account name
	Name string `json:"name"`

	// Organization Organization to which the account belongs
	Organization string `json:"organization"`
}

// V0040AccountFlags defines model for V0040Account.Flags.
type V0040AccountFlags string

// V0040AccountList defines model for v0.0.40_account_list.
type V0040AccountList = []V0040Account

// V0040AccountShort defines model for v0.0.40_account_short.
type V0040AccountShort struct {
	// Description Arbitrary string describing the account
	Description *string `json:"description,omitempty"`

	// Organization Organization to which the account belongs
	Organization *string `json:"organization,omitempty"`
}

// V0040Accounting defines model for v0.0.40_accounting.
type V0040Accounting struct {
	TRES      *V0040Tres `json:"TRES,omitempty"`
	Allocated *struct {
		// Seconds Number of cpu seconds allocated
		Seconds *int64 `json:"seconds,omitempty"`
	} `json:"allocated,omitempty"`

	// Id Association ID or Workload characterization key ID
	Id *int32 `json:"id,omitempty"`

	// Start When the record was started
	Start *int64 `json:"start,omitempty"`
}

// V0040AccountingList defines model for v0.0.40_accounting_list.
type V0040AccountingList = []V0040Accounting

// V0040AccountsAddCond defines model for v0.0.40_accounts_add_cond.
type V0040AccountsAddCond struct {
	Accounts    V0040StringList   `json:"accounts"`
	Association *V0040AssocRecSet `json:"association,omitempty"`
	Clusters    *V0040StringList  `json:"clusters,omitempty"`
}

// V0040AcctGatherEnergy defines model for v0.0.40_acct_gather_energy.
type V0040AcctGatherEnergy struct {
	// AverageWatts Average power consumption, in watts
	AverageWatts *int32 `json:"average_watts,omitempty"`

	// BaseConsumedEnergy The energy consumed between when the node was powered on and the last time it was registered by slurmd, in joules
	BaseConsumedEnergy *int64 `json:"base_consumed_energy,omitempty"`

	// ConsumedEnergy The energy consumed between the last time the node was registered by the slurmd daemon and the last node energy accounting sample, in joules
	ConsumedEnergy *int64 `json:"consumed_energy,omitempty"`

	// CurrentWatts Integer number with flags
	CurrentWatts *V0040Uint32NoVal `json:"current_watts,omitempty"`

	// LastCollected Time when energy data was last retrieved (UNIX timestamp)
	LastCollected *int64 `json:"last_collected,omitempty"`

	// PreviousConsumedEnergy Previous value of consumed_energy
	PreviousConsumedEnergy *int64 `json:"previous_consumed_energy,omitempty"`
}

// V0040Assoc defines model for v0.0.40_assoc.
type V0040Assoc struct {
	// Account Account
	Account    *string              `json:"account,omitempty"`
	Accounting *V0040AccountingList `json:"accounting,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`
	Default *struct {
		// Qos Default QOS
		Qos *string `json:"qos,omitempty"`
	} `json:"default,omitempty"`

	// Flags Flags on the association
	Flags *[]V0040AssocFlags `json:"flags,omitempty"`
	Id    *V0040AssocShort   `json:"id,omitempty"`

	// IsDefault Is default association for user
	IsDefault *bool `json:"is_default,omitempty"`

	// Lineage Complete path up the hierarchy to the root association
	Lineage *string `json:"lineage,omitempty"`
	Max     *struct {
		Jobs *struct {
			// Accruing Integer number with flags
			Accruing *V0040Uint32NoVal `json:"accruing,omitempty"`

			// Active Integer number with flags
			Active *V0040Uint32NoVal `json:"active,omitempty"`
			Per    *struct {
				// Accruing Integer number with flags
				Accruing *V0040Uint32NoVal `json:"accruing,omitempty"`

				// Count Integer number with flags
				Count *V0040Uint32NoVal `json:"count,omitempty"`

				// Submitted Integer number with flags
				Submitted *V0040Uint32NoVal `json:"submitted,omitempty"`

				// WallClock Integer number with flags
				WallClock *V0040Uint32NoVal `json:"wall_clock,omitempty"`
			} `json:"per,omitempty"`

			// Total Integer number with flags
			Total *V0040Uint32NoVal `json:"total,omitempty"`
		} `json:"jobs,omitempty"`
		Per *struct {
			Account *struct {
				// WallClock Integer number with flags
				WallClock *V0040Uint32NoVal `json:"wall_clock,omitempty"`
			} `json:"account,omitempty"`
		} `json:"per,omitempty"`
		Tres *struct {
			Group *struct {
				Active  *V0040TresList `json:"active,omitempty"`
				Minutes *V0040TresList `json:"minutes,omitempty"`
			} `json:"group,omitempty"`
			Minutes *struct {
				Per *struct {
					Job *V0040TresList `json:"job,omitempty"`
				} `json:"per,omitempty"`
				Total *V0040TresList `json:"total,omitempty"`
			} `json:"minutes,omitempty"`
			Per *struct {
				Job  *V0040TresList `json:"job,omitempty"`
				Node *V0040TresList `json:"node,omitempty"`
			} `json:"per,omitempty"`
			Total *V0040TresList `json:"total,omitempty"`
		} `json:"tres,omitempty"`
	} `json:"max,omitempty"`
	Min *struct {
		// PriorityThreshold Integer number with flags
		PriorityThreshold *V0040Uint32NoVal `json:"priority_threshold,omitempty"`
	} `json:"min,omitempty"`

	// ParentAccount Name of parent account
	ParentAccount *string `json:"parent_account,omitempty"`

	// Partition Partition name
	Partition *string `json:"partition,omitempty"`

	// Priority Integer number with flags
	Priority *V0040Uint32NoVal `json:"priority,omitempty"`

	// Qos List of QOS names
	Qos *V0040QosStringIdList `json:"qos,omitempty"`

	// SharesRaw Allocated shares used for fairshare calculation
	SharesRaw *int32 `json:"shares_raw,omitempty"`

	// User User name
	User string `json:"user"`
}

// V0040AssocFlags defines model for V0040Assoc.Flags.
type V0040AssocFlags string

// V0040AssocList defines model for v0.0.40_assoc_list.
type V0040AssocList = []V0040Assoc

// V0040AssocRecSet defines model for v0.0.40_assoc_rec_set.
type V0040AssocRecSet struct {
	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// Defaultqos Default QOS
	Defaultqos *string `json:"defaultqos,omitempty"`

	// Fairshare Allocated shares used for fairshare calculation
	Fairshare *int32 `json:"fairshare,omitempty"`

	// Grpjobs Integer number with flags
	Grpjobs *V0040Uint32NoVal `json:"grpjobs,omitempty"`

	// Grpjobsaccrue Integer number with flags
	Grpjobsaccrue *V0040Uint32NoVal `json:"grpjobsaccrue,omitempty"`

	// Grpsubmitjobs Integer number with flags
	Grpsubmitjobs  *V0040Uint32NoVal `json:"grpsubmitjobs,omitempty"`
	Grptres        *V0040TresList    `json:"grptres,omitempty"`
	Grptresmins    *V0040TresList    `json:"grptresmins,omitempty"`
	Grptresrunmins *V0040TresList    `json:"grptresrunmins,omitempty"`

	// Grpwall Integer number with flags
	Grpwall *V0040Uint32NoVal `json:"grpwall,omitempty"`

	// Maxjobs Integer number with flags
	Maxjobs *V0040Uint32NoVal `json:"maxjobs,omitempty"`

	// Maxjobsaccrue Integer number with flags
	Maxjobsaccrue *V0040Uint32NoVal `json:"maxjobsaccrue,omitempty"`

	// Maxsubmitjobs Integer number with flags
	Maxsubmitjobs     *V0040Uint32NoVal `json:"maxsubmitjobs,omitempty"`
	Maxtresminsperjob *V0040TresList    `json:"maxtresminsperjob,omitempty"`
	Maxtresperjob     *V0040TresList    `json:"maxtresperjob,omitempty"`
	Maxtrespernode    *V0040TresList    `json:"maxtrespernode,omitempty"`
	Maxtresrunmins    *V0040TresList    `json:"maxtresrunmins,omitempty"`

	// Maxwalldurationperjob Integer number with flags
	Maxwalldurationperjob *V0040Uint32NoVal `json:"maxwalldurationperjob,omitempty"`

	// Minpriothresh Integer number with flags
	Minpriothresh *V0040Uint32NoVal `json:"minpriothresh,omitempty"`

	// Parent Name of parent account
	Parent *string `json:"parent,omitempty"`

	// Priority Integer number with flags
	Priority *V0040Uint32NoVal `json:"priority,omitempty"`

	// Qoslevel List of QOS names
	Qoslevel *V0040QosStringIdList `json:"qoslevel,omitempty"`
}

// V0040AssocSharesObjList defines model for v0.0.40_assoc_shares_obj_list.
type V0040AssocSharesObjList = []V0040AssocSharesObjWrap

// V0040AssocSharesObjWrap defines model for v0.0.40_assoc_shares_obj_wrap.
type V0040AssocSharesObjWrap struct {
	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// EffectiveUsage Effective, normalized usage
	EffectiveUsage *float64 `json:"effective_usage,omitempty"`
	Fairshare      *struct {
		// Factor Fairshare factor
		Factor *float64 `json:"factor,omitempty"`

		// Level Fairshare factor at this level; stored on an assoc as a long double, but that is not needed for display in sshare
		Level *float64 `json:"level,omitempty"`
	} `json:"fairshare,omitempty"`

	// Id Association ID
	Id *int32 `json:"id,omitempty"`

	// Name Share name
	Name *string `json:"name,omitempty"`

	// Parent Parent name
	Parent *string `json:"parent,omitempty"`

	// Partition Partition name
	Partition *string `json:"partition,omitempty"`

	// Shares Integer number with flags
	Shares *V0040Uint32NoVal `json:"shares,omitempty"`

	// SharesNormalized 64 bit floating point number with flags
	SharesNormalized *V0040Float64NoVal `json:"shares_normalized,omitempty"`
	Tres             *struct {
		GroupMinutes *V0040SharesUint64TresList   `json:"group_minutes,omitempty"`
		RunSeconds   *V0040SharesUint64TresList   `json:"run_seconds,omitempty"`
		Usage        *V0040SharesFloat128TresList `json:"usage,omitempty"`
	} `json:"tres,omitempty"`

	// Type User or account association
	Type *[]V0040AssocSharesObjWrapType `json:"type,omitempty"`

	// Usage Measure of tresbillableunits usage
	Usage *int64 `json:"usage,omitempty"`

	// UsageNormalized 64 bit floating point number with flags
	UsageNormalized *V0040Float64NoVal `json:"usage_normalized,omitempty"`
}

// V0040AssocSharesObjWrapType defines model for V0040AssocSharesObjWrap.Type.
type V0040AssocSharesObjWrapType string

// V0040AssocShort defines model for v0.0.40_assoc_short.
type V0040AssocShort struct {
	// Account Account
	Account *string `json:"account,omitempty"`

	// Cluster Cluster
	Cluster *string `json:"cluster,omitempty"`

	// Id Numeric association ID
	Id *int32 `json:"id,omitempty"`

	// Partition Partition
	Partition *string `json:"partition,omitempty"`

	// User User name
	User string `json:"user"`
}

// V0040AssocShortList defines model for v0.0.40_assoc_short_list.
type V0040AssocShortList = []V0040AssocShort

// V0040BfExitFields defines model for v0.0.40_bf_exit_fields.
type V0040BfExitFields struct {
	// BfMaxJobStart Reached number of jobs allowed to start
	BfMaxJobStart *int32 `json:"bf_max_job_start,omitempty"`

	// BfMaxJobTest Reached number of jobs allowed to be tested
	BfMaxJobTest *int32 `json:"bf_max_job_test,omitempty"`

	// BfMaxTime Reached maximum allowed scheduler time
	BfMaxTime *int32 `json:"bf_max_time,omitempty"`

	// BfNodeSpaceSize Reached table size limit
	BfNodeSpaceSize *int32 `json:"bf_node_space_size,omitempty"`

	// EndJobQueue Reached end of queue
	EndJobQueue *int32 `json:"end_job_queue,omitempty"`

	// StateChanged System state changed
	StateChanged *int32 `json:"state_changed,omitempty"`
}

// V0040ClusterRec defines model for v0.0.40_cluster_rec.
type V0040ClusterRec struct {
	Associations *struct {
		Root *V0040AssocShort `json:"root,omitempty"`
	} `json:"associations,omitempty"`
	Controller *struct {
		// Host ControlHost
		Host *string `json:"host,omitempty"`

		// Port ControlPort
		Port *int32 `json:"port,omitempty"`
	} `json:"controller,omitempty"`

	// Flags Flags
	Flags *[]V0040ClusterRecFlags `json:"flags,omitempty"`

	// Name ClusterName
	Name *string `json:"name,omitempty"`

	// Nodes Node names
	Nodes *string `json:"nodes,omitempty"`

	// RpcVersion RPC version used in the cluster
	RpcVersion   *int32         `json:"rpc_version,omitempty"`
	SelectPlugin *string        `json:"select_plugin,omitempty"`
	Tres         *V0040TresList `json:"tres,omitempty"`
}

// V0040ClusterRecFlags defines model for V0040ClusterRec.Flags.
type V0040ClusterRecFlags string

// V0040ClusterRecList defines model for v0.0.40_cluster_rec_list.
type V0040ClusterRecList = []V0040ClusterRec

// V0040ControllerPing defines model for v0.0.40_controller_ping.
type V0040ControllerPing struct {
	// Hostname Target for ping
	Hostname *string `json:"hostname,omitempty"`

	// Latency Number of microseconds it took to successfully ping or timeout
	Latency *int64 `json:"latency,omitempty"`

	// Mode The operating mode of the responding slurmctld
	Mode *string `json:"mode,omitempty"`

	// Pinged Ping result
	Pinged *string `json:"pinged,omitempty"`
}

// V0040ControllerPingArray defines model for v0.0.40_controller_ping_array.
type V0040ControllerPingArray = []V0040ControllerPing

// V0040Coord defines model for v0.0.40_coord.
type V0040Coord struct {
	// Direct Indicates whether the coordinator was directly assigned to this account
	Direct *bool `json:"direct,omitempty"`

	// Name User name
	Name string `json:"name"`
}

// V0040CoordList defines model for v0.0.40_coord_list.
type V0040CoordList = []V0040Coord

// V0040CronEntry defines model for v0.0.40_cron_entry.
type V0040CronEntry struct {
	// Command Command to run
	Command *string `json:"command,omitempty"`

	// DayOfMonth Ranged string specifying eligible day of month values (e.g. 0-10,29)
	DayOfMonth *string `json:"day_of_month,omitempty"`

	// DayOfWeek Ranged string specifying eligible day of week values (e.g.0-3,7)
	DayOfWeek *string `json:"day_of_week,omitempty"`

	// Flags Flags
	Flags *[]V0040CronEntryFlags `json:"flags,omitempty"`

	// Hour Ranged string specifying eligible hour values (e.g. 0-5,23)
	Hour *string `json:"hour,omitempty"`
	Line *struct {
		// End End of this entry in file
		End *int32 `json:"end,omitempty"`

		// Start Start of this entry in file
		Start *int32 `json:"start,omitempty"`
	} `json:"line,omitempty"`

	// Minute Ranged string specifying eligible minute values (e.g. 0-10,50)
	Minute *string `json:"minute,omitempty"`

	// Month Ranged string specifying eligible month values (e.g. 0-5,12)
	Month *string `json:"month,omitempty"`

	// Specification Time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week
	Specification *string `json:"specification,omitempty"`
}

// V0040CronEntryFlags defines model for V0040CronEntry.Flags.
type V0040CronEntryFlags string

// V0040CsvString defines model for v0.0.40_csv_string.
type V0040CsvString = []string

// V0040ExtSensorsData removed field
type V0040ExtSensorsData = map[string]interface{}

// V0040Float64NoVal 64 bit floating point number with flags
type V0040Float64NoVal struct {
	// Infinite True if number has been set to infinite. "set" and "number" will be ignored.
	Infinite *bool `json:"infinite,omitempty"`

	// Number If set is True the number will be set with value. Otherwise ignore number contents.
	Number *float64 `json:"number,omitempty"`

	// Set True if number has been set. False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0040Hostlist defines model for v0.0.40_hostlist.
type V0040Hostlist = []string

// V0040HostlistString defines model for v0.0.40_hostlist_string.
type V0040HostlistString = []string

// V0040Instance defines model for v0.0.40_instance.
type V0040Instance struct {
	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// InstanceId Cloud instance ID
	InstanceId *string `json:"instance_id,omitempty"`

	// InstanceType Cloud instance type
	InstanceType *string `json:"instance_type,omitempty"`

	// NodeName NodeName
	NodeName *string `json:"node_name,omitempty"`
	Time     *struct {
		// TimeEnd When the instance will end (UNIX timestamp)
		TimeEnd *int64 `json:"time_end,omitempty"`

		// TimeStart When the instance will start (UNIX timestamp)
		TimeStart *int64 `json:"time_start,omitempty"`
	} `json:"time,omitempty"`
}

// V0040InstanceList defines model for v0.0.40_instance_list.
type V0040InstanceList = []V0040Instance

// V0040Job defines model for v0.0.40_job.
type V0040Job struct {
	// Account Account the job ran under
	Account *string `json:"account,omitempty"`

	// AllocationNodes List of nodes allocated to the job
	AllocationNodes *int32 `json:"allocation_nodes,omitempty"`
	Array           *struct {
		// JobId Job ID of job array, or 0 if N/A
		JobId  *int32 `json:"job_id,omitempty"`
		Limits *struct {
			Max *struct {
				Running *struct {
					// Tasks Maximum number of simultaneously running tasks, 0 if no limit
					Tasks *int32 `json:"tasks,omitempty"`
				} `json:"running,omitempty"`
			} `json:"max,omitempty"`
		} `json:"limits,omitempty"`

		// Task String expression of task IDs in this record
		Task *string `json:"task,omitempty"`

		// TaskId Integer number with flags
		TaskId *V0040Uint32NoVal `json:"task_id,omitempty"`
	} `json:"array,omitempty"`
	Association *V0040AssocShort `json:"association,omitempty"`

	// Block The name of the block to be used (used with Blue Gene systems)
	Block *string `json:"block,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`
	Comment *struct {
		// Administrator Arbitrary comment made by administrator
		Administrator *string `json:"administrator,omitempty"`

		// Job Arbitrary comment made by user
		Job *string `json:"job,omitempty"`

		// System Arbitrary comment from slurmctld
		System *string `json:"system,omitempty"`
	} `json:"comment,omitempty"`

	// Constraints Feature(s) the job requested as a constraint
	Constraints *string `json:"constraints,omitempty"`

	// Container Absolute path to OCI container bundle
	Container       *string                      `json:"container,omitempty"`
	DerivedExitCode *V0040ProcessExitCodeVerbose `json:"derived_exit_code,omitempty"`
	ExitCode        *V0040ProcessExitCodeVerbose `json:"exit_code,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// FailedNode Name of node that caused job failure
	FailedNode *string `json:"failed_node,omitempty"`

	// Flags Flags associated with the job
	Flags *[]V0040JobFlags `json:"flags,omitempty"`

	// Group Group ID of the user that owns the job
	Group *string `json:"group,omitempty"`
	Het   *struct {
		// JobId Heterogeneous job ID, if applicable
		JobId *int32 `json:"job_id,omitempty"`

		// JobOffset Integer number with flags
		JobOffset *V0040Uint32NoVal `json:"job_offset,omitempty"`
	} `json:"het,omitempty"`

	// Hold Job held
	Hold *bool `json:"hold,omitempty"`

	// JobId Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// KillRequestUser User ID that requested termination of the job
	KillRequestUser *string `json:"kill_request_user,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`
	Mcs      *struct {
		// Label Multi-Category Security label on the job
		Label *string `json:"label,omitempty"`
	} `json:"mcs,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Nodes Node(s) allocated to the job
	Nodes *string `json:"nodes,omitempty"`

	// Partition Partition assigned to the job
	Partition *string `json:"partition,omitempty"`

	// Priority Integer number with flags
	Priority *V0040Uint32NoVal `json:"priority,omitempty"`

	// Qos Quality of Service assigned to the job
	Qos      *string `json:"qos,omitempty"`
	Required *struct {
		// CPUs Minimum number of CPUs required
		CPUs *int32 `json:"CPUs,omitempty"`

		// MemoryPerCpu Integer number with flags
		MemoryPerCpu *V0040Uint64NoVal `json:"memory_per_cpu,omitempty"`

		// MemoryPerNode Integer number with flags
		MemoryPerNode *V0040Uint64NoVal `json:"memory_per_node,omitempty"`
	} `json:"required,omitempty"`
	Reservation *struct {
		// Id Unique identifier of requested reservation
		Id *int32 `json:"id,omitempty"`

		// Name Name of reservation to use
		Name *string `json:"name,omitempty"`
	} `json:"reservation,omitempty"`

	// Script Job batch script; only the first component in a HetJob is populated or honored
	Script *string `json:"script,omitempty"`
	State  *struct {
		// Current Current state
		Current *[]V0040JobStateCurrent `json:"current,omitempty"`

		// Reason Reason for previous Pending or Failed state
		Reason *string `json:"reason,omitempty"`
	} `json:"state,omitempty"`
	Steps *V0040StepList `json:"steps,omitempty"`

	// SubmitLine Command used to submit the job
	SubmitLine *string `json:"submit_line,omitempty"`
	Time       *struct {
		// Elapsed Elapsed time in seconds
		Elapsed *int32 `json:"elapsed,omitempty"`

		// Eligible Time when the job became eligible to run (UNIX timestamp)
		Eligible *int64 `json:"eligible,omitempty"`

		// End End time (UNIX timestamp)
		End *int64 `json:"end,omitempty"`

		// Limit Integer number with flags
		Limit *V0040Uint32NoVal `json:"limit,omitempty"`

		// Start Time execution began (UNIX timestamp)
		Start *int64 `json:"start,omitempty"`

		// Submission Time when the job was submitted (UNIX timestamp)
		Submission *int64 `json:"submission,omitempty"`

		// Suspended Total time in suspended state in seconds
		Suspended *int32 `json:"suspended,omitempty"`
		System    *struct {
			// Microseconds System CPU time used by the job in microseconds
			Microseconds *int64 `json:"microseconds,omitempty"`

			// Seconds System CPU time used by the job in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"system,omitempty"`
		Total *struct {
			// Microseconds Sum of System and User CPU time used by the job in microseconds
			Microseconds *int64 `json:"microseconds,omitempty"`

			// Seconds Sum of System and User CPU time used by the job in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"total,omitempty"`
		User *struct {
			// Microseconds User CPU time used by the job in microseconds
			Microseconds *int64 `json:"microseconds,omitempty"`

			// Seconds User CPU time used by the job in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"user,omitempty"`
	} `json:"time,omitempty"`
	Tres *struct {
		Allocated *V0040TresList `json:"allocated,omitempty"`
		Requested *V0040TresList `json:"requested,omitempty"`
	} `json:"tres,omitempty"`

	// UsedGres Generic resources used by job
	UsedGres *string `json:"used_gres,omitempty"`

	// User User that owns the job
	User  *string              `json:"user,omitempty"`
	Wckey *V0040WckeyTagStruct `json:"wckey,omitempty"`

	// WorkingDirectory Path to current working directory
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

// V0040JobFlags defines model for V0040Job.Flags.
type V0040JobFlags string

// V0040JobStateCurrent defines model for V0040Job.State.Current.
type V0040JobStateCurrent string

// V0040JobArrayResponseArray defines model for v0.0.40_job_array_response_array.
type V0040JobArrayResponseArray = []V0040JobArrayResponseMsgEntry

// V0040JobArrayResponseMsgEntry defines model for v0.0.40_job_array_response_msg_entry.
type V0040JobArrayResponseMsgEntry struct {
	// Error Verbose update status or error
	Error *string `json:"error,omitempty"`

	// ErrorCode Verbose update status or error
	ErrorCode *int32 `json:"error_code,omitempty"`

	// JobId Job ID for updated Job
	JobId *int32 `json:"job_id,omitempty"`

	// StepId Step ID for updated Job
	StepId *string `json:"step_id,omitempty"`

	// Why Update response message
	Why *string `json:"why,omitempty"`
}

// V0040JobDescMsg defines model for v0.0.40_job_desc_msg.
type V0040JobDescMsg struct {
	// Account Account associated with the job
	Account *string `json:"account,omitempty"`

	// AccountGatherFrequency Job accounting and profiling sampling intervals in seconds
	AccountGatherFrequency *string `json:"account_gather_frequency,omitempty"`

	// AdminComment Arbitrary comment made by administrator
	AdminComment *string `json:"admin_comment,omitempty"`

	// AllocationNodeList Local node making the resource allocation
	AllocationNodeList *string `json:"allocation_node_list,omitempty"`

	// AllocationNodePort Port to send allocation confirmation to
	AllocationNodePort *int32            `json:"allocation_node_port,omitempty"`
	Argv               *V0040StringArray `json:"argv,omitempty"`

	// Array Job array index value specification
	Array *string `json:"array,omitempty"`

	// BatchFeatures Features required for batch script's node
	BatchFeatures *string `json:"batch_features,omitempty"`

	// BeginTime Integer number with flags
	BeginTime *V0040Uint64NoVal `json:"begin_time,omitempty"`

	// BurstBuffer Burst buffer specifications
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// ClusterConstraint Required features that a federated cluster must have to have a sibling job submitted to it
	ClusterConstraint *string `json:"cluster_constraint,omitempty"`

	// Clusters Clusters that a federated job can run on
	Clusters *string `json:"clusters,omitempty"`

	// Comment Arbitrary comment made by user
	Comment *string `json:"comment,omitempty"`

	// Constraints Comma separated list of features that are required
	Constraints *string `json:"constraints,omitempty"`

	// Container Absolute path to OCI container bundle
	Container *string `json:"container,omitempty"`

	// ContainerId OCI container ID
	ContainerId *string `json:"container_id,omitempty"`

	// Contiguous True if job requires contiguous nodes
	Contiguous *bool `json:"contiguous,omitempty"`

	// CoreSpecification Specialized core count
	CoreSpecification *int32 `json:"core_specification,omitempty"`

	// CoresPerSocket Cores per socket required
	CoresPerSocket *int32 `json:"cores_per_socket,omitempty"`

	// CpuBinding Method for binding tasks to allocated CPUs
	CpuBinding *string `json:"cpu_binding,omitempty"`

	// CpuBindingFlags Flags for CPU binding
	CpuBindingFlags *[]V0040JobDescMsgCpuBindingFlags `json:"cpu_binding_flags,omitempty"`

	// CpuFrequency Requested CPU frequency range <p1>[-p2][:p3]
	CpuFrequency *string `json:"cpu_frequency,omitempty"`

	// CpusPerTask Number of CPUs required by each task
	CpusPerTask *int32 `json:"cpus_per_task,omitempty"`

	// CpusPerTres Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
	CpusPerTres *string         `json:"cpus_per_tres,omitempty"`
	Crontab     *V0040CronEntry `json:"crontab,omitempty"`

	// CurrentWorkingDirectory Working directory to use for the job
	CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

	// Deadline Latest time that the job may start (UNIX timestamp)
	Deadline *int64 `json:"deadline,omitempty"`

	// DelayBoot Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
	DelayBoot *int32 `json:"delay_boot,omitempty"`

	// Dependency Other jobs that must meet certain criteria before this job can start
	Dependency *string `json:"dependency,omitempty"`

	// Distribution Layout
	Distribution *string `json:"distribution,omitempty"`

	// DistributionPlaneSize Plane size specification when distribution specifies plane
	DistributionPlaneSize *int32 `json:"distribution_plane_size,omitempty"`

	// EndTime Expected end time (UNIX timestamp)
	EndTime       *int64                      `json:"end_time,omitempty"`
	Environment   *V0040StringArray           `json:"environment,omitempty"`
	ExcludedNodes *V0040CsvString             `json:"excluded_nodes,omitempty"`
	Exclusive     *[]V0040JobDescMsgExclusive `json:"exclusive,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// Flags Job flags
	Flags *[]V0040JobDescMsgFlags `json:"flags,omitempty"`

	// GroupId Group ID of the user that owns the job
	GroupId *string `json:"group_id,omitempty"`

	// HetjobGroup Unique sequence number applied to this component of the heterogeneous job
	HetjobGroup *int32 `json:"hetjob_group,omitempty"`

	// Hold Job held
	Hold *bool `json:"hold,omitempty"`

	// Immediate If true, exit if resources are not available within the time period specified
	Immediate *bool `json:"immediate,omitempty"`

	// JobId Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// KillOnNodeFail If true, kill job on node failure
	KillOnNodeFail *bool `json:"kill_on_node_fail,omitempty"`

	// KillWarningDelay Integer number with flags
	KillWarningDelay *V0040Uint16NoVal `json:"kill_warning_delay,omitempty"`

	// KillWarningFlags Flags related to job signals
	KillWarningFlags *[]V0040JobDescMsgKillWarningFlags `json:"kill_warning_flags,omitempty"`

	// KillWarningSignal Signal to send when approaching end time (e.g. "10" or "USR1")
	KillWarningSignal *string `json:"kill_warning_signal,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`

	// MailType Mail event type(s)
	MailType *[]V0040JobDescMsgMailType `json:"mail_type,omitempty"`

	// MailUser User to receive email notifications
	MailUser *string `json:"mail_user,omitempty"`

	// MaximumCpus Maximum number of CPUs required
	MaximumCpus *int32 `json:"maximum_cpus,omitempty"`

	// MaximumNodes Maximum node count
	MaximumNodes *int32 `json:"maximum_nodes,omitempty"`

	// McsLabel Multi-Category Security label on the job
	McsLabel *string `json:"mcs_label,omitempty"`

	// MemoryBinding Binding map for map/mask_cpu
	MemoryBinding *string `json:"memory_binding,omitempty"`

	// MemoryBindingType Method for binding tasks to memory
	MemoryBindingType *[]V0040JobDescMsgMemoryBindingType `json:"memory_binding_type,omitempty"`

	// MemoryPerCpu Integer number with flags
	MemoryPerCpu *V0040Uint64NoVal `json:"memory_per_cpu,omitempty"`

	// MemoryPerNode Integer number with flags
	MemoryPerNode *V0040Uint64NoVal `json:"memory_per_node,omitempty"`

	// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
	MemoryPerTres *string `json:"memory_per_tres,omitempty"`

	// MinimumBoardsPerNode Boards per node required
	MinimumBoardsPerNode *int32 `json:"minimum_boards_per_node,omitempty"`

	// MinimumCpus Minimum number of CPUs required
	MinimumCpus *int32 `json:"minimum_cpus,omitempty"`

	// MinimumCpusPerNode Minimum number of CPUs per node
	MinimumCpusPerNode *int32 `json:"minimum_cpus_per_node,omitempty"`

	// MinimumNodes Minimum node count
	MinimumNodes *int32 `json:"minimum_nodes,omitempty"`

	// MinimumSocketsPerBoard Sockets per board required
	MinimumSocketsPerBoard *int32 `json:"minimum_sockets_per_board,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Network Network specs for job step
	Network *string `json:"network,omitempty"`

	// Nice Requested job priority change
	Nice *int32 `json:"nice,omitempty"`

	// Nodes Node count range specification (e.g. 1-15:4)
	Nodes *string `json:"nodes,omitempty"`

	// NtasksPerTres Number of tasks that can access each GPU
	NtasksPerTres *int32 `json:"ntasks_per_tres,omitempty"`

	// OpenMode Open mode used for stdout and stderr files
	OpenMode *[]V0040JobDescMsgOpenMode `json:"open_mode,omitempty"`

	// Overcommit Overcommit resources
	Overcommit    *bool `json:"overcommit,omitempty"`
	Oversubscribe *bool `json:"oversubscribe,omitempty"`

	// Partition Partition assigned to the job
	Partition *string `json:"partition,omitempty"`

	// PowerFlags removed field
	// Deprecated:
	PowerFlags *V0040PowerFlags `json:"power_flags,omitempty"`

	// Prefer Comma separated list of features that are preferred but not required
	Prefer *string `json:"prefer,omitempty"`

	// Priority Integer number with flags
	Priority *V0040Uint32NoVal `json:"priority,omitempty"`

	// Profile Profile used by the acct_gather_profile plugin
	Profile *[]V0040JobDescMsgProfile `json:"profile,omitempty"`

	// Qos Quality of Service assigned to the job
	Qos *string `json:"qos,omitempty"`

	// Reboot Node reboot requested before start
	Reboot *bool `json:"reboot,omitempty"`

	// Requeue Determines whether the job may be requeued
	Requeue       *bool           `json:"requeue,omitempty"`
	RequiredNodes *V0040CsvString `json:"required_nodes,omitempty"`

	// RequiredSwitches Integer number with flags
	RequiredSwitches *V0040Uint32NoVal `json:"required_switches,omitempty"`

	// Reservation Name of reservation to use
	Reservation *string `json:"reservation,omitempty"`

	// ReservePorts Port to send various notification msg to
	ReservePorts *int32 `json:"reserve_ports,omitempty"`
	Rlimits      *struct {
		// As Integer number with flags
		As *V0040Uint64NoVal `json:"as,omitempty"`

		// Core Integer number with flags
		Core *V0040Uint64NoVal `json:"core,omitempty"`

		// Cpu Integer number with flags
		Cpu *V0040Uint64NoVal `json:"cpu,omitempty"`

		// Data Integer number with flags
		Data *V0040Uint64NoVal `json:"data,omitempty"`

		// Fsize Integer number with flags
		Fsize *V0040Uint64NoVal `json:"fsize,omitempty"`

		// Memlock Integer number with flags
		Memlock *V0040Uint64NoVal `json:"memlock,omitempty"`

		// Nofile Integer number with flags
		Nofile *V0040Uint64NoVal `json:"nofile,omitempty"`

		// Nproc Integer number with flags
		Nproc *V0040Uint64NoVal `json:"nproc,omitempty"`

		// Rss Integer number with flags
		Rss *V0040Uint64NoVal `json:"rss,omitempty"`

		// Stack Integer number with flags
		Stack *V0040Uint64NoVal `json:"stack,omitempty"`
	} `json:"rlimits,omitempty"`

	// Script Job batch script; only the first component in a HetJob is populated or honored
	Script *string `json:"script,omitempty"`

	// SelinuxContext SELinux context
	SelinuxContext *string `json:"selinux_context,omitempty"`

	// Shared How the job can share resources with other jobs, if at all
	Shared *[]V0040JobDescMsgShared `json:"shared,omitempty"`

	// SiteFactor Site-specific priority factor
	SiteFactor *int32 `json:"site_factor,omitempty"`

	// SocketsPerNode Sockets per node required
	SocketsPerNode   *int32            `json:"sockets_per_node,omitempty"`
	SpankEnvironment *V0040StringArray `json:"spank_environment,omitempty"`

	// StandardError Path to stderr file
	StandardError *string `json:"standard_error,omitempty"`

	// StandardInput Path to stdin file
	StandardInput *string `json:"standard_input,omitempty"`

	// StandardOutput Path to stdout file
	StandardOutput *string `json:"standard_output,omitempty"`

	// Tasks Number of tasks
	Tasks *int32 `json:"tasks,omitempty"`

	// TasksPerBoard Number of tasks to invoke on each board
	TasksPerBoard *int32 `json:"tasks_per_board,omitempty"`

	// TasksPerCore Number of tasks to invoke on each core
	TasksPerCore *int32 `json:"tasks_per_core,omitempty"`

	// TasksPerNode Number of tasks to invoke on each node
	TasksPerNode *int32 `json:"tasks_per_node,omitempty"`

	// TasksPerSocket Number of tasks to invoke on each socket
	TasksPerSocket *int32 `json:"tasks_per_socket,omitempty"`

	// TemporaryDiskPerNode Minimum tmp disk space required per node
	TemporaryDiskPerNode *int32 `json:"temporary_disk_per_node,omitempty"`

	// ThreadSpecification Specialized thread count
	ThreadSpecification *int32 `json:"thread_specification,omitempty"`

	// ThreadsPerCore Threads per core required
	ThreadsPerCore *int32 `json:"threads_per_core,omitempty"`

	// TimeLimit Integer number with flags
	TimeLimit *V0040Uint32NoVal `json:"time_limit,omitempty"`

	// TimeMinimum Integer number with flags
	TimeMinimum *V0040Uint32NoVal `json:"time_minimum,omitempty"`

	// TresBind Task to TRES binding directives
	TresBind *string `json:"tres_bind,omitempty"`

	// TresFreq TRES frequency directives
	TresFreq *string `json:"tres_freq,omitempty"`

	// TresPerJob Comma separated list of TRES=# values to be allocated for every job
	TresPerJob *string `json:"tres_per_job,omitempty"`

	// TresPerNode Comma separated list of TRES=# values to be allocated for every node
	TresPerNode *string `json:"tres_per_node,omitempty"`

	// TresPerSocket Comma separated list of TRES=# values to be allocated for every socket
	TresPerSocket *string `json:"tres_per_socket,omitempty"`

	// TresPerTask Comma separated list of TRES=# values to be allocated for every task
	TresPerTask *string `json:"tres_per_task,omitempty"`

	// UserId User ID that owns the job
	UserId *string `json:"user_id,omitempty"`

	// WaitAllNodes If true, wait to start until after all nodes have booted
	WaitAllNodes *bool `json:"wait_all_nodes,omitempty"`

	// WaitForSwitch Maximum time to wait for switches in seconds
	WaitForSwitch *int32 `json:"wait_for_switch,omitempty"`

	// Wckey Workload characterization key
	Wckey *string `json:"wckey,omitempty"`

	// X11 X11 forwarding options
	X11 *[]V0040JobDescMsgX11 `json:"x11,omitempty"`

	// X11MagicCookie Magic cookie for X11 forwarding
	X11MagicCookie *string `json:"x11_magic_cookie,omitempty"`

	// X11TargetHost Hostname or UNIX socket if x11_target_port=0
	X11TargetHost *string `json:"x11_target_host,omitempty"`

	// X11TargetPort TCP port
	X11TargetPort *int32 `json:"x11_target_port,omitempty"`
}

// V0040JobDescMsgCpuBindingFlags defines model for V0040JobDescMsg.CpuBindingFlags.
type V0040JobDescMsgCpuBindingFlags string

// V0040JobDescMsgExclusive defines model for V0040JobDescMsg.Exclusive.
type V0040JobDescMsgExclusive string

// V0040JobDescMsgFlags defines model for V0040JobDescMsg.Flags.
type V0040JobDescMsgFlags string

// V0040JobDescMsgKillWarningFlags defines model for V0040JobDescMsg.KillWarningFlags.
type V0040JobDescMsgKillWarningFlags string

// V0040JobDescMsgMailType defines model for V0040JobDescMsg.MailType.
type V0040JobDescMsgMailType string

// V0040JobDescMsgMemoryBindingType defines model for V0040JobDescMsg.MemoryBindingType.
type V0040JobDescMsgMemoryBindingType string

// V0040JobDescMsgOpenMode defines model for V0040JobDescMsg.OpenMode.
type V0040JobDescMsgOpenMode string

// V0040JobDescMsgProfile defines model for V0040JobDescMsg.Profile.
type V0040JobDescMsgProfile string

// V0040JobDescMsgShared defines model for V0040JobDescMsg.Shared.
type V0040JobDescMsgShared string

// V0040JobDescMsgX11 defines model for V0040JobDescMsg.X11.
type V0040JobDescMsgX11 string

// V0040JobDescMsgList defines model for v0.0.40_job_desc_msg_list.
type V0040JobDescMsgList = []V0040JobDescMsg

// V0040JobInfo defines model for v0.0.40_job_info.
type V0040JobInfo struct {
	// Account Account associated with the job
	Account *string `json:"account,omitempty"`

	// AccrueTime Integer number with flags
	AccrueTime *V0040Uint64NoVal `json:"accrue_time,omitempty"`

	// AdminComment Arbitrary comment made by administrator
	AdminComment *string `json:"admin_comment,omitempty"`

	// AllocatingNode Local node making the resource allocation
	AllocatingNode *string `json:"allocating_node,omitempty"`

	// ArrayJobId Integer number with flags
	ArrayJobId *V0040Uint32NoVal `json:"array_job_id,omitempty"`

	// ArrayMaxTasks Integer number with flags
	ArrayMaxTasks *V0040Uint32NoVal `json:"array_max_tasks,omitempty"`

	// ArrayTaskId Integer number with flags
	ArrayTaskId *V0040Uint32NoVal `json:"array_task_id,omitempty"`

	// ArrayTaskString String expression of task IDs in this record
	ArrayTaskString *string `json:"array_task_string,omitempty"`

	// AssociationId Unique identifier for the association
	AssociationId *int32 `json:"association_id,omitempty"`

	// BatchFeatures Features required for batch script's node
	BatchFeatures *string `json:"batch_features,omitempty"`

	// BatchFlag True if batch job
	BatchFlag *bool `json:"batch_flag,omitempty"`

	// BatchHost Name of host running batch script
	BatchHost *string `json:"batch_host,omitempty"`

	// BillableTres 64 bit floating point number with flags
	BillableTres *V0040Float64NoVal `json:"billable_tres,omitempty"`

	// BurstBuffer Burst buffer specifications
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// BurstBufferState Burst buffer state details
	BurstBufferState *string `json:"burst_buffer_state,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// ClusterFeatures List of required cluster features
	ClusterFeatures *string `json:"cluster_features,omitempty"`

	// Command Executed command
	Command *string `json:"command,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// Container Absolute path to OCI container bundle
	Container *string `json:"container,omitempty"`

	// ContainerId OCI container ID
	ContainerId *string `json:"container_id,omitempty"`

	// Contiguous True if job requires contiguous nodes
	Contiguous *bool `json:"contiguous,omitempty"`

	// CoreSpec Specialized core count
	CoreSpec *int32 `json:"core_spec,omitempty"`

	// CoresPerSocket Integer number with flags
	CoresPerSocket *V0040Uint16NoVal `json:"cores_per_socket,omitempty"`

	// CpuFrequencyGovernor Integer number with flags
	CpuFrequencyGovernor *V0040Uint32NoVal `json:"cpu_frequency_governor,omitempty"`

	// CpuFrequencyMaximum Integer number with flags
	CpuFrequencyMaximum *V0040Uint32NoVal `json:"cpu_frequency_maximum,omitempty"`

	// CpuFrequencyMinimum Integer number with flags
	CpuFrequencyMinimum *V0040Uint32NoVal `json:"cpu_frequency_minimum,omitempty"`

	// Cpus Integer number with flags
	Cpus *V0040Uint32NoVal `json:"cpus,omitempty"`

	// CpusPerTask Integer number with flags
	CpusPerTask *V0040Uint16NoVal `json:"cpus_per_task,omitempty"`

	// CpusPerTres Semicolon delimited list of TRES=# values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
	CpusPerTres *string `json:"cpus_per_tres,omitempty"`

	// Cron Time specification for scrontab job
	Cron *string `json:"cron,omitempty"`

	// CurrentWorkingDirectory Working directory to use for the job
	CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

	// Deadline Integer number with flags
	Deadline *V0040Uint64NoVal `json:"deadline,omitempty"`

	// DelayBoot Integer number with flags
	DelayBoot *V0040Uint32NoVal `json:"delay_boot,omitempty"`

	// Dependency Other jobs that must meet certain criteria before this job can start
	Dependency      *string                      `json:"dependency,omitempty"`
	DerivedExitCode *V0040ProcessExitCodeVerbose `json:"derived_exit_code,omitempty"`

	// EligibleTime Integer number with flags
	EligibleTime *V0040Uint64NoVal `json:"eligible_time,omitempty"`

	// EndTime Integer number with flags
	EndTime *V0040Uint64NoVal `json:"end_time,omitempty"`

	// ExcludedNodes Comma separated list of nodes that may not be used
	ExcludedNodes *string                      `json:"excluded_nodes,omitempty"`
	Exclusive     *[]V0040JobInfoExclusive     `json:"exclusive,omitempty"`
	ExitCode      *V0040ProcessExitCodeVerbose `json:"exit_code,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// FailedNode Name of node that caused job failure
	FailedNode *string `json:"failed_node,omitempty"`

	// Features Comma separated list of features that are required
	Features *string `json:"features,omitempty"`

	// FederationOrigin Origin cluster's name (when using federation)
	FederationOrigin *string `json:"federation_origin,omitempty"`

	// FederationSiblingsActive Active sibling job names
	FederationSiblingsActive *string `json:"federation_siblings_active,omitempty"`

	// FederationSiblingsViable Viable sibling job names
	FederationSiblingsViable *string `json:"federation_siblings_viable,omitempty"`

	// Flags Job flags
	Flags      *[]V0040JobInfoFlags    `json:"flags,omitempty"`
	GresDetail *V0040JobInfoGresDetail `json:"gres_detail,omitempty"`

	// GroupId Group ID of the user that owns the job
	GroupId *int32 `json:"group_id,omitempty"`

	// GroupName Group name of the user that owns the job
	GroupName *string `json:"group_name,omitempty"`

	// HetJobId Integer number with flags
	HetJobId *V0040Uint32NoVal `json:"het_job_id,omitempty"`

	// HetJobIdSet Job ID range for all heterogeneous job components
	HetJobIdSet *string `json:"het_job_id_set,omitempty"`

	// HetJobOffset Integer number with flags
	HetJobOffset *V0040Uint32NoVal `json:"het_job_offset,omitempty"`

	// Hold Job held
	Hold *bool `json:"hold,omitempty"`

	// JobId Job ID
	JobId        *int32          `json:"job_id,omitempty"`
	JobResources *V0040JobRes    `json:"job_resources,omitempty"`
	JobSizeStr   *V0040CsvString `json:"job_size_str,omitempty"`

	// JobState Current state
	JobState *[]V0040JobInfoJobState `json:"job_state,omitempty"`

	// LastSchedEvaluation Integer number with flags
	LastSchedEvaluation *V0040Uint64NoVal `json:"last_sched_evaluation,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`

	// MailType Mail event type(s)
	MailType *[]V0040JobInfoMailType `json:"mail_type,omitempty"`

	// MailUser User to receive email notifications
	MailUser *string `json:"mail_user,omitempty"`

	// MaxCpus Integer number with flags
	MaxCpus *V0040Uint32NoVal `json:"max_cpus,omitempty"`

	// MaxNodes Integer number with flags
	MaxNodes *V0040Uint32NoVal `json:"max_nodes,omitempty"`

	// MaximumSwitchWaitTime Maximum time to wait for switches in seconds
	MaximumSwitchWaitTime *int32 `json:"maximum_switch_wait_time,omitempty"`

	// McsLabel Multi-Category Security label on the job
	McsLabel *string `json:"mcs_label,omitempty"`

	// MemoryPerCpu Integer number with flags
	MemoryPerCpu *V0040Uint64NoVal `json:"memory_per_cpu,omitempty"`

	// MemoryPerNode Integer number with flags
	MemoryPerNode *V0040Uint64NoVal `json:"memory_per_node,omitempty"`

	// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
	MemoryPerTres *string `json:"memory_per_tres,omitempty"`

	// MinimumCpusPerNode Integer number with flags
	MinimumCpusPerNode *V0040Uint16NoVal `json:"minimum_cpus_per_node,omitempty"`

	// MinimumSwitches Maximum number of switches (the 'minimum' in the key is incorrect)
	MinimumSwitches *int32 `json:"minimum_switches,omitempty"`

	// MinimumTmpDiskPerNode Integer number with flags
	MinimumTmpDiskPerNode *V0040Uint32NoVal `json:"minimum_tmp_disk_per_node,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Network Network specs for the job
	Network *string `json:"network,omitempty"`

	// Nice Requested job priority change
	Nice *int32 `json:"nice,omitempty"`

	// NodeCount Integer number with flags
	NodeCount *V0040Uint32NoVal `json:"node_count,omitempty"`

	// Nodes Node(s) allocated to the job
	Nodes         *string `json:"nodes,omitempty"`
	Oversubscribe *bool   `json:"oversubscribe,omitempty"`

	// Partition Partition assigned to the job
	Partition *string `json:"partition,omitempty"`
	Power     *struct {
		// Flags removed field
		// Deprecated:
		Flags *V0040PowerFlags `json:"flags,omitempty"`
	} `json:"power,omitempty"`

	// PreSusTime Integer number with flags
	PreSusTime *V0040Uint64NoVal `json:"pre_sus_time,omitempty"`

	// PreemptTime Integer number with flags
	PreemptTime *V0040Uint64NoVal `json:"preempt_time,omitempty"`

	// PreemptableTime Integer number with flags
	PreemptableTime *V0040Uint64NoVal `json:"preemptable_time,omitempty"`

	// Prefer Feature(s) the job requested but that are not required
	Prefer *string `json:"prefer,omitempty"`

	// Priority Integer number with flags
	Priority *V0040Uint32NoVal `json:"priority,omitempty"`

	// Profile Profile used by the acct_gather_profile plugin
	Profile *[]V0040JobInfoProfile `json:"profile,omitempty"`

	// Qos Quality of Service assigned to the job
	Qos *string `json:"qos,omitempty"`

	// Reboot Node reboot requested before start
	Reboot *bool `json:"reboot,omitempty"`

	// Requeue Determines whether the job may be requeued
	Requeue *bool `json:"requeue,omitempty"`

	// RequiredNodes Comma separated list of required nodes
	RequiredNodes *string `json:"required_nodes,omitempty"`

	// ResizeTime Integer number with flags
	ResizeTime *V0040Uint64NoVal `json:"resize_time,omitempty"`

	// RestartCnt Number of job restarts
	RestartCnt *int32 `json:"restart_cnt,omitempty"`

	// ResvName Name of reservation to use
	ResvName *string `json:"resv_name,omitempty"`

	// ScheduledNodes List of nodes scheduled to be used for the job
	ScheduledNodes *string `json:"scheduled_nodes,omitempty"`

	// SelinuxContext SELinux context
	SelinuxContext *string `json:"selinux_context,omitempty"`

	// Shared How the job can share resources with other jobs, if at all
	Shared *[]V0040JobInfoShared `json:"shared,omitempty"`

	// ShowFlags Job details shown in this response
	ShowFlags *[]V0040JobInfoShowFlags `json:"show_flags,omitempty"`

	// SocketsPerBoard Number of sockets per board required
	SocketsPerBoard *int32 `json:"sockets_per_board,omitempty"`

	// SocketsPerNode Integer number with flags
	SocketsPerNode *V0040Uint16NoVal `json:"sockets_per_node,omitempty"`

	// StandardError Path to stderr file
	StandardError *string `json:"standard_error,omitempty"`

	// StandardInput Path to stdin file
	StandardInput *string `json:"standard_input,omitempty"`

	// StandardOutput Path to stdout file
	StandardOutput *string `json:"standard_output,omitempty"`

	// StartTime Integer number with flags
	StartTime *V0040Uint64NoVal `json:"start_time,omitempty"`

	// StateDescription Optional details for state_reason
	StateDescription *string `json:"state_description,omitempty"`

	// StateReason Reason for current Pending or Failed state
	StateReason *string `json:"state_reason,omitempty"`

	// SubmitTime Integer number with flags
	SubmitTime *V0040Uint64NoVal `json:"submit_time,omitempty"`

	// SuspendTime Integer number with flags
	SuspendTime *V0040Uint64NoVal `json:"suspend_time,omitempty"`

	// SystemComment Arbitrary comment from slurmctld
	SystemComment *string `json:"system_comment,omitempty"`

	// Tasks Integer number with flags
	Tasks *V0040Uint32NoVal `json:"tasks,omitempty"`

	// TasksPerBoard Integer number with flags
	TasksPerBoard *V0040Uint16NoVal `json:"tasks_per_board,omitempty"`

	// TasksPerCore Integer number with flags
	TasksPerCore *V0040Uint16NoVal `json:"tasks_per_core,omitempty"`

	// TasksPerNode Integer number with flags
	TasksPerNode *V0040Uint16NoVal `json:"tasks_per_node,omitempty"`

	// TasksPerSocket Integer number with flags
	TasksPerSocket *V0040Uint16NoVal `json:"tasks_per_socket,omitempty"`

	// TasksPerTres Integer number with flags
	TasksPerTres *V0040Uint16NoVal `json:"tasks_per_tres,omitempty"`

	// ThreadSpec Specialized thread count
	ThreadSpec *int32 `json:"thread_spec,omitempty"`

	// ThreadsPerCore Integer number with flags
	ThreadsPerCore *V0040Uint16NoVal `json:"threads_per_core,omitempty"`

	// TimeLimit Integer number with flags
	TimeLimit *V0040Uint32NoVal `json:"time_limit,omitempty"`

	// TimeMinimum Integer number with flags
	TimeMinimum *V0040Uint32NoVal `json:"time_minimum,omitempty"`

	// TresAllocStr TRES used by the job
	TresAllocStr *string `json:"tres_alloc_str,omitempty"`

	// TresBind Task to TRES binding directives
	TresBind *string `json:"tres_bind,omitempty"`

	// TresFreq TRES frequency directives
	TresFreq *string `json:"tres_freq,omitempty"`

	// TresPerJob Comma separated list of TRES=# values to be allocated per job
	TresPerJob *string `json:"tres_per_job,omitempty"`

	// TresPerNode Comma separated list of TRES=# values to be allocated per node
	TresPerNode *string `json:"tres_per_node,omitempty"`

	// TresPerSocket Comma separated list of TRES=# values to be allocated per socket
	TresPerSocket *string `json:"tres_per_socket,omitempty"`

	// TresPerTask Comma separated list of TRES=# values to be allocated per task
	TresPerTask *string `json:"tres_per_task,omitempty"`

	// TresReqStr TRES requested by the job
	TresReqStr *string `json:"tres_req_str,omitempty"`

	// UserId User ID that owns the job
	UserId *int32 `json:"user_id,omitempty"`

	// UserName User name that owns the job
	UserName *string `json:"user_name,omitempty"`

	// Wckey Workload characterization key
	Wckey *string `json:"wckey,omitempty"`
}

// V0040JobInfoExclusive defines model for V0040JobInfo.Exclusive.
type V0040JobInfoExclusive string

// V0040JobInfoFlags defines model for V0040JobInfo.Flags.
type V0040JobInfoFlags string

// V0040JobInfoJobState defines model for V0040JobInfo.JobState.
type V0040JobInfoJobState string

// V0040JobInfoMailType defines model for V0040JobInfo.MailType.
type V0040JobInfoMailType string

// V0040JobInfoProfile defines model for V0040JobInfo.Profile.
type V0040JobInfoProfile string

// V0040JobInfoShared defines model for V0040JobInfo.Shared.
type V0040JobInfoShared string

// V0040JobInfoShowFlags defines model for V0040JobInfo.ShowFlags.
type V0040JobInfoShowFlags string

// V0040JobInfoGresDetail defines model for v0.0.40_job_info_gres_detail.
type V0040JobInfoGresDetail = []string

// V0040JobInfoMsg defines model for v0.0.40_job_info_msg.
type V0040JobInfoMsg = []V0040JobInfo

// V0040JobList defines model for v0.0.40_job_list.
type V0040JobList = []V0040Job

// V0040JobRes defines model for v0.0.40_job_res.
type V0040JobRes struct {
	// AllocatedCores Number of allocated cores
	AllocatedCores *int32 `json:"allocated_cores,omitempty"`

	// AllocatedCpus Number of allocated CPUs
	AllocatedCpus *int32 `json:"allocated_cpus,omitempty"`

	// AllocatedHosts Number of allocated hosts
	AllocatedHosts *int32 `json:"allocated_hosts,omitempty"`

	// AllocatedNodes job node resources
	AllocatedNodes *V0040JobResNodes `json:"allocated_nodes,omitempty"`

	// Nodes Node(s) allocated to the job
	Nodes *string `json:"nodes,omitempty"`
}

// V0040JobResNodes job node resources
type V0040JobResNodes = []interface{}

// V0040JobSubmitReq defines model for v0.0.40_job_submit_req.
type V0040JobSubmitReq struct {
	Job  *V0040JobDescMsg     `json:"job,omitempty"`
	Jobs *V0040JobDescMsgList `json:"jobs,omitempty"`

	// Script Batch job script; must be specified in first component of jobs or in job if this field is not populated
	Script *string `json:"script,omitempty"`
}

// V0040JobSubmitResponseMsg defines model for v0.0.40_job_submit_response_msg.
type V0040JobSubmitResponseMsg struct {
	// Error Error message
	Error *string `json:"error,omitempty"`

	// ErrorCode Error code
	ErrorCode *int32 `json:"error_code,omitempty"`

	// JobId New job ID
	JobId *int32 `json:"job_id,omitempty"`

	// JobSubmitUserMsg Message to user from job_submit plugin
	JobSubmitUserMsg *string `json:"job_submit_user_msg,omitempty"`

	// StepId New job step ID
	StepId *string `json:"step_id,omitempty"`
}

// V0040KillJobsMsg defines model for v0.0.40_kill_jobs_msg.
type V0040KillJobsMsg struct {
	// Account Filter jobs to a specific account
	Account *string `json:"account,omitempty"`

	// Flags Filter jobs according to flags
	Flags *[]V0040KillJobsMsgFlags `json:"flags,omitempty"`

	// JobName Filter jobs to a specific name
	JobName *string `json:"job_name,omitempty"`

	// JobState Filter jobs to a specific state
	JobState *[]V0040KillJobsMsgJobState `json:"job_state,omitempty"`
	Jobs     *V0040KillJobsMsgJobsArray  `json:"jobs,omitempty"`
	Nodes    *V0040HostlistString        `json:"nodes,omitempty"`

	// Partition Filter jobs to a specific partition
	Partition *string `json:"partition,omitempty"`

	// Qos Filter jobs to a specific QOS
	Qos *string `json:"qos,omitempty"`

	// Reservation Filter jobs to a specific reservation
	Reservation *string `json:"reservation,omitempty"`

	// Signal Signal to send to jobs
	Signal *string `json:"signal,omitempty"`

	// UserId Filter jobs to a specific numeric user id
	UserId *string `json:"user_id,omitempty"`

	// UserName Filter jobs to a specific user name
	UserName *string `json:"user_name,omitempty"`

	// Wckey Filter jobs to a specific wckey
	Wckey *string `json:"wckey,omitempty"`
}

// V0040KillJobsMsgFlags defines model for V0040KillJobsMsg.Flags.
type V0040KillJobsMsgFlags string

// V0040KillJobsMsgJobState defines model for V0040KillJobsMsg.JobState.
type V0040KillJobsMsgJobState string

// V0040KillJobsMsgJobsArray defines model for v0.0.40_kill_jobs_msg_jobs_array.
type V0040KillJobsMsgJobsArray = []string

// V0040KillJobsRespJob defines model for v0.0.40_kill_jobs_resp_job.
type V0040KillJobsRespJob struct {
	Error *struct {
		// Code Numeric error encountered signaling job
		Code *int32 `json:"code,omitempty"`

		// Message Error message why signaling job failed
		Message *string `json:"message,omitempty"`

		// String String error encountered signaling job
		String *string `json:"string,omitempty"`
	} `json:"error,omitempty"`
	Federation *struct {
		// Sibling Name of federation sibling (may be empty for non-federation)
		Sibling *string `json:"sibling,omitempty"`
	} `json:"federation,omitempty"`

	// JobId Integer number with flags
	JobId V0040Uint32NoVal `json:"job_id"`

	// StepId Job or Step ID that signaling failed
	StepId string `json:"step_id"`
}

// V0040KillJobsRespMsg List of jobs signal responses
type V0040KillJobsRespMsg = []V0040KillJobsRespJob

// V0040License defines model for v0.0.40_license.
type V0040License struct {
	// Free Number of licenses currently available
	Free *int32 `json:"Free,omitempty"`

	// LastConsumed Last known number of licenses that were consumed in the license manager (Remote Only)
	LastConsumed *int32 `json:"LastConsumed,omitempty"`

	// LastDeficit Number of "missing licenses" from the cluster's perspective
	LastDeficit *int32 `json:"LastDeficit,omitempty"`

	// LastUpdate When the license information was last updated (UNIX Timestamp)
	LastUpdate *int64 `json:"LastUpdate,omitempty"`

	// LicenseName Name of the license
	LicenseName *string `json:"LicenseName,omitempty"`

	// Remote Indicates whether licenses are served by the database
	Remote *bool `json:"Remote,omitempty"`

	// Reserved Number of licenses reserved
	Reserved *int32 `json:"Reserved,omitempty"`

	// Total Total number of licenses present
	Total *int32 `json:"Total,omitempty"`

	// Used Number of licenses in use
	Used *int32 `json:"Used,omitempty"`
}

// V0040Licenses defines model for v0.0.40_licenses.
type V0040Licenses = []V0040License

// V0040Node defines model for v0.0.40_node.
type V0040Node struct {
	ActiveFeatures *V0040CsvString `json:"active_features,omitempty"`

	// Address NodeAddr, used to establish a communication path
	Address *string `json:"address,omitempty"`

	// AllocCpus Total number of CPUs currently allocated for jobs
	AllocCpus *int32 `json:"alloc_cpus,omitempty"`

	// AllocIdleCpus Total number of idle CPUs
	AllocIdleCpus *int32 `json:"alloc_idle_cpus,omitempty"`

	// AllocMemory Total memory in MB currently allocated for jobs
	AllocMemory *int64 `json:"alloc_memory,omitempty"`

	// Architecture Computer architecture
	Architecture *string `json:"architecture,omitempty"`

	// Boards Number of Baseboards in nodes with a baseboard controller
	Boards *int32 `json:"boards,omitempty"`

	// BootTime Integer number with flags
	BootTime *V0040Uint64NoVal `json:"boot_time,omitempty"`

	// BurstbufferNetworkAddress Alternate network path to be used for sbcast network traffic
	BurstbufferNetworkAddress *string `json:"burstbuffer_network_address,omitempty"`

	// ClusterName Cluster name (only set in federated environments)
	ClusterName *string `json:"cluster_name,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// Cores Number of cores in a single physical processor socket
	Cores *int32 `json:"cores,omitempty"`

	// CpuBinding Default method for binding tasks to allocated CPUs
	CpuBinding *int32 `json:"cpu_binding,omitempty"`

	// CpuLoad CPU load as reported by the OS
	CpuLoad *int32 `json:"cpu_load,omitempty"`

	// Cpus Total CPUs, including cores and threads
	Cpus *int32 `json:"cpus,omitempty"`

	// EffectiveCpus Number of effective CPUs (excluding specialized CPUs)
	EffectiveCpus *int32                 `json:"effective_cpus,omitempty"`
	Energy        *V0040AcctGatherEnergy `json:"energy,omitempty"`

	// ExternalSensors removed field
	// Deprecated:
	ExternalSensors *V0040ExtSensorsData `json:"external_sensors,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra    *string         `json:"extra,omitempty"`
	Features *V0040CsvString `json:"features,omitempty"`

	// FreeMem Integer number with flags
	FreeMem *V0040Uint64NoVal `json:"free_mem,omitempty"`

	// Gres Generic resources
	Gres *string `json:"gres,omitempty"`

	// GresDrained Drained generic resources
	GresDrained *string `json:"gres_drained,omitempty"`

	// GresUsed Generic resources currently in use
	GresUsed *string `json:"gres_used,omitempty"`

	// Hostname NodeHostname
	Hostname *string `json:"hostname,omitempty"`

	// InstanceId Cloud instance ID
	InstanceId *string `json:"instance_id,omitempty"`

	// InstanceType Cloud instance type
	InstanceType *string `json:"instance_type,omitempty"`

	// LastBusy Integer number with flags
	LastBusy *V0040Uint64NoVal `json:"last_busy,omitempty"`

	// McsLabel Multi-Category Security label
	McsLabel *string `json:"mcs_label,omitempty"`

	// Name NodeName
	Name *string `json:"name,omitempty"`

	// NextStateAfterReboot The state the node will be assigned after rebooting
	NextStateAfterReboot *[]V0040NodeNextStateAfterReboot `json:"next_state_after_reboot,omitempty"`

	// OperatingSystem Operating system reported by the node
	OperatingSystem *string `json:"operating_system,omitempty"`

	// Owner User allowed to run jobs on this node (unset if no restriction)
	Owner      *string         `json:"owner,omitempty"`
	Partitions *V0040CsvString `json:"partitions,omitempty"`

	// Port TCP port number of the slurmd
	Port *int32 `json:"port,omitempty"`

	// Power removed field
	// Deprecated:
	Power *V0040PowerMgmtData `json:"power,omitempty"`

	// RealMemory Total memory in MB on the node
	RealMemory *int64 `json:"real_memory,omitempty"`

	// Reason Describes why the node is in a "DOWN", "DRAINED", "DRAINING", "FAILING" or "FAIL" state
	Reason *string `json:"reason,omitempty"`

	// ReasonChangedAt Integer number with flags
	ReasonChangedAt *V0040Uint64NoVal `json:"reason_changed_at,omitempty"`

	// ReasonSetByUser User who set the reason
	ReasonSetByUser *string `json:"reason_set_by_user,omitempty"`

	// Reservation Name of reservation containing this node
	Reservation *string `json:"reservation,omitempty"`

	// ResumeAfter Integer number with flags
	ResumeAfter *V0040Uint64NoVal `json:"resume_after,omitempty"`

	// SlurmdStartTime Integer number with flags
	SlurmdStartTime *V0040Uint64NoVal `json:"slurmd_start_time,omitempty"`

	// Sockets Number of physical processor sockets/chips on the node
	Sockets *int32 `json:"sockets,omitempty"`

	// SpecializedCores Number of cores reserved for system use
	SpecializedCores *int32 `json:"specialized_cores,omitempty"`

	// SpecializedCpus Abstract CPU IDs on this node reserved for exclusive use by slurmd and slurmstepd
	SpecializedCpus *string `json:"specialized_cpus,omitempty"`

	// SpecializedMemory Combined memory limit, in MB, for Slurm compute node daemons
	SpecializedMemory *int64 `json:"specialized_memory,omitempty"`

	// State Node state(s) applicable to this node
	State *[]V0040NodeState `json:"state,omitempty"`

	// TemporaryDisk Total size in MB of temporary disk storage in TmpFS
	TemporaryDisk *int32 `json:"temporary_disk,omitempty"`

	// Threads Number of logical threads in a single physical core
	Threads *int32 `json:"threads,omitempty"`

	// Tres Configured trackable resources
	Tres *string `json:"tres,omitempty"`

	// TresUsed Trackable resources currently allocated for jobs
	TresUsed *string `json:"tres_used,omitempty"`

	// TresWeighted Weighted number of billable trackable resources allocated
	TresWeighted *float64 `json:"tres_weighted,omitempty"`

	// Version Slurmd version
	Version *string `json:"version,omitempty"`

	// Weight Weight of the node for scheduling purposes
	Weight *int32 `json:"weight,omitempty"`
}

// V0040NodeNextStateAfterReboot defines model for V0040Node.NextStateAfterReboot.
type V0040NodeNextStateAfterReboot string

// V0040NodeState defines model for V0040Node.State.
type V0040NodeState string

// V0040Nodes defines model for v0.0.40_nodes.
type V0040Nodes = []V0040Node

// V0040OpenapiAccountsAddCondResp defines model for v0.0.40_openapi_accounts_add_cond_resp.
type V0040OpenapiAccountsAddCondResp struct {
	Account              *V0040AccountShort    `json:"account,omitempty"`
	AssociationCondition *V0040AccountsAddCond `json:"association_condition,omitempty"`
	Errors               *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta                 *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings             *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiAccountsAddCondRespStr defines model for v0.0.40_openapi_accounts_add_cond_resp_str.
type V0040OpenapiAccountsAddCondRespStr struct {
	// AddedAccounts added_accounts
	AddedAccounts string                `json:"added_accounts"`
	Errors        *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta          *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings      *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiAccountsRemovedResp defines model for v0.0.40_openapi_accounts_removed_resp.
type V0040OpenapiAccountsRemovedResp struct {
	Errors          *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta            *V0040OpenapiMeta     `json:"meta,omitempty"`
	RemovedAccounts V0040StringList       `json:"removed_accounts"`
	Warnings        *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiAccountsResp defines model for v0.0.40_openapi_accounts_resp.
type V0040OpenapiAccountsResp struct {
	Accounts V0040AccountList      `json:"accounts"`
	Errors   *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiAssocsRemovedResp defines model for v0.0.40_openapi_assocs_removed_resp.
type V0040OpenapiAssocsRemovedResp struct {
	Errors              *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta                *V0040OpenapiMeta     `json:"meta,omitempty"`
	RemovedAssociations V0040StringList       `json:"removed_associations"`
	Warnings            *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiAssocsResp defines model for v0.0.40_openapi_assocs_resp.
type V0040OpenapiAssocsResp struct {
	Associations V0040AssocList        `json:"associations"`
	Errors       *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta         *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings     *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiClustersRemovedResp defines model for v0.0.40_openapi_clusters_removed_resp.
type V0040OpenapiClustersRemovedResp struct {
	DeletedClusters V0040StringList       `json:"deleted_clusters"`
	Errors          *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta            *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings        *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiClustersResp defines model for v0.0.40_openapi_clusters_resp.
type V0040OpenapiClustersResp struct {
	Clusters V0040ClusterRecList   `json:"clusters"`
	Errors   *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiDiagResp defines model for v0.0.40_openapi_diag_resp.
type V0040OpenapiDiagResp struct {
	Errors     *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0040OpenapiMeta     `json:"meta,omitempty"`
	Statistics V0040StatsMsg         `json:"statistics"`
	Warnings   *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiError defines model for v0.0.40_openapi_error.
type V0040OpenapiError struct {
	// Description Long form error description
	Description *string `json:"description,omitempty"`

	// Error Short form error description
	Error *string `json:"error,omitempty"`

	// ErrorNumber Slurm numeric error identifier
	ErrorNumber *int32 `json:"error_number,omitempty"`

	// Source Source of error or where error was first detected
	Source *string `json:"source,omitempty"`
}

// V0040OpenapiErrors defines model for v0.0.40_openapi_errors.
type V0040OpenapiErrors = []V0040OpenapiError

// V0040OpenapiInstancesResp defines model for v0.0.40_openapi_instances_resp.
type V0040OpenapiInstancesResp struct {
	Errors    *V0040OpenapiErrors   `json:"errors,omitempty"`
	Instances V0040InstanceList     `json:"instances"`
	Meta      *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings  *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiJobInfoResp defines model for v0.0.40_openapi_job_info_resp.
type V0040OpenapiJobInfoResp struct {
	Errors *V0040OpenapiErrors `json:"errors,omitempty"`
	Jobs   V0040JobInfoMsg     `json:"jobs"`

	// LastBackfill Integer number with flags
	LastBackfill V0040Uint64NoVal `json:"last_backfill"`

	// LastUpdate Integer number with flags
	LastUpdate V0040Uint64NoVal      `json:"last_update"`
	Meta       *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings   *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiJobPostResponse defines model for v0.0.40_openapi_job_post_response.
type V0040OpenapiJobPostResponse struct {
	Errors *V0040OpenapiErrors `json:"errors,omitempty"`

	// JobId First updated Job ID - Use results instead
	JobId *string `json:"job_id,omitempty"`

	// JobSubmitUserMsg First updated Job submision user message - Use results instead
	JobSubmitUserMsg *string                     `json:"job_submit_user_msg,omitempty"`
	Meta             *V0040OpenapiMeta           `json:"meta,omitempty"`
	Results          *V0040JobArrayResponseArray `json:"results,omitempty"`

	// StepId First updated Step ID - Use results instead
	StepId   *string               `json:"step_id,omitempty"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiJobSubmitResponse defines model for v0.0.40_openapi_job_submit_response.
type V0040OpenapiJobSubmitResponse struct {
	Errors *V0040OpenapiErrors `json:"errors,omitempty"`

	// JobId Submitted Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// JobSubmitUserMsg job submision user message
	JobSubmitUserMsg *string                    `json:"job_submit_user_msg,omitempty"`
	Meta             *V0040OpenapiMeta          `json:"meta,omitempty"`
	Result           *V0040JobSubmitResponseMsg `json:"result,omitempty"`

	// StepId Submitted Step ID
	StepId   *string               `json:"step_id,omitempty"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiKillJobsResp defines model for v0.0.40_openapi_kill_jobs_resp.
type V0040OpenapiKillJobsResp struct {
	Errors *V0040OpenapiErrors `json:"errors,omitempty"`
	Meta   *V0040OpenapiMeta   `json:"meta,omitempty"`

	// Status List of jobs signal responses
	Status   V0040KillJobsRespMsg  `json:"status"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiLicensesResp defines model for v0.0.40_openapi_licenses_resp.
type V0040OpenapiLicensesResp struct {
	Errors *V0040OpenapiErrors `json:"errors,omitempty"`

	// LastUpdate Integer number with flags
	LastUpdate V0040Uint64NoVal      `json:"last_update"`
	Licenses   V0040Licenses         `json:"licenses"`
	Meta       *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings   *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiMeta defines model for v0.0.40_openapi_meta.
type V0040OpenapiMeta struct {
	Client *struct {
		// Group Client group (if known)
		Group *string `json:"group,omitempty"`

		// Source Client source description
		Source *string `json:"source,omitempty"`

		// User Client user (if known)
		User *string `json:"user,omitempty"`
	} `json:"client,omitempty"`
	Command *V0040StringArray `json:"command,omitempty"`
	Plugin  *struct {
		// AccountingStorage Slurm accounting plugin
		AccountingStorage *string `json:"accounting_storage,omitempty"`

		// DataParser Slurm data_parser plugin
		DataParser *string `json:"data_parser,omitempty"`

		// Name Slurm plugin name (if applicable)
		Name *string `json:"name,omitempty"`

		// Type Slurm plugin type (if applicable)
		Type *string `json:"type,omitempty"`
	} `json:"plugin,omitempty"`
	Slurm *struct {
		// Cluster Slurm cluster name
		Cluster *string `json:"cluster,omitempty"`

		// Release Slurm release string
		Release *string `json:"release,omitempty"`
		Version *struct {
			// Major Slurm release major version
			Major *string `json:"major,omitempty"`

			// Micro Slurm release micro version
			Micro *string `json:"micro,omitempty"`

			// Minor Slurm release minor version
			Minor *string `json:"minor,omitempty"`
		} `json:"version,omitempty"`
	} `json:"slurm,omitempty"`
}

// V0040OpenapiNodesResp defines model for v0.0.40_openapi_nodes_resp.
type V0040OpenapiNodesResp struct {
	Errors *V0040OpenapiErrors `json:"errors,omitempty"`

	// LastUpdate Integer number with flags
	LastUpdate V0040Uint64NoVal      `json:"last_update"`
	Meta       *V0040OpenapiMeta     `json:"meta,omitempty"`
	Nodes      V0040Nodes            `json:"nodes"`
	Warnings   *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiPartitionResp defines model for v0.0.40_openapi_partition_resp.
type V0040OpenapiPartitionResp struct {
	Errors *V0040OpenapiErrors `json:"errors,omitempty"`

	// LastUpdate Integer number with flags
	LastUpdate V0040Uint64NoVal      `json:"last_update"`
	Meta       *V0040OpenapiMeta     `json:"meta,omitempty"`
	Partitions V0040PartitionInfoMsg `json:"partitions"`
	Warnings   *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiPingArrayResp defines model for v0.0.40_openapi_ping_array_resp.
type V0040OpenapiPingArrayResp struct {
	Errors   *V0040OpenapiErrors      `json:"errors,omitempty"`
	Meta     *V0040OpenapiMeta        `json:"meta,omitempty"`
	Pings    V0040ControllerPingArray `json:"pings"`
	Warnings *V0040OpenapiWarnings    `json:"warnings,omitempty"`
}

// V0040OpenapiReservationResp defines model for v0.0.40_openapi_reservation_resp.
type V0040OpenapiReservationResp struct {
	Errors *V0040OpenapiErrors `json:"errors,omitempty"`

	// LastUpdate Integer number with flags
	LastUpdate   V0040Uint64NoVal        `json:"last_update"`
	Meta         *V0040OpenapiMeta       `json:"meta,omitempty"`
	Reservations V0040ReservationInfoMsg `json:"reservations"`
	Warnings     *V0040OpenapiWarnings   `json:"warnings,omitempty"`
}

// V0040OpenapiResp defines model for v0.0.40_openapi_resp.
type V0040OpenapiResp struct {
	Errors   *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiSharesResp defines model for v0.0.40_openapi_shares_resp.
type V0040OpenapiSharesResp struct {
	Errors   *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0040OpenapiMeta     `json:"meta,omitempty"`
	Shares   V0040SharesRespMsg    `json:"shares"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiSlurmdbdConfigResp defines model for v0.0.40_openapi_slurmdbd_config_resp.
type V0040OpenapiSlurmdbdConfigResp struct {
	Accounts     *V0040AccountList     `json:"accounts,omitempty"`
	Associations *V0040AssocList       `json:"associations,omitempty"`
	Clusters     *V0040ClusterRecList  `json:"clusters,omitempty"`
	Errors       *V0040OpenapiErrors   `json:"errors,omitempty"`
	Instances    *V0040InstanceList    `json:"instances,omitempty"`
	Meta         *V0040OpenapiMeta     `json:"meta,omitempty"`
	Qos          *V0040QosList         `json:"qos,omitempty"`
	Tres         *V0040TresList        `json:"tres,omitempty"`
	Users        *V0040UserList        `json:"users,omitempty"`
	Warnings     *V0040OpenapiWarnings `json:"warnings,omitempty"`
	Wckeys       *V0040WckeyList       `json:"wckeys,omitempty"`
}

// V0040OpenapiSlurmdbdJobsResp defines model for v0.0.40_openapi_slurmdbd_jobs_resp.
type V0040OpenapiSlurmdbdJobsResp struct {
	Errors   *V0040OpenapiErrors   `json:"errors,omitempty"`
	Jobs     V0040JobList          `json:"jobs"`
	Meta     *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiSlurmdbdQosRemovedResp defines model for v0.0.40_openapi_slurmdbd_qos_removed_resp.
type V0040OpenapiSlurmdbdQosRemovedResp struct {
	Errors     *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0040OpenapiMeta     `json:"meta,omitempty"`
	RemovedQos V0040StringList       `json:"removed_qos"`
	Warnings   *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiSlurmdbdQosResp defines model for v0.0.40_openapi_slurmdbd_qos_resp.
type V0040OpenapiSlurmdbdQosResp struct {
	Errors   *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0040OpenapiMeta     `json:"meta,omitempty"`
	Qos      V0040QosList          `json:"qos"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiSlurmdbdStatsResp defines model for v0.0.40_openapi_slurmdbd_stats_resp.
type V0040OpenapiSlurmdbdStatsResp struct {
	Errors     *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0040OpenapiMeta     `json:"meta,omitempty"`
	Statistics V0040StatsRec         `json:"statistics"`
	Warnings   *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiTresResp defines model for v0.0.40_openapi_tres_resp.
type V0040OpenapiTresResp struct {
	TRES     V0040TresList         `json:"TRES"`
	Errors   *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiUsersAddCondResp defines model for v0.0.40_openapi_users_add_cond_resp.
type V0040OpenapiUsersAddCondResp struct {
	AssociationCondition V0040UsersAddCond     `json:"association_condition"`
	Errors               *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta                 *V0040OpenapiMeta     `json:"meta,omitempty"`
	User                 V0040UserShort        `json:"user"`
	Warnings             *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiUsersAddCondRespStr defines model for v0.0.40_openapi_users_add_cond_resp_str.
type V0040OpenapiUsersAddCondRespStr struct {
	// AddedUsers added_users
	AddedUsers string                `json:"added_users"`
	Errors     *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings   *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiUsersResp defines model for v0.0.40_openapi_users_resp.
type V0040OpenapiUsersResp struct {
	Errors   *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0040OpenapiMeta     `json:"meta,omitempty"`
	Users    V0040UserList         `json:"users"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiWarning defines model for v0.0.40_openapi_warning.
type V0040OpenapiWarning struct {
	// Description Long form warning description
	Description *string `json:"description,omitempty"`

	// Source Source of warning or where warning was first detected
	Source *string `json:"source,omitempty"`
}

// V0040OpenapiWarnings defines model for v0.0.40_openapi_warnings.
type V0040OpenapiWarnings = []V0040OpenapiWarning

// V0040OpenapiWckeyRemovedResp defines model for v0.0.40_openapi_wckey_removed_resp.
type V0040OpenapiWckeyRemovedResp struct {
	DeletedWckeys V0040StringList       `json:"deleted_wckeys"`
	Errors        *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta          *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings      *V0040OpenapiWarnings `json:"warnings,omitempty"`
}

// V0040OpenapiWckeyResp defines model for v0.0.40_openapi_wckey_resp.
type V0040OpenapiWckeyResp struct {
	Errors   *V0040OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0040OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0040OpenapiWarnings `json:"warnings,omitempty"`
	Wckeys   V0040WckeyList        `json:"wckeys"`
}

// V0040PartitionInfo defines model for v0.0.40_partition_info.
type V0040PartitionInfo struct {
	Accounts *struct {
		// Allowed AllowAccounts
		Allowed *string `json:"allowed,omitempty"`

		// Deny DenyAccounts
		Deny *string `json:"deny,omitempty"`
	} `json:"accounts,omitempty"`

	// Alternate Alternate
	Alternate *string `json:"alternate,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`
	Cpus    *struct {
		// TaskBinding CpuBind
		TaskBinding *int32 `json:"task_binding,omitempty"`

		// Total TotalCPUs
		Total *int32 `json:"total,omitempty"`
	} `json:"cpus,omitempty"`
	Defaults *struct {
		// Job JobDefaults
		Job *string `json:"job,omitempty"`

		// MemoryPerCpu DefMemPerCPU or DefMemPerNode
		MemoryPerCpu *int64 `json:"memory_per_cpu,omitempty"`

		// PartitionMemoryPerCpu Integer number with flags
		PartitionMemoryPerCpu *V0040Uint64NoVal `json:"partition_memory_per_cpu,omitempty"`

		// PartitionMemoryPerNode Integer number with flags
		PartitionMemoryPerNode *V0040Uint64NoVal `json:"partition_memory_per_node,omitempty"`

		// Time Integer number with flags
		Time *V0040Uint32NoVal `json:"time,omitempty"`
	} `json:"defaults,omitempty"`

	// GraceTime GraceTime
	GraceTime *int32 `json:"grace_time,omitempty"`
	Groups    *struct {
		// Allowed AllowGroups
		Allowed *string `json:"allowed,omitempty"`
	} `json:"groups,omitempty"`
	Maximums *struct {
		// CpusPerNode Integer number with flags
		CpusPerNode *V0040Uint32NoVal `json:"cpus_per_node,omitempty"`

		// CpusPerSocket Integer number with flags
		CpusPerSocket *V0040Uint32NoVal `json:"cpus_per_socket,omitempty"`

		// MemoryPerCpu MaxMemPerCPU or MaxMemPerNode
		MemoryPerCpu *int64 `json:"memory_per_cpu,omitempty"`

		// Nodes Integer number with flags
		Nodes *V0040Uint32NoVal `json:"nodes,omitempty"`

		// OverTimeLimit Integer number with flags
		OverTimeLimit *V0040Uint16NoVal `json:"over_time_limit,omitempty"`
		Oversubscribe *struct {
			// Flags Flags applicable to the OverSubscribe setting
			Flags *[]V0040PartitionInfoMaximumsOversubscribeFlags `json:"flags,omitempty"`

			// Jobs Maximum number of jobs allowed to oversubscribe resources
			Jobs *int32 `json:"jobs,omitempty"`
		} `json:"oversubscribe,omitempty"`

		// PartitionMemoryPerCpu Integer number with flags
		PartitionMemoryPerCpu *V0040Uint64NoVal `json:"partition_memory_per_cpu,omitempty"`

		// PartitionMemoryPerNode Integer number with flags
		PartitionMemoryPerNode *V0040Uint64NoVal `json:"partition_memory_per_node,omitempty"`

		// Shares OverSubscribe
		Shares *int32 `json:"shares,omitempty"`

		// Time Integer number with flags
		Time *V0040Uint32NoVal `json:"time,omitempty"`
	} `json:"maximums,omitempty"`
	Minimums *struct {
		// Nodes MinNodes
		Nodes *int32 `json:"nodes,omitempty"`
	} `json:"minimums,omitempty"`

	// Name PartitionName
	Name *string `json:"name,omitempty"`

	// NodeSets NodeSets
	NodeSets *string `json:"node_sets,omitempty"`
	Nodes    *struct {
		// AllowedAllocation AllocNodes
		AllowedAllocation *string `json:"allowed_allocation,omitempty"`

		// Configured Nodes
		Configured *string `json:"configured,omitempty"`

		// Total TotalNodes
		Total *int32 `json:"total,omitempty"`
	} `json:"nodes,omitempty"`
	Partition *struct {
		// State Current state(s)
		State *[]V0040PartitionInfoPartitionState `json:"state,omitempty"`
	} `json:"partition,omitempty"`
	Priority *struct {
		// JobFactor PriorityJobFactor
		JobFactor *int32 `json:"job_factor,omitempty"`

		// Tier PriorityTier
		Tier *int32 `json:"tier,omitempty"`
	} `json:"priority,omitempty"`
	Qos *struct {
		// Allowed AllowQOS
		Allowed *string `json:"allowed,omitempty"`

		// Assigned QOS
		Assigned *string `json:"assigned,omitempty"`

		// Deny DenyQOS
		Deny *string `json:"deny,omitempty"`
	} `json:"qos,omitempty"`

	// SuspendTime Integer number with flags
	SuspendTime *V0040Uint32NoVal `json:"suspend_time,omitempty"`
	Timeouts    *struct {
		// Resume Integer number with flags
		Resume *V0040Uint16NoVal `json:"resume,omitempty"`

		// Suspend Integer number with flags
		Suspend *V0040Uint16NoVal `json:"suspend,omitempty"`
	} `json:"timeouts,omitempty"`
	Tres *struct {
		// BillingWeights TRESBillingWeights
		BillingWeights *string `json:"billing_weights,omitempty"`

		// Configured TRES
		Configured *string `json:"configured,omitempty"`
	} `json:"tres,omitempty"`
}

// V0040PartitionInfoMaximumsOversubscribeFlags defines model for V0040PartitionInfo.Maximums.Oversubscribe.Flags.
type V0040PartitionInfoMaximumsOversubscribeFlags string

// V0040PartitionInfoPartitionState defines model for V0040PartitionInfo.Partition.State.
type V0040PartitionInfoPartitionState string

// V0040PartitionInfoMsg defines model for v0.0.40_partition_info_msg.
type V0040PartitionInfoMsg = []V0040PartitionInfo

// V0040PowerFlags removed field
type V0040PowerFlags = []interface{}

// V0040PowerMgmtData removed field
type V0040PowerMgmtData = map[string]interface{}

// V0040ProcessExitCodeVerbose defines model for v0.0.40_process_exit_code_verbose.
type V0040ProcessExitCodeVerbose struct {
	// ReturnCode Integer number with flags
	ReturnCode *V0040Uint32NoVal `json:"return_code,omitempty"`
	Signal     *struct {
		// Id Integer number with flags
		Id *V0040Uint16NoVal `json:"id,omitempty"`

		// Name Signal sent to process
		Name *string `json:"name,omitempty"`
	} `json:"signal,omitempty"`

	// Status Status given by return code
	Status *[]V0040ProcessExitCodeVerboseStatus `json:"status,omitempty"`
}

// V0040ProcessExitCodeVerboseStatus defines model for V0040ProcessExitCodeVerbose.Status.
type V0040ProcessExitCodeVerboseStatus string

// V0040Qos defines model for v0.0.40_qos.
type V0040Qos struct {
	// Description Arbitrary description
	Description *string `json:"description,omitempty"`

	// Flags Flags, to avoid modifying current values specify NOT_SET.
	Flags *[]V0040QosFlags `json:"flags,omitempty"`

	// Id Unique ID
	Id     *int32 `json:"id,omitempty"`
	Limits *struct {
		// Factor 64 bit floating point number with flags
		Factor *V0040Float64NoVal `json:"factor,omitempty"`

		// GraceTime GraceTime
		GraceTime *int32 `json:"grace_time,omitempty"`
		Max       *struct {
			Accruing *struct {
				Per *struct {
					// Account Integer number with flags
					Account *V0040Uint32NoVal `json:"account,omitempty"`

					// User Integer number with flags
					User *V0040Uint32NoVal `json:"user,omitempty"`
				} `json:"per,omitempty"`
			} `json:"accruing,omitempty"`
			ActiveJobs *struct {
				// Accruing Integer number with flags
				Accruing *V0040Uint32NoVal `json:"accruing,omitempty"`

				// Count Integer number with flags
				Count *V0040Uint32NoVal `json:"count,omitempty"`
			} `json:"active_jobs,omitempty"`
			Jobs *struct {
				ActiveJobs *struct {
					Per *struct {
						// Account Integer number with flags
						Account *V0040Uint32NoVal `json:"account,omitempty"`

						// User Integer number with flags
						User *V0040Uint32NoVal `json:"user,omitempty"`
					} `json:"per,omitempty"`
				} `json:"active_jobs,omitempty"`
				Per *struct {
					// Account Integer number with flags
					Account *V0040Uint32NoVal `json:"account,omitempty"`

					// User Integer number with flags
					User *V0040Uint32NoVal `json:"user,omitempty"`
				} `json:"per,omitempty"`
			} `json:"jobs,omitempty"`
			Tres *struct {
				Minutes *struct {
					Per *struct {
						Account *V0040TresList `json:"account,omitempty"`
						Job     *V0040TresList `json:"job,omitempty"`
						Qos     *V0040TresList `json:"qos,omitempty"`
						User    *V0040TresList `json:"user,omitempty"`
					} `json:"per,omitempty"`
				} `json:"minutes,omitempty"`
				Per *struct {
					Account *V0040TresList `json:"account,omitempty"`
					Job     *V0040TresList `json:"job,omitempty"`
					Node    *V0040TresList `json:"node,omitempty"`
					User    *V0040TresList `json:"user,omitempty"`
				} `json:"per,omitempty"`
				Total *V0040TresList `json:"total,omitempty"`
			} `json:"tres,omitempty"`
			WallClock *struct {
				Per *struct {
					// Job Integer number with flags
					Job *V0040Uint32NoVal `json:"job,omitempty"`

					// Qos Integer number with flags
					Qos *V0040Uint32NoVal `json:"qos,omitempty"`
				} `json:"per,omitempty"`
			} `json:"wall_clock,omitempty"`
		} `json:"max,omitempty"`
		Min *struct {
			// PriorityThreshold Integer number with flags
			PriorityThreshold *V0040Uint32NoVal `json:"priority_threshold,omitempty"`
			Tres              *struct {
				Per *struct {
					Job *V0040TresList `json:"job,omitempty"`
				} `json:"per,omitempty"`
			} `json:"tres,omitempty"`
		} `json:"min,omitempty"`
	} `json:"limits,omitempty"`

	// Name Name
	Name    *string `json:"name,omitempty"`
	Preempt *struct {
		// ExemptTime Integer number with flags
		ExemptTime *V0040Uint32NoVal    `json:"exempt_time,omitempty"`
		List       *V0040QosPreemptList `json:"list,omitempty"`

		// Mode PreemptMode
		Mode *[]V0040QosPreemptMode `json:"mode,omitempty"`
	} `json:"preempt,omitempty"`

	// Priority Integer number with flags
	Priority *V0040Uint32NoVal `json:"priority,omitempty"`

	// UsageFactor 64 bit floating point number with flags
	UsageFactor *V0040Float64NoVal `json:"usage_factor,omitempty"`

	// UsageThreshold 64 bit floating point number with flags
	UsageThreshold *V0040Float64NoVal `json:"usage_threshold,omitempty"`
}

// V0040QosFlags defines model for V0040Qos.Flags.
type V0040QosFlags string

// V0040QosPreemptMode defines model for V0040Qos.Preempt.Mode.
type V0040QosPreemptMode string

// V0040QosList defines model for v0.0.40_qos_list.
type V0040QosList = []V0040Qos

// V0040QosPreemptList defines model for v0.0.40_qos_preempt_list.
type V0040QosPreemptList = []string

// V0040QosStringIdList List of QOS names
type V0040QosStringIdList = []string

// V0040ReservationCoreSpec defines model for v0.0.40_reservation_core_spec.
type V0040ReservationCoreSpec struct {
	// Core IDs of reserved cores
	Core *string `json:"core,omitempty"`

	// Node Name of reserved node
	Node *string `json:"node,omitempty"`
}

// V0040ReservationInfo defines model for v0.0.40_reservation_info.
type V0040ReservationInfo struct {
	// Accounts Comma separated list of permitted accounts
	Accounts *string `json:"accounts,omitempty"`

	// BurstBuffer BurstBuffer
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// CoreCount CoreCnt
	CoreCount           *int32                        `json:"core_count,omitempty"`
	CoreSpecializations *V0040ReservationInfoCoreSpec `json:"core_specializations,omitempty"`

	// EndTime Integer number with flags
	EndTime *V0040Uint64NoVal `json:"end_time,omitempty"`

	// Features Features
	Features *string `json:"features,omitempty"`

	// Flags Flags associated with the reservation
	Flags *[]V0040ReservationInfoFlags `json:"flags,omitempty"`

	// Groups Groups
	Groups *string `json:"groups,omitempty"`

	// Licenses Licenses
	Licenses *string `json:"licenses,omitempty"`

	// MaxStartDelay MaxStartDelay in seconds
	MaxStartDelay *int32 `json:"max_start_delay,omitempty"`

	// Name ReservationName
	Name *string `json:"name,omitempty"`

	// NodeCount NodeCnt
	NodeCount *int32 `json:"node_count,omitempty"`

	// NodeList Nodes
	NodeList *string `json:"node_list,omitempty"`

	// Partition PartitionName
	Partition      *string `json:"partition,omitempty"`
	PurgeCompleted *struct {
		// Time Integer number with flags
		Time *V0040Uint32NoVal `json:"time,omitempty"`
	} `json:"purge_completed,omitempty"`

	// StartTime Integer number with flags
	StartTime *V0040Uint64NoVal `json:"start_time,omitempty"`

	// Tres Comma separated list of required TRES
	Tres *string `json:"tres,omitempty"`

	// Users Comma separated list of permitted users
	Users *string `json:"users,omitempty"`

	// Watts Integer number with flags
	Watts *V0040Uint32NoVal `json:"watts,omitempty"`
}

// V0040ReservationInfoFlags defines model for V0040ReservationInfo.Flags.
type V0040ReservationInfoFlags string

// V0040ReservationInfoCoreSpec defines model for v0.0.40_reservation_info_core_spec.
type V0040ReservationInfoCoreSpec = []V0040ReservationCoreSpec

// V0040ReservationInfoMsg defines model for v0.0.40_reservation_info_msg.
type V0040ReservationInfoMsg = []V0040ReservationInfo

// V0040RollupStats list of recorded rollup statistics
type V0040RollupStats = []struct {
	// LastRun Last time rollup ran (UNIX timestamp)
	LastRun *int32 `json:"last run,omitempty"`

	// MaxCycle longest rollup time (seconds)
	MaxCycle *int64 `json:"max_cycle,omitempty"`

	// MeanCycles average time for rollup (seconds)
	MeanCycles *int64 `json:"mean_cycles,omitempty"`

	// TotalCycles number of rollups since last_run
	TotalCycles *int64 `json:"total_cycles,omitempty"`

	// TotalTime total time spent doing rollups (seconds)
	TotalTime *int64 `json:"total_time,omitempty"`

	// Type type
	Type *V0040RollupStatsType `json:"type,omitempty"`
}

// V0040RollupStatsType type
type V0040RollupStatsType string

// V0040ScheduleExitFields defines model for v0.0.40_schedule_exit_fields.
type V0040ScheduleExitFields struct {
	// DefaultQueueDepth Reached number of jobs allowed to be tested
	DefaultQueueDepth *int32 `json:"default_queue_depth,omitempty"`

	// EndJobQueue Reached end of queue
	EndJobQueue *int32 `json:"end_job_queue,omitempty"`

	// Licenses Blocked on licenses
	Licenses *int32 `json:"licenses,omitempty"`

	// MaxJobStart Reached number of jobs allowed to start
	MaxJobStart *int32 `json:"max_job_start,omitempty"`

	// MaxRpcCnt Reached RPC limit
	MaxRpcCnt *int32 `json:"max_rpc_cnt,omitempty"`

	// MaxSchedTime Reached maximum allowed scheduler time
	MaxSchedTime *int32 `json:"max_sched_time,omitempty"`
}

// V0040SharesFloat128Tres defines model for v0.0.40_shares_float128_tres.
type V0040SharesFloat128Tres struct {
	// Name TRES name
	Name *string `json:"name,omitempty"`

	// Value TRES value
	Value *float32 `json:"value,omitempty"`
}

// V0040SharesFloat128TresList defines model for v0.0.40_shares_float128_tres_list.
type V0040SharesFloat128TresList = []V0040SharesFloat128Tres

// V0040SharesRespMsg defines model for v0.0.40_shares_resp_msg.
type V0040SharesRespMsg struct {
	Shares *V0040AssocSharesObjList `json:"shares,omitempty"`

	// TotalShares Total number of shares
	TotalShares *int64 `json:"total_shares,omitempty"`
}

// V0040SharesUint64Tres defines model for v0.0.40_shares_uint64_tres.
type V0040SharesUint64Tres struct {
	// Name TRES name
	Name *string `json:"name,omitempty"`

	// Value Integer number with flags
	Value *V0040Uint64NoVal `json:"value,omitempty"`
}

// V0040SharesUint64TresList defines model for v0.0.40_shares_uint64_tres_list.
type V0040SharesUint64TresList = []V0040SharesUint64Tres

// V0040StatsMsg defines model for v0.0.40_stats_msg.
type V0040StatsMsg struct {
	// AgentCount Number of agent threads
	AgentCount *int32 `json:"agent_count,omitempty"`

	// AgentQueueSize Number of enqueued outgoing RPC requests in an internal retry list
	AgentQueueSize *int32 `json:"agent_queue_size,omitempty"`

	// AgentThreadCount Total number of active threads created by all agent threads
	AgentThreadCount *int32 `json:"agent_thread_count,omitempty"`

	// BfActive Backfill scheduler currently running
	BfActive *bool `json:"bf_active,omitempty"`

	// BfBackfilledHetJobs Number of heterogeneous job components started through backfilling since last Slurm start
	BfBackfilledHetJobs *int32 `json:"bf_backfilled_het_jobs,omitempty"`

	// BfBackfilledJobs Number of jobs started through backfilling since last slurm start
	BfBackfilledJobs *int32 `json:"bf_backfilled_jobs,omitempty"`

	// BfCycleCounter Number of backfill scheduling cycles since last reset
	BfCycleCounter *int32 `json:"bf_cycle_counter,omitempty"`

	// BfCycleLast Execution time in microseconds of last backfill scheduling cycle
	BfCycleLast *int32 `json:"bf_cycle_last,omitempty"`

	// BfCycleMean Mean time in microseconds of backfilling scheduling cycles since last reset
	BfCycleMean *int64 `json:"bf_cycle_mean,omitempty"`

	// BfCycleSum Total time in microseconds of backfilling scheduling cycles since last reset
	BfCycleSum *int64 `json:"bf_cycle_sum,omitempty"`

	// BfDepthMean Mean number of eligible to run jobs processed during all backfilling scheduling cycles since last reset
	BfDepthMean *int64 `json:"bf_depth_mean,omitempty"`

	// BfDepthMeanTry The subset of Depth Mean that the backfill scheduler attempted to schedule
	BfDepthMeanTry *int64 `json:"bf_depth_mean_try,omitempty"`

	// BfDepthSum Total number of jobs processed during all backfilling scheduling cycles since last reset
	BfDepthSum *int32 `json:"bf_depth_sum,omitempty"`

	// BfDepthTrySum Subset of bf_depth_sum that the backfill scheduler attempted to schedule
	BfDepthTrySum *int32             `json:"bf_depth_try_sum,omitempty"`
	BfExit        *V0040BfExitFields `json:"bf_exit,omitempty"`

	// BfLastBackfilledJobs Number of jobs started through backfilling since last reset
	BfLastBackfilledJobs *int32 `json:"bf_last_backfilled_jobs,omitempty"`

	// BfLastDepth Number of processed jobs during last backfilling scheduling cycle
	BfLastDepth *int32 `json:"bf_last_depth,omitempty"`

	// BfLastDepthTry Number of processed jobs during last backfilling scheduling cycle that had a chance to start using available resources
	BfLastDepthTry *int32 `json:"bf_last_depth_try,omitempty"`

	// BfQueueLen Number of jobs pending to be processed by backfilling algorithm
	BfQueueLen *int32 `json:"bf_queue_len,omitempty"`

	// BfQueueLenMean Mean number of jobs pending to be processed by backfilling algorithm
	BfQueueLenMean *int64 `json:"bf_queue_len_mean,omitempty"`

	// BfQueueLenSum Total number of jobs pending to be processed by backfilling algorithm since last reset
	BfQueueLenSum *int32 `json:"bf_queue_len_sum,omitempty"`

	// BfTableSize Number of different time slots tested by the backfill scheduler in its last iteration
	BfTableSize *int32 `json:"bf_table_size,omitempty"`

	// BfTableSizeMean Mean number of different time slots tested by the backfill scheduler
	BfTableSizeMean *int64 `json:"bf_table_size_mean,omitempty"`

	// BfWhenLastCycle Integer number with flags
	BfWhenLastCycle *V0040Uint64NoVal `json:"bf_when_last_cycle,omitempty"`

	// DbdAgentQueueSize Number of messages for SlurmDBD that are queued
	DbdAgentQueueSize *int32 `json:"dbd_agent_queue_size,omitempty"`

	// GettimeofdayLatency Latency of 1000 calls to the gettimeofday() syscall in microseconds, as measured at controller startup
	GettimeofdayLatency *int32 `json:"gettimeofday_latency,omitempty"`

	// JobStatesTs Integer number with flags
	JobStatesTs *V0040Uint64NoVal `json:"job_states_ts,omitempty"`

	// JobsCanceled Number of jobs canceled since the last reset
	JobsCanceled *int32 `json:"jobs_canceled,omitempty"`

	// JobsCompleted Number of jobs completed since last reset
	JobsCompleted *int32 `json:"jobs_completed,omitempty"`

	// JobsFailed Number of jobs failed due to slurmd or other internal issues since last reset
	JobsFailed *int32 `json:"jobs_failed,omitempty"`

	// JobsPending Number of jobs pending at the time of listed in job_state_ts
	JobsPending *int32 `json:"jobs_pending,omitempty"`

	// JobsRunning Number of jobs running at the time of listed in job_state_ts
	JobsRunning *int32 `json:"jobs_running,omitempty"`

	// JobsStarted Number of jobs started since last reset
	JobsStarted *int32 `json:"jobs_started,omitempty"`

	// JobsSubmitted Number of jobs submitted since last reset
	JobsSubmitted *int32 `json:"jobs_submitted,omitempty"`

	// PartsPacked Zero if only RPC statistic included
	PartsPacked *int32 `json:"parts_packed,omitempty"`

	// ReqTime Integer number with flags
	ReqTime *V0040Uint64NoVal `json:"req_time,omitempty"`

	// ReqTimeStart Integer number with flags
	ReqTimeStart *V0040Uint64NoVal `json:"req_time_start,omitempty"`

	// RpcsByMessageType RPCs by message type
	RpcsByMessageType *V0040StatsMsgRpcsByType `json:"rpcs_by_message_type,omitempty"`

	// RpcsByUser RPCs by user
	RpcsByUser *V0040StatsMsgRpcsByUser `json:"rpcs_by_user,omitempty"`

	// ScheduleCycleLast Time in microseconds for last scheduling cycle
	ScheduleCycleLast *int32 `json:"schedule_cycle_last,omitempty"`

	// ScheduleCycleMax Max time of any scheduling cycle in microseconds since last reset
	ScheduleCycleMax *int32 `json:"schedule_cycle_max,omitempty"`

	// ScheduleCycleMean Mean time in microseconds for all scheduling cycles since last reset
	ScheduleCycleMean *int64 `json:"schedule_cycle_mean,omitempty"`

	// ScheduleCycleMeanDepth Mean of the number of jobs processed in a scheduling cycle
	ScheduleCycleMeanDepth *int64 `json:"schedule_cycle_mean_depth,omitempty"`

	// ScheduleCyclePerMinute Number of scheduling executions per minute
	ScheduleCyclePerMinute *int64 `json:"schedule_cycle_per_minute,omitempty"`

	// ScheduleCycleTotal Number of scheduling cycles since last reset
	ScheduleCycleTotal *int32                   `json:"schedule_cycle_total,omitempty"`
	ScheduleExit       *V0040ScheduleExitFields `json:"schedule_exit,omitempty"`

	// ScheduleQueueLength Number of jobs pending in queue
	ScheduleQueueLength *int32 `json:"schedule_queue_length,omitempty"`

	// ServerThreadCount Number of current active slurmctld threads
	ServerThreadCount *int32 `json:"server_thread_count,omitempty"`
}

// V0040StatsMsgRpcsByType RPCs by message type
type V0040StatsMsgRpcsByType = []struct {
	// AverageTime Average time spent processing RPC in seconds
	AverageTime *int64 `json:"average_time,omitempty"`

	// Count Number of RPCs received
	Count *int64 `json:"count,omitempty"`

	// MessageType Message type as string
	MessageType *string `json:"message_type,omitempty"`

	// TotalTime Total time spent processing RPC in seconds
	TotalTime *int64 `json:"total_time,omitempty"`

	// TypeId Message type as integer
	TypeId *int32 `json:"type_id,omitempty"`
}

// V0040StatsMsgRpcsByUser RPCs by user
type V0040StatsMsgRpcsByUser = []struct {
	// AverageTime Average time spent processing RPC in seconds
	AverageTime *int64 `json:"average_time,omitempty"`

	// Count Number of RPCs received
	Count *int64 `json:"count,omitempty"`

	// TotalTime Total time spent processing RPC in seconds
	TotalTime *int64 `json:"total_time,omitempty"`

	// User user name
	User *string `json:"user,omitempty"`

	// UserId user id (numeric)
	UserId *int32 `json:"user_id,omitempty"`
}

// V0040StatsRec defines model for v0.0.40_stats_rec.
type V0040StatsRec struct {
	RPCs *V0040StatsRpcList `json:"RPCs,omitempty"`

	// Rollups list of recorded rollup statistics
	Rollups *V0040RollupStats `json:"rollups,omitempty"`

	// TimeStart When data collection started (UNIX timestamp)
	TimeStart *int64              `json:"time_start,omitempty"`
	Users     *V0040StatsUserList `json:"users,omitempty"`
}

// V0040StatsRpc defines model for v0.0.40_stats_rpc.
type V0040StatsRpc struct {
	// Count Number of RPCs processed
	Count *int32 `json:"count,omitempty"`

	// Rpc RPC type
	Rpc  *string `json:"rpc,omitempty"`
	Time *struct {
		// Average Average RPC processing time in microseconds
		Average *int64 `json:"average,omitempty"`

		// Total Total RPC processing time in microseconds
		Total *int64 `json:"total,omitempty"`
	} `json:"time,omitempty"`
}

// V0040StatsRpcList defines model for v0.0.40_stats_rpc_list.
type V0040StatsRpcList = []V0040StatsRpc

// V0040StatsUser defines model for v0.0.40_stats_user.
type V0040StatsUser struct {
	// Count Number of RPCs processed
	Count *int32 `json:"count,omitempty"`
	Time  *struct {
		// Average Average RPC processing time in microseconds
		Average *int64 `json:"average,omitempty"`

		// Total Total RPC processing time in microseconds
		Total *int64 `json:"total,omitempty"`
	} `json:"time,omitempty"`

	// User User ID
	User *string `json:"user,omitempty"`
}

// V0040StatsUserList defines model for v0.0.40_stats_user_list.
type V0040StatsUserList = []V0040StatsUser

// V0040Step defines model for v0.0.40_step.
type V0040Step struct {
	CPU *struct {
		// Governor Requested CPU frequency governor in kHz
		Governor           *string `json:"governor,omitempty"`
		RequestedFrequency *struct {
			// Max Integer number with flags
			Max *V0040Uint32NoVal `json:"max,omitempty"`

			// Min Integer number with flags
			Min *V0040Uint32NoVal `json:"min,omitempty"`
		} `json:"requested_frequency,omitempty"`
	} `json:"CPU,omitempty"`
	ExitCode *V0040ProcessExitCodeVerbose `json:"exit_code,omitempty"`

	// KillRequestUser User ID that requested termination of the step
	KillRequestUser *string `json:"kill_request_user,omitempty"`
	Nodes           *struct {
		// Count Number of nodes in the job step
		Count *int32         `json:"count,omitempty"`
		List  *V0040Hostlist `json:"list,omitempty"`

		// Range Node(s) allocated to the job step
		Range *string `json:"range,omitempty"`
	} `json:"nodes,omitempty"`

	// Pid Process ID
	Pid *string `json:"pid,omitempty"`

	// State Current state
	State      *[]V0040StepState `json:"state,omitempty"`
	Statistics *struct {
		CPU *struct {
			// ActualFrequency Average weighted CPU frequency of all tasks in kHz
			ActualFrequency *int64 `json:"actual_frequency,omitempty"`
		} `json:"CPU,omitempty"`
		Energy *struct {
			// Consumed Integer number with flags
			Consumed *V0040Uint64NoVal `json:"consumed,omitempty"`
		} `json:"energy,omitempty"`
	} `json:"statistics,omitempty"`
	Step *struct {
		// Id Slurm Job Step ID
		Id *string `json:"id,omitempty"`

		// Name Step name
		Name *string `json:"name,omitempty"`
	} `json:"step,omitempty"`
	Task *struct {
		// Distribution The layout of the step was when it was running
		Distribution *string `json:"distribution,omitempty"`
	} `json:"task,omitempty"`
	Tasks *struct {
		// Count Total number of tasks
		Count *int32 `json:"count,omitempty"`
	} `json:"tasks,omitempty"`
	Time *struct {
		// Elapsed Elapsed time in seconds
		Elapsed *int32 `json:"elapsed,omitempty"`

		// End Integer number with flags
		End *V0040Uint64NoVal `json:"end,omitempty"`

		// Start Integer number with flags
		Start *V0040Uint64NoVal `json:"start,omitempty"`

		// Suspended Time in suspended state in seconds
		Suspended *int32 `json:"suspended,omitempty"`
		System    *struct {
			// Microseconds System CPU time used by the step in microseconds
			Microseconds *int32 `json:"microseconds,omitempty"`

			// Seconds System CPU time used by the step in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"system,omitempty"`
		Total *struct {
			// Microseconds Total CPU time used by the step in microseconds
			Microseconds *int32 `json:"microseconds,omitempty"`

			// Seconds Total CPU time used by the step in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"total,omitempty"`
		User *struct {
			// Microseconds User CPU time used by the step in microseconds
			Microseconds *int32 `json:"microseconds,omitempty"`

			// Seconds User CPU time used by the step in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"user,omitempty"`
	} `json:"time,omitempty"`
	Tres *struct {
		Allocated *V0040TresList `json:"allocated,omitempty"`
		Consumed  *struct {
			Average *V0040TresList         `json:"average,omitempty"`
			Max     *V0040StepTresUsageMax `json:"max,omitempty"`
			Min     *V0040StepTresUsageMin `json:"min,omitempty"`
			Total   *V0040TresList         `json:"total,omitempty"`
		} `json:"consumed,omitempty"`
		Requested *struct {
			Average *V0040TresList       `json:"average,omitempty"`
			Max     *V0040StepTresReqMax `json:"max,omitempty"`
			Min     *V0040StepTresReqMin `json:"min,omitempty"`
			Total   *V0040TresList       `json:"total,omitempty"`
		} `json:"requested,omitempty"`
	} `json:"tres,omitempty"`
}

// V0040StepState defines model for V0040Step.State.
type V0040StepState string

// V0040StepList defines model for v0.0.40_step_list.
type V0040StepList = []V0040Step

// V0040StepTresReqMax defines model for v0.0.40_step_tres_req_max.
type V0040StepTresReqMax = []V0040Tres

// V0040StepTresReqMin defines model for v0.0.40_step_tres_req_min.
type V0040StepTresReqMin = []V0040Tres

// V0040StepTresUsageMax defines model for v0.0.40_step_tres_usage_max.
type V0040StepTresUsageMax = []V0040Tres

// V0040StepTresUsageMin defines model for v0.0.40_step_tres_usage_min.
type V0040StepTresUsageMin = []V0040Tres

// V0040StringArray defines model for v0.0.40_string_array.
type V0040StringArray = []string

// V0040StringList defines model for v0.0.40_string_list.
type V0040StringList = []string

// V0040Tres defines model for v0.0.40_tres.
type V0040Tres struct {
	// Count TRES count (0 if listed generically)
	Count *int64 `json:"count,omitempty"`

	// Id ID used in database
	Id *int32 `json:"id,omitempty"`

	// Name TRES name (if applicable)
	Name *string `json:"name,omitempty"`

	// Type TRES type (CPU, MEM, etc)
	Type string `json:"type"`
}

// V0040TresList defines model for v0.0.40_tres_list.
type V0040TresList = []V0040Tres

// V0040Uint16NoVal Integer number with flags
type V0040Uint16NoVal struct {
	// Infinite True if number has been set to infinite. "set" and "number" will be ignored.
	Infinite *bool `json:"infinite,omitempty"`

	// Number If set is True the number will be set with value. Otherwise ignore number contents.
	Number *int64 `json:"number,omitempty"`

	// Set True if number has been set. False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0040Uint32NoVal Integer number with flags
type V0040Uint32NoVal struct {
	// Infinite True if number has been set to infinite. "set" and "number" will be ignored.
	Infinite *bool `json:"infinite,omitempty"`

	// Number If set is True the number will be set with value. Otherwise ignore number contents.
	Number *int64 `json:"number,omitempty"`

	// Set True if number has been set. False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0040Uint64NoVal Integer number with flags
type V0040Uint64NoVal struct {
	// Infinite True if number has been set to infinite. "set" and "number" will be ignored.
	Infinite *bool `json:"infinite,omitempty"`

	// Number If set is True the number will be set with value. Otherwise ignore number contents.
	Number *int64 `json:"number,omitempty"`

	// Set True if number has been set. False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0040UpdateNodeMsg defines model for v0.0.40_update_node_msg.
type V0040UpdateNodeMsg struct {
	Address *V0040HostlistString `json:"address,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// CpuBind Default method for binding tasks to allocated CPUs
	CpuBind *int32 `json:"cpu_bind,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra       *string         `json:"extra,omitempty"`
	Features    *V0040CsvString `json:"features,omitempty"`
	FeaturesAct *V0040CsvString `json:"features_act,omitempty"`

	// Gres Generic resources
	Gres     *string              `json:"gres,omitempty"`
	Hostname *V0040HostlistString `json:"hostname,omitempty"`
	Name     *V0040HostlistString `json:"name,omitempty"`

	// Reason Reason for node being DOWN or DRAINING
	Reason *string `json:"reason,omitempty"`

	// ReasonUid User ID to associate with the reason (needed if user root is sending message)
	ReasonUid *string `json:"reason_uid,omitempty"`

	// ResumeAfter Integer number with flags
	ResumeAfter *V0040Uint32NoVal `json:"resume_after,omitempty"`

	// State New state to assign to the node
	State *[]V0040UpdateNodeMsgState `json:"state,omitempty"`

	// Weight Integer number with flags
	Weight *V0040Uint32NoVal `json:"weight,omitempty"`
}

// V0040UpdateNodeMsgState defines model for V0040UpdateNodeMsg.State.
type V0040UpdateNodeMsgState string

// V0040User defines model for v0.0.40_user.
type V0040User struct {
	// AdministratorLevel AdminLevel granted to the user
	AdministratorLevel *[]V0040UserAdministratorLevel `json:"administrator_level,omitempty"`
	Associations       *V0040AssocShortList           `json:"associations,omitempty"`
	Coordinators       *V0040CoordList                `json:"coordinators,omitempty"`
	Default            *struct {
		// Account Default Account
		Account *string `json:"account,omitempty"`

		// Wckey Default WCKey
		Wckey *string `json:"wckey,omitempty"`
	} `json:"default,omitempty"`

	// Flags Flags associated with user
	Flags *[]V0040UserFlags `json:"flags,omitempty"`

	// Name User name
	Name string `json:"name"`

	// OldName Previous user name
	OldName *string         `json:"old_name,omitempty"`
	Wckeys  *V0040WckeyList `json:"wckeys,omitempty"`
}

// V0040UserAdministratorLevel defines model for V0040User.AdministratorLevel.
type V0040UserAdministratorLevel string

// V0040UserFlags defines model for V0040User.Flags.
type V0040UserFlags string

// V0040UserList defines model for v0.0.40_user_list.
type V0040UserList = []V0040User

// V0040UserShort defines model for v0.0.40_user_short.
type V0040UserShort struct {
	// Adminlevel AdminLevel granted to the user
	Adminlevel *[]V0040UserShortAdminlevel `json:"adminlevel,omitempty"`

	// Defaultaccount Default account
	Defaultaccount *string `json:"defaultaccount,omitempty"`

	// Defaultwckey Default WCKey
	Defaultwckey *string `json:"defaultwckey,omitempty"`
}

// V0040UserShortAdminlevel defines model for V0040UserShort.Adminlevel.
type V0040UserShortAdminlevel string

// V0040UsersAddCond defines model for v0.0.40_users_add_cond.
type V0040UsersAddCond struct {
	Accounts    *V0040StringList  `json:"accounts,omitempty"`
	Association *V0040AssocRecSet `json:"association,omitempty"`
	Clusters    *V0040StringList  `json:"clusters,omitempty"`
	Partitions  *V0040StringList  `json:"partitions,omitempty"`
	Users       V0040StringList   `json:"users"`
	Wckeys      *V0040StringList  `json:"wckeys,omitempty"`
}

// V0040Wckey defines model for v0.0.40_wckey.
type V0040Wckey struct {
	Accounting *V0040AccountingList `json:"accounting,omitempty"`

	// Cluster Cluster name
	Cluster string `json:"cluster"`

	// Flags Flags associated with the WCKey
	Flags *[]V0040WckeyFlags `json:"flags,omitempty"`

	// Id Unique ID for this user-cluster-wckey combination
	Id *int32 `json:"id,omitempty"`

	// Name WCKey name
	Name string `json:"name"`

	// User User name
	User string `json:"user"`
}

// V0040WckeyFlags defines model for V0040Wckey.Flags.
type V0040WckeyFlags string

// V0040WckeyList defines model for v0.0.40_wckey_list.
type V0040WckeyList = []V0040Wckey

// V0040WckeyTagStruct defines model for v0.0.40_wckey_tag_struct.
type V0040WckeyTagStruct struct {
	// Flags Active flags
	Flags []V0040WckeyTagStructFlags `json:"flags"`

	// Wckey WCKey name
	Wckey string `json:"wckey"`
}

// V0040WckeyTagStructFlags defines model for V0040WckeyTagStruct.Flags.
type V0040WckeyTagStructFlags string

// SlurmV0040DeleteJobParams defines parameters for SlurmV0040DeleteJob.
type SlurmV0040DeleteJobParams struct {
	// Signal Signal to send to Job
	Signal *string `form:"signal,omitempty" json:"signal,omitempty"`

	// Flags Signalling flags
	Flags *SlurmV0040DeleteJobParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0040DeleteJobParamsFlags defines parameters for SlurmV0040DeleteJob.
type SlurmV0040DeleteJobParamsFlags string

// SlurmV0040GetJobParams defines parameters for SlurmV0040GetJob.
type SlurmV0040GetJobParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0040GetJobParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0040GetJobParamsFlags defines parameters for SlurmV0040GetJob.
type SlurmV0040GetJobParamsFlags string

// SlurmV0040GetJobsParams defines parameters for SlurmV0040GetJobs.
type SlurmV0040GetJobsParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0040GetJobsParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0040GetJobsParamsFlags defines parameters for SlurmV0040GetJobs.
type SlurmV0040GetJobsParamsFlags string

// SlurmV0040GetJobsStateParams defines parameters for SlurmV0040GetJobsState.
type SlurmV0040GetJobsStateParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0040GetJobsStateParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0040GetJobsStateParamsFlags defines parameters for SlurmV0040GetJobsState.
type SlurmV0040GetJobsStateParamsFlags string

// SlurmV0040GetNodeParams defines parameters for SlurmV0040GetNode.
type SlurmV0040GetNodeParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0040GetNodeParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0040GetNodeParamsFlags defines parameters for SlurmV0040GetNode.
type SlurmV0040GetNodeParamsFlags string

// SlurmV0040GetNodesParams defines parameters for SlurmV0040GetNodes.
type SlurmV0040GetNodesParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0040GetNodesParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0040GetNodesParamsFlags defines parameters for SlurmV0040GetNodes.
type SlurmV0040GetNodesParamsFlags string

// SlurmV0040GetPartitionParams defines parameters for SlurmV0040GetPartition.
type SlurmV0040GetPartitionParams struct {
	// UpdateTime Filter partitions since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0040GetPartitionParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0040GetPartitionParamsFlags defines parameters for SlurmV0040GetPartition.
type SlurmV0040GetPartitionParamsFlags string

// SlurmV0040GetPartitionsParams defines parameters for SlurmV0040GetPartitions.
type SlurmV0040GetPartitionsParams struct {
	// UpdateTime Filter partitions since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0040GetPartitionsParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0040GetPartitionsParamsFlags defines parameters for SlurmV0040GetPartitions.
type SlurmV0040GetPartitionsParamsFlags string

// SlurmV0040GetReservationParams defines parameters for SlurmV0040GetReservation.
type SlurmV0040GetReservationParams struct {
	// UpdateTime Filter reservations since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmV0040GetReservationsParams defines parameters for SlurmV0040GetReservations.
type SlurmV0040GetReservationsParams struct {
	// UpdateTime Filter reservations since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmV0040GetSharesParams defines parameters for SlurmV0040GetShares.
type SlurmV0040GetSharesParams struct {
	// Accounts Accounts to query
	Accounts *string `form:"accounts,omitempty" json:"accounts,omitempty"`

	// Users Users to query
	Users *string `form:"users,omitempty" json:"users,omitempty"`
}

// SlurmdbV0040GetAccountParams defines parameters for SlurmdbV0040GetAccount.
type SlurmdbV0040GetAccountParams struct {
	// WithAssocs Include associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords Include coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithDeleted Include deleted
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0040GetAccountsParams defines parameters for SlurmdbV0040GetAccounts.
type SlurmdbV0040GetAccountsParams struct {
	// Description CSV description list
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// WithAssocs Include associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords Include coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithDeleted Include deleted accounts
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0040DeleteAssociationParams defines parameters for SlurmdbV0040DeleteAssociation.
type SlurmdbV0040DeleteAssociationParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// OnlyDefaults Filter to only defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted associations
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithRawQos Include a raw qos or delta_qos
	WithRawQos *string `form:"with_raw_qos,omitempty" json:"with_raw_qos,omitempty"`

	// WithSubAccts Include sub acct information also
	WithSubAccts *string `form:"with_sub_accts,omitempty" json:"with_sub_accts,omitempty"`

	// WithoutParentInfo Exclude parent id/name
	WithoutParentInfo *string `form:"without_parent_info,omitempty" json:"without_parent_info,omitempty"`

	// WithoutParentLimits Exclude limits from parents
	WithoutParentLimits *string `form:"without_parent_limits,omitempty" json:"without_parent_limits,omitempty"`
}

// SlurmdbV0040GetAssociationParams defines parameters for SlurmdbV0040GetAssociation.
type SlurmdbV0040GetAssociationParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// OnlyDefaults Filter to only defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted associations
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithRawQos Include a raw qos or delta_qos
	WithRawQos *string `form:"with_raw_qos,omitempty" json:"with_raw_qos,omitempty"`

	// WithSubAccts Include sub acct information also
	WithSubAccts *string `form:"with_sub_accts,omitempty" json:"with_sub_accts,omitempty"`

	// WithoutParentInfo Exclude parent id/name
	WithoutParentInfo *string `form:"without_parent_info,omitempty" json:"without_parent_info,omitempty"`

	// WithoutParentLimits Exclude limits from parents
	WithoutParentLimits *string `form:"without_parent_limits,omitempty" json:"without_parent_limits,omitempty"`
}

// SlurmdbV0040DeleteAssociationsParams defines parameters for SlurmdbV0040DeleteAssociations.
type SlurmdbV0040DeleteAssociationsParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// OnlyDefaults Filter to only defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted associations
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithRawQos Include a raw qos or delta_qos
	WithRawQos *string `form:"with_raw_qos,omitempty" json:"with_raw_qos,omitempty"`

	// WithSubAccts Include sub acct information also
	WithSubAccts *string `form:"with_sub_accts,omitempty" json:"with_sub_accts,omitempty"`

	// WithoutParentInfo Exclude parent id/name
	WithoutParentInfo *string `form:"without_parent_info,omitempty" json:"without_parent_info,omitempty"`

	// WithoutParentLimits Exclude limits from parents
	WithoutParentLimits *string `form:"without_parent_limits,omitempty" json:"without_parent_limits,omitempty"`
}

// SlurmdbV0040GetAssociationsParams defines parameters for SlurmdbV0040GetAssociations.
type SlurmdbV0040GetAssociationsParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// OnlyDefaults Filter to only defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted associations
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithRawQos Include a raw qos or delta_qos
	WithRawQos *string `form:"with_raw_qos,omitempty" json:"with_raw_qos,omitempty"`

	// WithSubAccts Include sub acct information also
	WithSubAccts *string `form:"with_sub_accts,omitempty" json:"with_sub_accts,omitempty"`

	// WithoutParentInfo Exclude parent id/name
	WithoutParentInfo *string `form:"without_parent_info,omitempty" json:"without_parent_info,omitempty"`

	// WithoutParentLimits Exclude limits from parents
	WithoutParentLimits *string `form:"without_parent_limits,omitempty" json:"without_parent_limits,omitempty"`
}

// SlurmdbV0040DeleteClusterParams defines parameters for SlurmdbV0040DeleteCluster.
type SlurmdbV0040DeleteClusterParams struct {
	// Classification Type of machine
	Classification *SlurmdbV0040DeleteClusterParamsClassification `form:"classification,omitempty" json:"classification,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Federation CSV federation list
	Federation *string `form:"federation,omitempty" json:"federation,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0040DeleteClusterParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// RpcVersion CSV RPC version list
	RpcVersion *string `form:"rpc_version,omitempty" json:"rpc_version,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// WithDeleted Include deleted clusters
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`
}

// SlurmdbV0040DeleteClusterParamsClassification defines parameters for SlurmdbV0040DeleteCluster.
type SlurmdbV0040DeleteClusterParamsClassification string

// SlurmdbV0040DeleteClusterParamsFlags defines parameters for SlurmdbV0040DeleteCluster.
type SlurmdbV0040DeleteClusterParamsFlags string

// SlurmdbV0040GetClusterParams defines parameters for SlurmdbV0040GetCluster.
type SlurmdbV0040GetClusterParams struct {
	// Classification Type of machine
	Classification *SlurmdbV0040GetClusterParamsClassification `form:"classification,omitempty" json:"classification,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Federation CSV federation list
	Federation *string `form:"federation,omitempty" json:"federation,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0040GetClusterParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// RpcVersion CSV RPC version list
	RpcVersion *string `form:"rpc_version,omitempty" json:"rpc_version,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// WithDeleted Include deleted clusters
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`
}

// SlurmdbV0040GetClusterParamsClassification defines parameters for SlurmdbV0040GetCluster.
type SlurmdbV0040GetClusterParamsClassification string

// SlurmdbV0040GetClusterParamsFlags defines parameters for SlurmdbV0040GetCluster.
type SlurmdbV0040GetClusterParamsFlags string

// SlurmdbV0040GetClustersParams defines parameters for SlurmdbV0040GetClusters.
type SlurmdbV0040GetClustersParams struct {
	// UpdateTime Filter reservations since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmdbV0040PostClustersParams defines parameters for SlurmdbV0040PostClusters.
type SlurmdbV0040PostClustersParams struct {
	// UpdateTime Filter reservations since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmdbV0040GetInstanceParams defines parameters for SlurmdbV0040GetInstance.
type SlurmdbV0040GetInstanceParams struct {
	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Extra CSV extra list
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// InstanceId CSV instance_id list
	InstanceId *string `form:"instance_id,omitempty" json:"instance_id,omitempty"`

	// InstanceType CSV instance_type list
	InstanceType *string `form:"instance_type,omitempty" json:"instance_type,omitempty"`

	// NodeList Ranged node string
	NodeList *string `form:"node_list,omitempty" json:"node_list,omitempty"`

	// TimeEnd Time end (UNIX timestamp)
	TimeEnd *string `form:"time_end,omitempty" json:"time_end,omitempty"`

	// TimeStart Time start (UNIX timestamp)
	TimeStart *string `form:"time_start,omitempty" json:"time_start,omitempty"`
}

// SlurmdbV0040GetInstancesParams defines parameters for SlurmdbV0040GetInstances.
type SlurmdbV0040GetInstancesParams struct {
	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Extra CSV extra list
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// InstanceId CSV instance_id list
	InstanceId *string `form:"instance_id,omitempty" json:"instance_id,omitempty"`

	// InstanceType CSV instance_type list
	InstanceType *string `form:"instance_type,omitempty" json:"instance_type,omitempty"`

	// NodeList Ranged node string
	NodeList *string `form:"node_list,omitempty" json:"node_list,omitempty"`

	// TimeEnd Time end (UNIX timestamp)
	TimeEnd *string `form:"time_end,omitempty" json:"time_end,omitempty"`

	// TimeStart Time start (UNIX timestamp)
	TimeStart *string `form:"time_start,omitempty" json:"time_start,omitempty"`
}

// SlurmdbV0040GetJobsParams defines parameters for SlurmdbV0040GetJobs.
type SlurmdbV0040GetJobsParams struct {
	// Account CSV account list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Association CSV association list
	Association *string `form:"association,omitempty" json:"association,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Constraints CSV constraint list
	Constraints *string `form:"constraints,omitempty" json:"constraints,omitempty"`

	// CpusMax Maximum number of cpus
	CpusMax *string `form:"cpus_max,omitempty" json:"cpus_max,omitempty"`

	// CpusMin Minimum number of cpus
	CpusMin *string `form:"cpus_min,omitempty" json:"cpus_min,omitempty"`

	// SchedulerUnset Schedule bits not set
	SchedulerUnset *string `form:"scheduler_unset,omitempty" json:"scheduler_unset,omitempty"`

	// ScheduledOnSubmit Job was started on submit
	ScheduledOnSubmit *string `form:"scheduled_on_submit,omitempty" json:"scheduled_on_submit,omitempty"`

	// ScheduledByMain Job was started from main scheduler
	ScheduledByMain *string `form:"scheduled_by_main,omitempty" json:"scheduled_by_main,omitempty"`

	// ScheduledByBackfill Job was started from backfill
	ScheduledByBackfill *string `form:"scheduled_by_backfill,omitempty" json:"scheduled_by_backfill,omitempty"`

	// JobStarted Job start RPC was received
	JobStarted *string `form:"job_started,omitempty" json:"job_started,omitempty"`

	// ExitCode Job exit code (numeric)
	ExitCode *string `form:"exit_code,omitempty" json:"exit_code,omitempty"`

	// ShowDuplicates Include duplicate job entries
	ShowDuplicates *string `form:"show_duplicates,omitempty" json:"show_duplicates,omitempty"`

	// SkipSteps Exclude job step details
	SkipSteps *string `form:"skip_steps,omitempty" json:"skip_steps,omitempty"`

	// DisableTruncateUsageTime Do not truncate the time to usage_start and usage_end
	DisableTruncateUsageTime *string `form:"disable_truncate_usage_time,omitempty" json:"disable_truncate_usage_time,omitempty"`

	// WholeHetjob Include details on all hetjob components
	WholeHetjob *string `form:"whole_hetjob,omitempty" json:"whole_hetjob,omitempty"`

	// DisableWholeHetjob Only show details on specified hetjob components
	DisableWholeHetjob *string `form:"disable_whole_hetjob,omitempty" json:"disable_whole_hetjob,omitempty"`

	// DisableWaitForResult Tell dbd not to wait for the result
	DisableWaitForResult *string `form:"disable_wait_for_result,omitempty" json:"disable_wait_for_result,omitempty"`

	// UsageTimeAsSubmitTime Use usage_time as the submit_time of the job
	UsageTimeAsSubmitTime *string `form:"usage_time_as_submit_time,omitempty" json:"usage_time_as_submit_time,omitempty"`

	// ShowBatchScript Include job script
	ShowBatchScript *string `form:"show_batch_script,omitempty" json:"show_batch_script,omitempty"`

	// ShowJobEnvironment Include job environment
	ShowJobEnvironment *string `form:"show_job_environment,omitempty" json:"show_job_environment,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Groups CSV group list
	Groups *string `form:"groups,omitempty" json:"groups,omitempty"`

	// JobName CSV job name list
	JobName *string `form:"job_name,omitempty" json:"job_name,omitempty"`

	// NodesMax Maximum number of nodes
	NodesMax *string `form:"nodes_max,omitempty" json:"nodes_max,omitempty"`

	// NodesMin Minimum number of nodes
	NodesMin *string `form:"nodes_min,omitempty" json:"nodes_min,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS name list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// Reason CSV reason list
	Reason *string `form:"reason,omitempty" json:"reason,omitempty"`

	// Reservation CSV reservation name list
	Reservation *string `form:"reservation,omitempty" json:"reservation,omitempty"`

	// ReservationId CSV reservation ID list
	ReservationId *string `form:"reservation_id,omitempty" json:"reservation_id,omitempty"`

	// State CSV state list
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Step CSV step id list
	Step *string `form:"step,omitempty" json:"step,omitempty"`

	// TimelimitMax Maximum timelimit (seconds)
	TimelimitMax *string `form:"timelimit_max,omitempty" json:"timelimit_max,omitempty"`

	// TimelimitMin Minimum timelimit (seconds)
	TimelimitMin *string `form:"timelimit_min,omitempty" json:"timelimit_min,omitempty"`

	// EndTime Usage end (UNIX timestamp)
	EndTime *string `form:"end_time,omitempty" json:"end_time,omitempty"`

	// StartTime Usage start (UNIX timestamp)
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty"`

	// SubmitTime Submit time (UNIX timestamp)
	SubmitTime *string `form:"submit_time,omitempty" json:"submit_time,omitempty"`

	// Node Ranged node string where jobs ran
	Node *string `form:"node,omitempty" json:"node,omitempty"`

	// Users CSV user name list
	Users *string `form:"users,omitempty" json:"users,omitempty"`

	// Wckey CSV wckey list
	Wckey *string `form:"wckey,omitempty" json:"wckey,omitempty"`
}

// SlurmdbV0040GetQosParams defines parameters for SlurmdbV0040GetQos.
type SlurmdbV0040GetQosParams struct {
	// Description CSV description list
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Id CSV QOS id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Name CSV QOS name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PreemptMode PreemptMode used when jobs in this QOS are preempted
	PreemptMode *SlurmdbV0040GetQosParamsPreemptMode `form:"preempt_mode,omitempty" json:"preempt_mode,omitempty"`

	// WithDeleted Include deleted QOS
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0040GetQosParamsPreemptMode defines parameters for SlurmdbV0040GetQos.
type SlurmdbV0040GetQosParamsPreemptMode string

// SlurmdbV0040PostQosParams defines parameters for SlurmdbV0040PostQos.
type SlurmdbV0040PostQosParams struct {
	// Description CSV description list
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Id CSV QOS id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Name CSV QOS name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PreemptMode PreemptMode used when jobs in this QOS are preempted
	PreemptMode *SlurmdbV0040PostQosParamsPreemptMode `form:"preempt_mode,omitempty" json:"preempt_mode,omitempty"`

	// WithDeleted Include deleted QOS
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0040PostQosParamsPreemptMode defines parameters for SlurmdbV0040PostQos.
type SlurmdbV0040PostQosParamsPreemptMode string

// SlurmdbV0040GetSingleQosParams defines parameters for SlurmdbV0040GetSingleQos.
type SlurmdbV0040GetSingleQosParams struct {
	// WithDeleted Query includes deleted QOS
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0040GetUserParams defines parameters for SlurmdbV0040GetUser.
type SlurmdbV0040GetUserParams struct {
	// WithDeleted Include deleted users
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithAssocs Include associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords Include coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithWckeys Include wckeys
	WithWckeys *string `form:"with_wckeys,omitempty" json:"with_wckeys,omitempty"`
}

// SlurmdbV0040GetUsersParams defines parameters for SlurmdbV0040GetUsers.
type SlurmdbV0040GetUsersParams struct {
	// AdminLevel Administrator level
	AdminLevel *SlurmdbV0040GetUsersParamsAdminLevel `form:"admin_level,omitempty" json:"admin_level,omitempty"`

	// DefaultAccount CSV default account list
	DefaultAccount *string `form:"default_account,omitempty" json:"default_account,omitempty"`

	// DefaultWckey CSV default wckey list
	DefaultWckey *string `form:"default_wckey,omitempty" json:"default_wckey,omitempty"`

	// WithAssocs With associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords With coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithDeleted With deleted
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithWckeys With wckeys
	WithWckeys *string `form:"with_wckeys,omitempty" json:"with_wckeys,omitempty"`

	// WithoutDefaults Exclude defaults
	WithoutDefaults *string `form:"without_defaults,omitempty" json:"without_defaults,omitempty"`
}

// SlurmdbV0040GetUsersParamsAdminLevel defines parameters for SlurmdbV0040GetUsers.
type SlurmdbV0040GetUsersParamsAdminLevel string

// SlurmdbV0040PostUsersAssociationParams defines parameters for SlurmdbV0040PostUsersAssociation.
type SlurmdbV0040PostUsersAssociationParams struct {
	// UpdateTime Filter partitions since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0040PostUsersAssociationParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmdbV0040PostUsersAssociationParamsFlags defines parameters for SlurmdbV0040PostUsersAssociation.
type SlurmdbV0040PostUsersAssociationParamsFlags string

// SlurmdbV0040GetWckeysParams defines parameters for SlurmdbV0040GetWckeys.
type SlurmdbV0040GetWckeysParams struct {
	// Cluster CSV cluster name list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Format CSV format name list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name CSV name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// OnlyDefaults Only query defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted wckeys
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0040PostWckeysParams defines parameters for SlurmdbV0040PostWckeys.
type SlurmdbV0040PostWckeysParams struct {
	// Cluster CSV cluster name list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Format CSV format name list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name CSV name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// OnlyDefaults Only query defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted wckeys
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmV0040PostJobSubmitJSONRequestBody defines body for SlurmV0040PostJobSubmit for application/json ContentType.
type SlurmV0040PostJobSubmitJSONRequestBody = V0040JobSubmitReq

// SlurmV0040PostJobJSONRequestBody defines body for SlurmV0040PostJob for application/json ContentType.
type SlurmV0040PostJobJSONRequestBody = V0040JobDescMsg

// SlurmV0040DeleteJobsJSONRequestBody defines body for SlurmV0040DeleteJobs for application/json ContentType.
type SlurmV0040DeleteJobsJSONRequestBody = V0040KillJobsMsg

// SlurmV0040PostNodeJSONRequestBody defines body for SlurmV0040PostNode for application/json ContentType.
type SlurmV0040PostNodeJSONRequestBody = V0040UpdateNodeMsg

// SlurmdbV0040PostAccountsJSONRequestBody defines body for SlurmdbV0040PostAccounts for application/json ContentType.
type SlurmdbV0040PostAccountsJSONRequestBody = V0040OpenapiAccountsResp

// SlurmdbV0040PostAccountsAssociationJSONRequestBody defines body for SlurmdbV0040PostAccountsAssociation for application/json ContentType.
type SlurmdbV0040PostAccountsAssociationJSONRequestBody = V0040OpenapiAccountsAddCondResp

// SlurmdbV0040PostAssociationsJSONRequestBody defines body for SlurmdbV0040PostAssociations for application/json ContentType.
type SlurmdbV0040PostAssociationsJSONRequestBody = V0040OpenapiAssocsResp

// SlurmdbV0040PostClustersJSONRequestBody defines body for SlurmdbV0040PostClusters for application/json ContentType.
type SlurmdbV0040PostClustersJSONRequestBody = V0040OpenapiClustersResp

// SlurmdbV0040PostConfigJSONRequestBody defines body for SlurmdbV0040PostConfig for application/json ContentType.
type SlurmdbV0040PostConfigJSONRequestBody = V0040OpenapiSlurmdbdConfigResp

// SlurmdbV0040PostQosJSONRequestBody defines body for SlurmdbV0040PostQos for application/json ContentType.
type SlurmdbV0040PostQosJSONRequestBody = V0040OpenapiSlurmdbdQosResp

// SlurmdbV0040PostTresJSONRequestBody defines body for SlurmdbV0040PostTres for application/json ContentType.
type SlurmdbV0040PostTresJSONRequestBody = V0040OpenapiTresResp

// SlurmdbV0040PostUsersJSONRequestBody defines body for SlurmdbV0040PostUsers for application/json ContentType.
type SlurmdbV0040PostUsersJSONRequestBody = V0040OpenapiUsersResp

// SlurmdbV0040PostUsersAssociationJSONRequestBody defines body for SlurmdbV0040PostUsersAssociation for application/json ContentType.
type SlurmdbV0040PostUsersAssociationJSONRequestBody = V0040OpenapiUsersAddCondResp

// SlurmdbV0040PostWckeysJSONRequestBody defines body for SlurmdbV0040PostWckeys for application/json ContentType.
type SlurmdbV0040PostWckeysJSONRequestBody = V0040OpenapiWckeyResp

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SlurmV0040GetDiag request
	SlurmV0040GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040PostJobSubmitWithBody request with any body
	SlurmV0040PostJobSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0040PostJobSubmit(ctx context.Context, body SlurmV0040PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040DeleteJob request
	SlurmV0040DeleteJob(ctx context.Context, jobId string, params *SlurmV0040DeleteJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetJob request
	SlurmV0040GetJob(ctx context.Context, jobId string, params *SlurmV0040GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040PostJobWithBody request with any body
	SlurmV0040PostJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0040PostJob(ctx context.Context, jobId string, body SlurmV0040PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040DeleteJobsWithBody request with any body
	SlurmV0040DeleteJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0040DeleteJobs(ctx context.Context, body SlurmV0040DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetJobs request
	SlurmV0040GetJobs(ctx context.Context, params *SlurmV0040GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetJobsState request
	SlurmV0040GetJobsState(ctx context.Context, params *SlurmV0040GetJobsStateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetLicenses request
	SlurmV0040GetLicenses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040DeleteNode request
	SlurmV0040DeleteNode(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetNode request
	SlurmV0040GetNode(ctx context.Context, nodeName string, params *SlurmV0040GetNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040PostNodeWithBody request with any body
	SlurmV0040PostNodeWithBody(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0040PostNode(ctx context.Context, nodeName string, body SlurmV0040PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetNodes request
	SlurmV0040GetNodes(ctx context.Context, params *SlurmV0040GetNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetPartition request
	SlurmV0040GetPartition(ctx context.Context, partitionName string, params *SlurmV0040GetPartitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetPartitions request
	SlurmV0040GetPartitions(ctx context.Context, params *SlurmV0040GetPartitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetPing request
	SlurmV0040GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetReconfigure request
	SlurmV0040GetReconfigure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetReservation request
	SlurmV0040GetReservation(ctx context.Context, reservationName string, params *SlurmV0040GetReservationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetReservations request
	SlurmV0040GetReservations(ctx context.Context, params *SlurmV0040GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0040GetShares request
	SlurmV0040GetShares(ctx context.Context, params *SlurmV0040GetSharesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040DeleteAccount request
	SlurmdbV0040DeleteAccount(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetAccount request
	SlurmdbV0040GetAccount(ctx context.Context, accountName string, params *SlurmdbV0040GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetAccounts request
	SlurmdbV0040GetAccounts(ctx context.Context, params *SlurmdbV0040GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostAccountsWithBody request with any body
	SlurmdbV0040PostAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostAccounts(ctx context.Context, body SlurmdbV0040PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostAccountsAssociationWithBody request with any body
	SlurmdbV0040PostAccountsAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostAccountsAssociation(ctx context.Context, body SlurmdbV0040PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040DeleteAssociation request
	SlurmdbV0040DeleteAssociation(ctx context.Context, params *SlurmdbV0040DeleteAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetAssociation request
	SlurmdbV0040GetAssociation(ctx context.Context, params *SlurmdbV0040GetAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040DeleteAssociations request
	SlurmdbV0040DeleteAssociations(ctx context.Context, params *SlurmdbV0040DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetAssociations request
	SlurmdbV0040GetAssociations(ctx context.Context, params *SlurmdbV0040GetAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostAssociationsWithBody request with any body
	SlurmdbV0040PostAssociationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostAssociations(ctx context.Context, body SlurmdbV0040PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040DeleteCluster request
	SlurmdbV0040DeleteCluster(ctx context.Context, clusterName string, params *SlurmdbV0040DeleteClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetCluster request
	SlurmdbV0040GetCluster(ctx context.Context, clusterName string, params *SlurmdbV0040GetClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetClusters request
	SlurmdbV0040GetClusters(ctx context.Context, params *SlurmdbV0040GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostClustersWithBody request with any body
	SlurmdbV0040PostClustersWithBody(ctx context.Context, params *SlurmdbV0040PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostClusters(ctx context.Context, params *SlurmdbV0040PostClustersParams, body SlurmdbV0040PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetConfig request
	SlurmdbV0040GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostConfigWithBody request with any body
	SlurmdbV0040PostConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostConfig(ctx context.Context, body SlurmdbV0040PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetDiag request
	SlurmdbV0040GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetInstance request
	SlurmdbV0040GetInstance(ctx context.Context, params *SlurmdbV0040GetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetInstances request
	SlurmdbV0040GetInstances(ctx context.Context, params *SlurmdbV0040GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetJob request
	SlurmdbV0040GetJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetJobs request
	SlurmdbV0040GetJobs(ctx context.Context, params *SlurmdbV0040GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetQos request
	SlurmdbV0040GetQos(ctx context.Context, params *SlurmdbV0040GetQosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostQosWithBody request with any body
	SlurmdbV0040PostQosWithBody(ctx context.Context, params *SlurmdbV0040PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostQos(ctx context.Context, params *SlurmdbV0040PostQosParams, body SlurmdbV0040PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040DeleteSingleQos request
	SlurmdbV0040DeleteSingleQos(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetSingleQos request
	SlurmdbV0040GetSingleQos(ctx context.Context, qos string, params *SlurmdbV0040GetSingleQosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetTres request
	SlurmdbV0040GetTres(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostTresWithBody request with any body
	SlurmdbV0040PostTresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostTres(ctx context.Context, body SlurmdbV0040PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040DeleteUser request
	SlurmdbV0040DeleteUser(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetUser request
	SlurmdbV0040GetUser(ctx context.Context, name string, params *SlurmdbV0040GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetUsers request
	SlurmdbV0040GetUsers(ctx context.Context, params *SlurmdbV0040GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostUsersWithBody request with any body
	SlurmdbV0040PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostUsers(ctx context.Context, body SlurmdbV0040PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostUsersAssociationWithBody request with any body
	SlurmdbV0040PostUsersAssociationWithBody(ctx context.Context, params *SlurmdbV0040PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostUsersAssociation(ctx context.Context, params *SlurmdbV0040PostUsersAssociationParams, body SlurmdbV0040PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040DeleteWckey request
	SlurmdbV0040DeleteWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetWckey request
	SlurmdbV0040GetWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040GetWckeys request
	SlurmdbV0040GetWckeys(ctx context.Context, params *SlurmdbV0040GetWckeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0040PostWckeysWithBody request with any body
	SlurmdbV0040PostWckeysWithBody(ctx context.Context, params *SlurmdbV0040PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0040PostWckeys(ctx context.Context, params *SlurmdbV0040PostWckeysParams, body SlurmdbV0040PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SlurmV0040GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetDiagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040PostJobSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040PostJobSubmitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040PostJobSubmit(ctx context.Context, body SlurmV0040PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040PostJobSubmitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040DeleteJob(ctx context.Context, jobId string, params *SlurmV0040DeleteJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040DeleteJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetJob(ctx context.Context, jobId string, params *SlurmV0040GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040PostJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040PostJobRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040PostJob(ctx context.Context, jobId string, body SlurmV0040PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040PostJobRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040DeleteJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040DeleteJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040DeleteJobs(ctx context.Context, body SlurmV0040DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040DeleteJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetJobs(ctx context.Context, params *SlurmV0040GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetJobsState(ctx context.Context, params *SlurmV0040GetJobsStateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetJobsStateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetLicenses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetLicensesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040DeleteNode(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040DeleteNodeRequest(c.Server, nodeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetNode(ctx context.Context, nodeName string, params *SlurmV0040GetNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetNodeRequest(c.Server, nodeName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040PostNodeWithBody(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040PostNodeRequestWithBody(c.Server, nodeName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040PostNode(ctx context.Context, nodeName string, body SlurmV0040PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040PostNodeRequest(c.Server, nodeName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetNodes(ctx context.Context, params *SlurmV0040GetNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetNodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetPartition(ctx context.Context, partitionName string, params *SlurmV0040GetPartitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetPartitionRequest(c.Server, partitionName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetPartitions(ctx context.Context, params *SlurmV0040GetPartitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetPartitionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetReconfigure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetReconfigureRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetReservation(ctx context.Context, reservationName string, params *SlurmV0040GetReservationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetReservationRequest(c.Server, reservationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetReservations(ctx context.Context, params *SlurmV0040GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetReservationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0040GetShares(ctx context.Context, params *SlurmV0040GetSharesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0040GetSharesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040DeleteAccount(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040DeleteAccountRequest(c.Server, accountName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetAccount(ctx context.Context, accountName string, params *SlurmdbV0040GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetAccountRequest(c.Server, accountName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetAccounts(ctx context.Context, params *SlurmdbV0040GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostAccounts(ctx context.Context, body SlurmdbV0040PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostAccountsAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostAccountsAssociationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostAccountsAssociation(ctx context.Context, body SlurmdbV0040PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostAccountsAssociationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040DeleteAssociation(ctx context.Context, params *SlurmdbV0040DeleteAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040DeleteAssociationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetAssociation(ctx context.Context, params *SlurmdbV0040GetAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetAssociationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040DeleteAssociations(ctx context.Context, params *SlurmdbV0040DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040DeleteAssociationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetAssociations(ctx context.Context, params *SlurmdbV0040GetAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetAssociationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostAssociationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostAssociationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostAssociations(ctx context.Context, body SlurmdbV0040PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostAssociationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040DeleteCluster(ctx context.Context, clusterName string, params *SlurmdbV0040DeleteClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040DeleteClusterRequest(c.Server, clusterName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetCluster(ctx context.Context, clusterName string, params *SlurmdbV0040GetClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetClusterRequest(c.Server, clusterName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetClusters(ctx context.Context, params *SlurmdbV0040GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostClustersWithBody(ctx context.Context, params *SlurmdbV0040PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostClustersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostClusters(ctx context.Context, params *SlurmdbV0040PostClustersParams, body SlurmdbV0040PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostClustersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostConfig(ctx context.Context, body SlurmdbV0040PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetDiagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetInstance(ctx context.Context, params *SlurmdbV0040GetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetInstanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetInstances(ctx context.Context, params *SlurmdbV0040GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetJobRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetJobs(ctx context.Context, params *SlurmdbV0040GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetQos(ctx context.Context, params *SlurmdbV0040GetQosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetQosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostQosWithBody(ctx context.Context, params *SlurmdbV0040PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostQosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostQos(ctx context.Context, params *SlurmdbV0040PostQosParams, body SlurmdbV0040PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostQosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040DeleteSingleQos(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040DeleteSingleQosRequest(c.Server, qos)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetSingleQos(ctx context.Context, qos string, params *SlurmdbV0040GetSingleQosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetSingleQosRequest(c.Server, qos, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetTres(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetTresRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostTresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostTresRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostTres(ctx context.Context, body SlurmdbV0040PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostTresRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040DeleteUser(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040DeleteUserRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetUser(ctx context.Context, name string, params *SlurmdbV0040GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetUserRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetUsers(ctx context.Context, params *SlurmdbV0040GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostUsers(ctx context.Context, body SlurmdbV0040PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostUsersAssociationWithBody(ctx context.Context, params *SlurmdbV0040PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostUsersAssociationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostUsersAssociation(ctx context.Context, params *SlurmdbV0040PostUsersAssociationParams, body SlurmdbV0040PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostUsersAssociationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040DeleteWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040DeleteWckeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetWckeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040GetWckeys(ctx context.Context, params *SlurmdbV0040GetWckeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040GetWckeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostWckeysWithBody(ctx context.Context, params *SlurmdbV0040PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostWckeysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0040PostWckeys(ctx context.Context, params *SlurmdbV0040PostWckeysParams, body SlurmdbV0040PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0040PostWckeysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSlurmV0040GetDiagRequest generates requests for SlurmV0040GetDiag
func NewSlurmV0040GetDiagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/diag/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040PostJobSubmitRequest calls the generic SlurmV0040PostJobSubmit builder with application/json body
func NewSlurmV0040PostJobSubmitRequest(server string, body SlurmV0040PostJobSubmitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0040PostJobSubmitRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0040PostJobSubmitRequestWithBody generates requests for SlurmV0040PostJobSubmit with any type of body
func NewSlurmV0040PostJobSubmitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/job/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0040DeleteJobRequest generates requests for SlurmV0040DeleteJob
func NewSlurmV0040DeleteJobRequest(server string, jobId string, params *SlurmV0040DeleteJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Signal != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "signal", runtime.ParamLocationQuery, *params.Signal); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetJobRequest generates requests for SlurmV0040GetJob
func NewSlurmV0040GetJobRequest(server string, jobId string, params *SlurmV0040GetJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040PostJobRequest calls the generic SlurmV0040PostJob builder with application/json body
func NewSlurmV0040PostJobRequest(server string, jobId string, body SlurmV0040PostJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0040PostJobRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewSlurmV0040PostJobRequestWithBody generates requests for SlurmV0040PostJob with any type of body
func NewSlurmV0040PostJobRequestWithBody(server string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0040DeleteJobsRequest calls the generic SlurmV0040DeleteJobs builder with application/json body
func NewSlurmV0040DeleteJobsRequest(server string, body SlurmV0040DeleteJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0040DeleteJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0040DeleteJobsRequestWithBody generates requests for SlurmV0040DeleteJobs with any type of body
func NewSlurmV0040DeleteJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0040GetJobsRequest generates requests for SlurmV0040GetJobs
func NewSlurmV0040GetJobsRequest(server string, params *SlurmV0040GetJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetJobsStateRequest generates requests for SlurmV0040GetJobsState
func NewSlurmV0040GetJobsStateRequest(server string, params *SlurmV0040GetJobsStateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/jobs/state/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetLicensesRequest generates requests for SlurmV0040GetLicenses
func NewSlurmV0040GetLicensesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/licenses/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040DeleteNodeRequest generates requests for SlurmV0040DeleteNode
func NewSlurmV0040DeleteNodeRequest(server string, nodeName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_name", runtime.ParamLocationPath, nodeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/node/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetNodeRequest generates requests for SlurmV0040GetNode
func NewSlurmV0040GetNodeRequest(server string, nodeName string, params *SlurmV0040GetNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_name", runtime.ParamLocationPath, nodeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/node/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040PostNodeRequest calls the generic SlurmV0040PostNode builder with application/json body
func NewSlurmV0040PostNodeRequest(server string, nodeName string, body SlurmV0040PostNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0040PostNodeRequestWithBody(server, nodeName, "application/json", bodyReader)
}

// NewSlurmV0040PostNodeRequestWithBody generates requests for SlurmV0040PostNode with any type of body
func NewSlurmV0040PostNodeRequestWithBody(server string, nodeName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_name", runtime.ParamLocationPath, nodeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/node/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0040GetNodesRequest generates requests for SlurmV0040GetNodes
func NewSlurmV0040GetNodesRequest(server string, params *SlurmV0040GetNodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/nodes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetPartitionRequest generates requests for SlurmV0040GetPartition
func NewSlurmV0040GetPartitionRequest(server string, partitionName string, params *SlurmV0040GetPartitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partition_name", runtime.ParamLocationPath, partitionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/partition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetPartitionsRequest generates requests for SlurmV0040GetPartitions
func NewSlurmV0040GetPartitionsRequest(server string, params *SlurmV0040GetPartitionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/partitions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetPingRequest generates requests for SlurmV0040GetPing
func NewSlurmV0040GetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/ping/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetReconfigureRequest generates requests for SlurmV0040GetReconfigure
func NewSlurmV0040GetReconfigureRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/reconfigure/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetReservationRequest generates requests for SlurmV0040GetReservation
func NewSlurmV0040GetReservationRequest(server string, reservationName string, params *SlurmV0040GetReservationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reservation_name", runtime.ParamLocationPath, reservationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/reservation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetReservationsRequest generates requests for SlurmV0040GetReservations
func NewSlurmV0040GetReservationsRequest(server string, params *SlurmV0040GetReservationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/reservations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0040GetSharesRequest generates requests for SlurmV0040GetShares
func NewSlurmV0040GetSharesRequest(server string, params *SlurmV0040GetSharesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.40/shares")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Accounts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "accounts", runtime.ParamLocationQuery, *params.Accounts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Users != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "users", runtime.ParamLocationQuery, *params.Users); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040DeleteAccountRequest generates requests for SlurmdbV0040DeleteAccount
func NewSlurmdbV0040DeleteAccountRequest(server string, accountName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_name", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetAccountRequest generates requests for SlurmdbV0040GetAccount
func NewSlurmdbV0040GetAccountRequest(server string, accountName string, params *SlurmdbV0040GetAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_name", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetAccountsRequest generates requests for SlurmdbV0040GetAccounts
func NewSlurmdbV0040GetAccountsRequest(server string, params *SlurmdbV0040GetAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040PostAccountsRequest calls the generic SlurmdbV0040PostAccounts builder with application/json body
func NewSlurmdbV0040PostAccountsRequest(server string, body SlurmdbV0040PostAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0040PostAccountsRequestWithBody generates requests for SlurmdbV0040PostAccounts with any type of body
func NewSlurmdbV0040PostAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0040PostAccountsAssociationRequest calls the generic SlurmdbV0040PostAccountsAssociation builder with application/json body
func NewSlurmdbV0040PostAccountsAssociationRequest(server string, body SlurmdbV0040PostAccountsAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostAccountsAssociationRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0040PostAccountsAssociationRequestWithBody generates requests for SlurmdbV0040PostAccountsAssociation with any type of body
func NewSlurmdbV0040PostAccountsAssociationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/accounts_association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0040DeleteAssociationRequest generates requests for SlurmdbV0040DeleteAssociation
func NewSlurmdbV0040DeleteAssociationRequest(server string, params *SlurmdbV0040DeleteAssociationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithRawQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_raw_qos", runtime.ParamLocationQuery, *params.WithRawQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithSubAccts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_sub_accts", runtime.ParamLocationQuery, *params.WithSubAccts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutParentInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_parent_info", runtime.ParamLocationQuery, *params.WithoutParentInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutParentLimits != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_parent_limits", runtime.ParamLocationQuery, *params.WithoutParentLimits); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetAssociationRequest generates requests for SlurmdbV0040GetAssociation
func NewSlurmdbV0040GetAssociationRequest(server string, params *SlurmdbV0040GetAssociationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithRawQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_raw_qos", runtime.ParamLocationQuery, *params.WithRawQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithSubAccts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_sub_accts", runtime.ParamLocationQuery, *params.WithSubAccts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutParentInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_parent_info", runtime.ParamLocationQuery, *params.WithoutParentInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutParentLimits != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_parent_limits", runtime.ParamLocationQuery, *params.WithoutParentLimits); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040DeleteAssociationsRequest generates requests for SlurmdbV0040DeleteAssociations
func NewSlurmdbV0040DeleteAssociationsRequest(server string, params *SlurmdbV0040DeleteAssociationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/associations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithRawQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_raw_qos", runtime.ParamLocationQuery, *params.WithRawQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithSubAccts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_sub_accts", runtime.ParamLocationQuery, *params.WithSubAccts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutParentInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_parent_info", runtime.ParamLocationQuery, *params.WithoutParentInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutParentLimits != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_parent_limits", runtime.ParamLocationQuery, *params.WithoutParentLimits); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetAssociationsRequest generates requests for SlurmdbV0040GetAssociations
func NewSlurmdbV0040GetAssociationsRequest(server string, params *SlurmdbV0040GetAssociationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/associations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithRawQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_raw_qos", runtime.ParamLocationQuery, *params.WithRawQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithSubAccts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_sub_accts", runtime.ParamLocationQuery, *params.WithSubAccts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutParentInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_parent_info", runtime.ParamLocationQuery, *params.WithoutParentInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutParentLimits != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_parent_limits", runtime.ParamLocationQuery, *params.WithoutParentLimits); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040PostAssociationsRequest calls the generic SlurmdbV0040PostAssociations builder with application/json body
func NewSlurmdbV0040PostAssociationsRequest(server string, body SlurmdbV0040PostAssociationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostAssociationsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0040PostAssociationsRequestWithBody generates requests for SlurmdbV0040PostAssociations with any type of body
func NewSlurmdbV0040PostAssociationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/associations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0040DeleteClusterRequest generates requests for SlurmdbV0040DeleteCluster
func NewSlurmdbV0040DeleteClusterRequest(server string, clusterName string, params *SlurmdbV0040DeleteClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_name", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/cluster/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Classification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "classification", runtime.ParamLocationQuery, *params.Classification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Federation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "federation", runtime.ParamLocationQuery, *params.Federation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RpcVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rpc_version", runtime.ParamLocationQuery, *params.RpcVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetClusterRequest generates requests for SlurmdbV0040GetCluster
func NewSlurmdbV0040GetClusterRequest(server string, clusterName string, params *SlurmdbV0040GetClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_name", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/cluster/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Classification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "classification", runtime.ParamLocationQuery, *params.Classification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Federation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "federation", runtime.ParamLocationQuery, *params.Federation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RpcVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rpc_version", runtime.ParamLocationQuery, *params.RpcVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetClustersRequest generates requests for SlurmdbV0040GetClusters
func NewSlurmdbV0040GetClustersRequest(server string, params *SlurmdbV0040GetClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/clusters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040PostClustersRequest calls the generic SlurmdbV0040PostClusters builder with application/json body
func NewSlurmdbV0040PostClustersRequest(server string, params *SlurmdbV0040PostClustersParams, body SlurmdbV0040PostClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostClustersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0040PostClustersRequestWithBody generates requests for SlurmdbV0040PostClusters with any type of body
func NewSlurmdbV0040PostClustersRequestWithBody(server string, params *SlurmdbV0040PostClustersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/clusters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0040GetConfigRequest generates requests for SlurmdbV0040GetConfig
func NewSlurmdbV0040GetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040PostConfigRequest calls the generic SlurmdbV0040PostConfig builder with application/json body
func NewSlurmdbV0040PostConfigRequest(server string, body SlurmdbV0040PostConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0040PostConfigRequestWithBody generates requests for SlurmdbV0040PostConfig with any type of body
func NewSlurmdbV0040PostConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0040GetDiagRequest generates requests for SlurmdbV0040GetDiag
func NewSlurmdbV0040GetDiagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/diag/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetInstanceRequest generates requests for SlurmdbV0040GetInstance
func NewSlurmdbV0040GetInstanceRequest(server string, params *SlurmdbV0040GetInstanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/instance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extra != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "extra", runtime.ParamLocationQuery, *params.Extra); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_id", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_type", runtime.ParamLocationQuery, *params.InstanceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NodeList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node_list", runtime.ParamLocationQuery, *params.NodeList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_end", runtime.ParamLocationQuery, *params.TimeEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_start", runtime.ParamLocationQuery, *params.TimeStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetInstancesRequest generates requests for SlurmdbV0040GetInstances
func NewSlurmdbV0040GetInstancesRequest(server string, params *SlurmdbV0040GetInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extra != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "extra", runtime.ParamLocationQuery, *params.Extra); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_id", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_type", runtime.ParamLocationQuery, *params.InstanceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NodeList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node_list", runtime.ParamLocationQuery, *params.NodeList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_end", runtime.ParamLocationQuery, *params.TimeEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_start", runtime.ParamLocationQuery, *params.TimeStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetJobRequest generates requests for SlurmdbV0040GetJob
func NewSlurmdbV0040GetJobRequest(server string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetJobsRequest generates requests for SlurmdbV0040GetJobs
func NewSlurmdbV0040GetJobsRequest(server string, params *SlurmdbV0040GetJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Association != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "association", runtime.ParamLocationQuery, *params.Association); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Constraints != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "constraints", runtime.ParamLocationQuery, *params.Constraints); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CpusMax != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cpus_max", runtime.ParamLocationQuery, *params.CpusMax); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CpusMin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cpus_min", runtime.ParamLocationQuery, *params.CpusMin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SchedulerUnset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduler_unset", runtime.ParamLocationQuery, *params.SchedulerUnset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduledOnSubmit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduled_on_submit", runtime.ParamLocationQuery, *params.ScheduledOnSubmit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduledByMain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduled_by_main", runtime.ParamLocationQuery, *params.ScheduledByMain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduledByBackfill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduled_by_backfill", runtime.ParamLocationQuery, *params.ScheduledByBackfill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobStarted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "job_started", runtime.ParamLocationQuery, *params.JobStarted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExitCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "exit_code", runtime.ParamLocationQuery, *params.ExitCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowDuplicates != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "show_duplicates", runtime.ParamLocationQuery, *params.ShowDuplicates); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipSteps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "skip_steps", runtime.ParamLocationQuery, *params.SkipSteps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableTruncateUsageTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "disable_truncate_usage_time", runtime.ParamLocationQuery, *params.DisableTruncateUsageTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WholeHetjob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "whole_hetjob", runtime.ParamLocationQuery, *params.WholeHetjob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableWholeHetjob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "disable_whole_hetjob", runtime.ParamLocationQuery, *params.DisableWholeHetjob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableWaitForResult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "disable_wait_for_result", runtime.ParamLocationQuery, *params.DisableWaitForResult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageTimeAsSubmitTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_time_as_submit_time", runtime.ParamLocationQuery, *params.UsageTimeAsSubmitTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowBatchScript != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "show_batch_script", runtime.ParamLocationQuery, *params.ShowBatchScript); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowJobEnvironment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "show_job_environment", runtime.ParamLocationQuery, *params.ShowJobEnvironment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Groups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "groups", runtime.ParamLocationQuery, *params.Groups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "job_name", runtime.ParamLocationQuery, *params.JobName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NodesMax != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "nodes_max", runtime.ParamLocationQuery, *params.NodesMax); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NodesMin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "nodes_min", runtime.ParamLocationQuery, *params.NodesMin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reason != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reason", runtime.ParamLocationQuery, *params.Reason); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reservation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reservation", runtime.ParamLocationQuery, *params.Reservation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Step != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "step", runtime.ParamLocationQuery, *params.Step); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimelimitMax != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "timelimit_max", runtime.ParamLocationQuery, *params.TimelimitMax); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimelimitMin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "timelimit_min", runtime.ParamLocationQuery, *params.TimelimitMin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubmitTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "submit_time", runtime.ParamLocationQuery, *params.SubmitTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Node != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node", runtime.ParamLocationQuery, *params.Node); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Users != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "users", runtime.ParamLocationQuery, *params.Users); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Wckey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "wckey", runtime.ParamLocationQuery, *params.Wckey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetQosRequest generates requests for SlurmdbV0040GetQos
func NewSlurmdbV0040GetQosRequest(server string, params *SlurmdbV0040GetQosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/qos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreemptMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "preempt_mode", runtime.ParamLocationQuery, *params.PreemptMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040PostQosRequest calls the generic SlurmdbV0040PostQos builder with application/json body
func NewSlurmdbV0040PostQosRequest(server string, params *SlurmdbV0040PostQosParams, body SlurmdbV0040PostQosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostQosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0040PostQosRequestWithBody generates requests for SlurmdbV0040PostQos with any type of body
func NewSlurmdbV0040PostQosRequestWithBody(server string, params *SlurmdbV0040PostQosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/qos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreemptMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "preempt_mode", runtime.ParamLocationQuery, *params.PreemptMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0040DeleteSingleQosRequest generates requests for SlurmdbV0040DeleteSingleQos
func NewSlurmdbV0040DeleteSingleQosRequest(server string, qos string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "qos", runtime.ParamLocationPath, qos)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/qos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetSingleQosRequest generates requests for SlurmdbV0040GetSingleQos
func NewSlurmdbV0040GetSingleQosRequest(server string, qos string, params *SlurmdbV0040GetSingleQosParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "qos", runtime.ParamLocationPath, qos)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/qos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetTresRequest generates requests for SlurmdbV0040GetTres
func NewSlurmdbV0040GetTresRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/tres/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040PostTresRequest calls the generic SlurmdbV0040PostTres builder with application/json body
func NewSlurmdbV0040PostTresRequest(server string, body SlurmdbV0040PostTresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostTresRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0040PostTresRequestWithBody generates requests for SlurmdbV0040PostTres with any type of body
func NewSlurmdbV0040PostTresRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/tres/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0040DeleteUserRequest generates requests for SlurmdbV0040DeleteUser
func NewSlurmdbV0040DeleteUserRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetUserRequest generates requests for SlurmdbV0040GetUser
func NewSlurmdbV0040GetUserRequest(server string, name string, params *SlurmdbV0040GetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithWckeys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_wckeys", runtime.ParamLocationQuery, *params.WithWckeys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetUsersRequest generates requests for SlurmdbV0040GetUsers
func NewSlurmdbV0040GetUsersRequest(server string, params *SlurmdbV0040GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdminLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "admin_level", runtime.ParamLocationQuery, *params.AdminLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_account", runtime.ParamLocationQuery, *params.DefaultAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultWckey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_wckey", runtime.ParamLocationQuery, *params.DefaultWckey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithWckeys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_wckeys", runtime.ParamLocationQuery, *params.WithWckeys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_defaults", runtime.ParamLocationQuery, *params.WithoutDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040PostUsersRequest calls the generic SlurmdbV0040PostUsers builder with application/json body
func NewSlurmdbV0040PostUsersRequest(server string, body SlurmdbV0040PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0040PostUsersRequestWithBody generates requests for SlurmdbV0040PostUsers with any type of body
func NewSlurmdbV0040PostUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0040PostUsersAssociationRequest calls the generic SlurmdbV0040PostUsersAssociation builder with application/json body
func NewSlurmdbV0040PostUsersAssociationRequest(server string, params *SlurmdbV0040PostUsersAssociationParams, body SlurmdbV0040PostUsersAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostUsersAssociationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0040PostUsersAssociationRequestWithBody generates requests for SlurmdbV0040PostUsersAssociation with any type of body
func NewSlurmdbV0040PostUsersAssociationRequestWithBody(server string, params *SlurmdbV0040PostUsersAssociationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/users_association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0040DeleteWckeyRequest generates requests for SlurmdbV0040DeleteWckey
func NewSlurmdbV0040DeleteWckeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/wckey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetWckeyRequest generates requests for SlurmdbV0040GetWckey
func NewSlurmdbV0040GetWckeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/wckey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040GetWckeysRequest generates requests for SlurmdbV0040GetWckeys
func NewSlurmdbV0040GetWckeysRequest(server string, params *SlurmdbV0040GetWckeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/wckeys/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0040PostWckeysRequest calls the generic SlurmdbV0040PostWckeys builder with application/json body
func NewSlurmdbV0040PostWckeysRequest(server string, params *SlurmdbV0040PostWckeysParams, body SlurmdbV0040PostWckeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0040PostWckeysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0040PostWckeysRequestWithBody generates requests for SlurmdbV0040PostWckeys with any type of body
func NewSlurmdbV0040PostWckeysRequestWithBody(server string, params *SlurmdbV0040PostWckeysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.40/wckeys/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SlurmV0040GetDiagWithResponse request
	SlurmV0040GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0040GetDiagResponse, error)

	// SlurmV0040PostJobSubmitWithBodyWithResponse request with any body
	SlurmV0040PostJobSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0040PostJobSubmitResponse, error)

	SlurmV0040PostJobSubmitWithResponse(ctx context.Context, body SlurmV0040PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0040PostJobSubmitResponse, error)

	// SlurmV0040DeleteJobWithResponse request
	SlurmV0040DeleteJobWithResponse(ctx context.Context, jobId string, params *SlurmV0040DeleteJobParams, reqEditors ...RequestEditorFn) (*SlurmV0040DeleteJobResponse, error)

	// SlurmV0040GetJobWithResponse request
	SlurmV0040GetJobWithResponse(ctx context.Context, jobId string, params *SlurmV0040GetJobParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetJobResponse, error)

	// SlurmV0040PostJobWithBodyWithResponse request with any body
	SlurmV0040PostJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0040PostJobResponse, error)

	SlurmV0040PostJobWithResponse(ctx context.Context, jobId string, body SlurmV0040PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0040PostJobResponse, error)

	// SlurmV0040DeleteJobsWithBodyWithResponse request with any body
	SlurmV0040DeleteJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0040DeleteJobsResponse, error)

	SlurmV0040DeleteJobsWithResponse(ctx context.Context, body SlurmV0040DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0040DeleteJobsResponse, error)

	// SlurmV0040GetJobsWithResponse request
	SlurmV0040GetJobsWithResponse(ctx context.Context, params *SlurmV0040GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetJobsResponse, error)

	// SlurmV0040GetJobsStateWithResponse request
	SlurmV0040GetJobsStateWithResponse(ctx context.Context, params *SlurmV0040GetJobsStateParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetJobsStateResponse, error)

	// SlurmV0040GetLicensesWithResponse request
	SlurmV0040GetLicensesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0040GetLicensesResponse, error)

	// SlurmV0040DeleteNodeWithResponse request
	SlurmV0040DeleteNodeWithResponse(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*SlurmV0040DeleteNodeResponse, error)

	// SlurmV0040GetNodeWithResponse request
	SlurmV0040GetNodeWithResponse(ctx context.Context, nodeName string, params *SlurmV0040GetNodeParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetNodeResponse, error)

	// SlurmV0040PostNodeWithBodyWithResponse request with any body
	SlurmV0040PostNodeWithBodyWithResponse(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0040PostNodeResponse, error)

	SlurmV0040PostNodeWithResponse(ctx context.Context, nodeName string, body SlurmV0040PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0040PostNodeResponse, error)

	// SlurmV0040GetNodesWithResponse request
	SlurmV0040GetNodesWithResponse(ctx context.Context, params *SlurmV0040GetNodesParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetNodesResponse, error)

	// SlurmV0040GetPartitionWithResponse request
	SlurmV0040GetPartitionWithResponse(ctx context.Context, partitionName string, params *SlurmV0040GetPartitionParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetPartitionResponse, error)

	// SlurmV0040GetPartitionsWithResponse request
	SlurmV0040GetPartitionsWithResponse(ctx context.Context, params *SlurmV0040GetPartitionsParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetPartitionsResponse, error)

	// SlurmV0040GetPingWithResponse request
	SlurmV0040GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0040GetPingResponse, error)

	// SlurmV0040GetReconfigureWithResponse request
	SlurmV0040GetReconfigureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0040GetReconfigureResponse, error)

	// SlurmV0040GetReservationWithResponse request
	SlurmV0040GetReservationWithResponse(ctx context.Context, reservationName string, params *SlurmV0040GetReservationParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetReservationResponse, error)

	// SlurmV0040GetReservationsWithResponse request
	SlurmV0040GetReservationsWithResponse(ctx context.Context, params *SlurmV0040GetReservationsParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetReservationsResponse, error)

	// SlurmV0040GetSharesWithResponse request
	SlurmV0040GetSharesWithResponse(ctx context.Context, params *SlurmV0040GetSharesParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetSharesResponse, error)

	// SlurmdbV0040DeleteAccountWithResponse request
	SlurmdbV0040DeleteAccountWithResponse(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteAccountResponse, error)

	// SlurmdbV0040GetAccountWithResponse request
	SlurmdbV0040GetAccountWithResponse(ctx context.Context, accountName string, params *SlurmdbV0040GetAccountParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetAccountResponse, error)

	// SlurmdbV0040GetAccountsWithResponse request
	SlurmdbV0040GetAccountsWithResponse(ctx context.Context, params *SlurmdbV0040GetAccountsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetAccountsResponse, error)

	// SlurmdbV0040PostAccountsWithBodyWithResponse request with any body
	SlurmdbV0040PostAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAccountsResponse, error)

	SlurmdbV0040PostAccountsWithResponse(ctx context.Context, body SlurmdbV0040PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAccountsResponse, error)

	// SlurmdbV0040PostAccountsAssociationWithBodyWithResponse request with any body
	SlurmdbV0040PostAccountsAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAccountsAssociationResponse, error)

	SlurmdbV0040PostAccountsAssociationWithResponse(ctx context.Context, body SlurmdbV0040PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAccountsAssociationResponse, error)

	// SlurmdbV0040DeleteAssociationWithResponse request
	SlurmdbV0040DeleteAssociationWithResponse(ctx context.Context, params *SlurmdbV0040DeleteAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteAssociationResponse, error)

	// SlurmdbV0040GetAssociationWithResponse request
	SlurmdbV0040GetAssociationWithResponse(ctx context.Context, params *SlurmdbV0040GetAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetAssociationResponse, error)

	// SlurmdbV0040DeleteAssociationsWithResponse request
	SlurmdbV0040DeleteAssociationsWithResponse(ctx context.Context, params *SlurmdbV0040DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteAssociationsResponse, error)

	// SlurmdbV0040GetAssociationsWithResponse request
	SlurmdbV0040GetAssociationsWithResponse(ctx context.Context, params *SlurmdbV0040GetAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetAssociationsResponse, error)

	// SlurmdbV0040PostAssociationsWithBodyWithResponse request with any body
	SlurmdbV0040PostAssociationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAssociationsResponse, error)

	SlurmdbV0040PostAssociationsWithResponse(ctx context.Context, body SlurmdbV0040PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAssociationsResponse, error)

	// SlurmdbV0040DeleteClusterWithResponse request
	SlurmdbV0040DeleteClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0040DeleteClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteClusterResponse, error)

	// SlurmdbV0040GetClusterWithResponse request
	SlurmdbV0040GetClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0040GetClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetClusterResponse, error)

	// SlurmdbV0040GetClustersWithResponse request
	SlurmdbV0040GetClustersWithResponse(ctx context.Context, params *SlurmdbV0040GetClustersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetClustersResponse, error)

	// SlurmdbV0040PostClustersWithBodyWithResponse request with any body
	SlurmdbV0040PostClustersWithBodyWithResponse(ctx context.Context, params *SlurmdbV0040PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostClustersResponse, error)

	SlurmdbV0040PostClustersWithResponse(ctx context.Context, params *SlurmdbV0040PostClustersParams, body SlurmdbV0040PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostClustersResponse, error)

	// SlurmdbV0040GetConfigWithResponse request
	SlurmdbV0040GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetConfigResponse, error)

	// SlurmdbV0040PostConfigWithBodyWithResponse request with any body
	SlurmdbV0040PostConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostConfigResponse, error)

	SlurmdbV0040PostConfigWithResponse(ctx context.Context, body SlurmdbV0040PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostConfigResponse, error)

	// SlurmdbV0040GetDiagWithResponse request
	SlurmdbV0040GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetDiagResponse, error)

	// SlurmdbV0040GetInstanceWithResponse request
	SlurmdbV0040GetInstanceWithResponse(ctx context.Context, params *SlurmdbV0040GetInstanceParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetInstanceResponse, error)

	// SlurmdbV0040GetInstancesWithResponse request
	SlurmdbV0040GetInstancesWithResponse(ctx context.Context, params *SlurmdbV0040GetInstancesParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetInstancesResponse, error)

	// SlurmdbV0040GetJobWithResponse request
	SlurmdbV0040GetJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetJobResponse, error)

	// SlurmdbV0040GetJobsWithResponse request
	SlurmdbV0040GetJobsWithResponse(ctx context.Context, params *SlurmdbV0040GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetJobsResponse, error)

	// SlurmdbV0040GetQosWithResponse request
	SlurmdbV0040GetQosWithResponse(ctx context.Context, params *SlurmdbV0040GetQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetQosResponse, error)

	// SlurmdbV0040PostQosWithBodyWithResponse request with any body
	SlurmdbV0040PostQosWithBodyWithResponse(ctx context.Context, params *SlurmdbV0040PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostQosResponse, error)

	SlurmdbV0040PostQosWithResponse(ctx context.Context, params *SlurmdbV0040PostQosParams, body SlurmdbV0040PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostQosResponse, error)

	// SlurmdbV0040DeleteSingleQosWithResponse request
	SlurmdbV0040DeleteSingleQosWithResponse(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteSingleQosResponse, error)

	// SlurmdbV0040GetSingleQosWithResponse request
	SlurmdbV0040GetSingleQosWithResponse(ctx context.Context, qos string, params *SlurmdbV0040GetSingleQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetSingleQosResponse, error)

	// SlurmdbV0040GetTresWithResponse request
	SlurmdbV0040GetTresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetTresResponse, error)

	// SlurmdbV0040PostTresWithBodyWithResponse request with any body
	SlurmdbV0040PostTresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostTresResponse, error)

	SlurmdbV0040PostTresWithResponse(ctx context.Context, body SlurmdbV0040PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostTresResponse, error)

	// SlurmdbV0040DeleteUserWithResponse request
	SlurmdbV0040DeleteUserWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteUserResponse, error)

	// SlurmdbV0040GetUserWithResponse request
	SlurmdbV0040GetUserWithResponse(ctx context.Context, name string, params *SlurmdbV0040GetUserParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetUserResponse, error)

	// SlurmdbV0040GetUsersWithResponse request
	SlurmdbV0040GetUsersWithResponse(ctx context.Context, params *SlurmdbV0040GetUsersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetUsersResponse, error)

	// SlurmdbV0040PostUsersWithBodyWithResponse request with any body
	SlurmdbV0040PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostUsersResponse, error)

	SlurmdbV0040PostUsersWithResponse(ctx context.Context, body SlurmdbV0040PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostUsersResponse, error)

	// SlurmdbV0040PostUsersAssociationWithBodyWithResponse request with any body
	SlurmdbV0040PostUsersAssociationWithBodyWithResponse(ctx context.Context, params *SlurmdbV0040PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostUsersAssociationResponse, error)

	SlurmdbV0040PostUsersAssociationWithResponse(ctx context.Context, params *SlurmdbV0040PostUsersAssociationParams, body SlurmdbV0040PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostUsersAssociationResponse, error)

	// SlurmdbV0040DeleteWckeyWithResponse request
	SlurmdbV0040DeleteWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteWckeyResponse, error)

	// SlurmdbV0040GetWckeyWithResponse request
	SlurmdbV0040GetWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetWckeyResponse, error)

	// SlurmdbV0040GetWckeysWithResponse request
	SlurmdbV0040GetWckeysWithResponse(ctx context.Context, params *SlurmdbV0040GetWckeysParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetWckeysResponse, error)

	// SlurmdbV0040PostWckeysWithBodyWithResponse request with any body
	SlurmdbV0040PostWckeysWithBodyWithResponse(ctx context.Context, params *SlurmdbV0040PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostWckeysResponse, error)

	SlurmdbV0040PostWckeysWithResponse(ctx context.Context, params *SlurmdbV0040PostWckeysParams, body SlurmdbV0040PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostWckeysResponse, error)
}

type SlurmV0040GetDiagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiDiagResp
	JSONDefault  *V0040OpenapiDiagResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetDiagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetDiagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040PostJobSubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiJobSubmitResponse
	JSONDefault  *V0040OpenapiJobSubmitResponse
}

// Status returns HTTPResponse.Status
func (r SlurmV0040PostJobSubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040PostJobSubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040DeleteJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040DeleteJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040DeleteJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiJobInfoResp
	JSONDefault  *V0040OpenapiJobInfoResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040PostJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiJobPostResponse
	JSONDefault  *V0040OpenapiJobPostResponse
}

// Status returns HTTPResponse.Status
func (r SlurmV0040PostJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040PostJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040DeleteJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiKillJobsResp
	JSONDefault  *V0040OpenapiKillJobsResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040DeleteJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040DeleteJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiJobInfoResp
	JSONDefault  *V0040OpenapiJobInfoResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetJobsStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiJobInfoResp
	JSONDefault  *V0040OpenapiJobInfoResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetJobsStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetJobsStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetLicensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiLicensesResp
	JSONDefault  *V0040OpenapiLicensesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetLicensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetLicensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040DeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040DeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040DeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiNodesResp
	JSONDefault  *V0040OpenapiNodesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040PostNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040PostNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040PostNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiNodesResp
	JSONDefault  *V0040OpenapiNodesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetPartitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiPartitionResp
	JSONDefault  *V0040OpenapiPartitionResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetPartitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetPartitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetPartitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiPartitionResp
	JSONDefault  *V0040OpenapiPartitionResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetPartitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetPartitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiPingArrayResp
	JSONDefault  *V0040OpenapiPingArrayResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetReconfigureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetReconfigureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetReconfigureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiReservationResp
	JSONDefault  *V0040OpenapiReservationResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiReservationResp
	JSONDefault  *V0040OpenapiReservationResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0040GetSharesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiSharesResp
	JSONDefault  *V0040OpenapiSharesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0040GetSharesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0040GetSharesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiAccountsRemovedResp
	JSONDefault  *V0040OpenapiAccountsRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiAccountsResp
	JSONDefault  *V0040OpenapiAccountsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiAccountsResp
	JSONDefault  *V0040OpenapiAccountsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostAccountsAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiAccountsAddCondRespStr
	JSONDefault  *V0040OpenapiAccountsAddCondRespStr
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostAccountsAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostAccountsAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040DeleteAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiAssocsRemovedResp
	JSONDefault  *V0040OpenapiAssocsRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040DeleteAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040DeleteAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiAssocsResp
	JSONDefault  *V0040OpenapiAssocsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040DeleteAssociationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiAssocsRemovedResp
	JSONDefault  *V0040OpenapiAssocsRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040DeleteAssociationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040DeleteAssociationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetAssociationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiAssocsResp
	JSONDefault  *V0040OpenapiAssocsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetAssociationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetAssociationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostAssociationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostAssociationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostAssociationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiClustersRemovedResp
	JSONDefault  *V0040OpenapiClustersRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiClustersResp
	JSONDefault  *V0040OpenapiClustersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiClustersResp
	JSONDefault  *V0040OpenapiClustersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiSlurmdbdConfigResp
	JSONDefault  *V0040OpenapiSlurmdbdConfigResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetDiagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiSlurmdbdStatsResp
	JSONDefault  *V0040OpenapiSlurmdbdStatsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetDiagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetDiagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiInstancesResp
	JSONDefault  *V0040OpenapiInstancesResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiInstancesResp
	JSONDefault  *V0040OpenapiInstancesResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiSlurmdbdJobsResp
	JSONDefault  *V0040OpenapiSlurmdbdJobsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiSlurmdbdJobsResp
	JSONDefault  *V0040OpenapiSlurmdbdJobsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiSlurmdbdQosResp
	JSONDefault  *V0040OpenapiSlurmdbdQosResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040DeleteSingleQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiSlurmdbdQosRemovedResp
	JSONDefault  *V0040OpenapiSlurmdbdQosRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040DeleteSingleQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040DeleteSingleQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetSingleQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiSlurmdbdQosResp
	JSONDefault  *V0040OpenapiSlurmdbdQosResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetSingleQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetSingleQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetTresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiTresResp
	JSONDefault  *V0040OpenapiTresResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetTresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetTresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostTresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostTresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostTresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiUsersResp
	JSONDefault  *V0040OpenapiUsersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiUsersResp
	JSONDefault  *V0040OpenapiUsersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostUsersAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiUsersAddCondRespStr
	JSONDefault  *V0040OpenapiUsersAddCondRespStr
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostUsersAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostUsersAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040DeleteWckeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiWckeyRemovedResp
	JSONDefault  *V0040OpenapiWckeyRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040DeleteWckeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040DeleteWckeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetWckeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiWckeyResp
	JSONDefault  *V0040OpenapiWckeyResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetWckeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetWckeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040GetWckeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiWckeyResp
	JSONDefault  *V0040OpenapiWckeyResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040GetWckeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040GetWckeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0040PostWckeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0040OpenapiResp
	JSONDefault  *V0040OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0040PostWckeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0040PostWckeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SlurmV0040GetDiagWithResponse request returning *SlurmV0040GetDiagResponse
func (c *ClientWithResponses) SlurmV0040GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0040GetDiagResponse, error) {
	rsp, err := c.SlurmV0040GetDiag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetDiagResponse(rsp)
}

// SlurmV0040PostJobSubmitWithBodyWithResponse request with arbitrary body returning *SlurmV0040PostJobSubmitResponse
func (c *ClientWithResponses) SlurmV0040PostJobSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0040PostJobSubmitResponse, error) {
	rsp, err := c.SlurmV0040PostJobSubmitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040PostJobSubmitResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0040PostJobSubmitWithResponse(ctx context.Context, body SlurmV0040PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0040PostJobSubmitResponse, error) {
	rsp, err := c.SlurmV0040PostJobSubmit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040PostJobSubmitResponse(rsp)
}

// SlurmV0040DeleteJobWithResponse request returning *SlurmV0040DeleteJobResponse
func (c *ClientWithResponses) SlurmV0040DeleteJobWithResponse(ctx context.Context, jobId string, params *SlurmV0040DeleteJobParams, reqEditors ...RequestEditorFn) (*SlurmV0040DeleteJobResponse, error) {
	rsp, err := c.SlurmV0040DeleteJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040DeleteJobResponse(rsp)
}

// SlurmV0040GetJobWithResponse request returning *SlurmV0040GetJobResponse
func (c *ClientWithResponses) SlurmV0040GetJobWithResponse(ctx context.Context, jobId string, params *SlurmV0040GetJobParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetJobResponse, error) {
	rsp, err := c.SlurmV0040GetJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetJobResponse(rsp)
}

// SlurmV0040PostJobWithBodyWithResponse request with arbitrary body returning *SlurmV0040PostJobResponse
func (c *ClientWithResponses) SlurmV0040PostJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0040PostJobResponse, error) {
	rsp, err := c.SlurmV0040PostJobWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040PostJobResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0040PostJobWithResponse(ctx context.Context, jobId string, body SlurmV0040PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0040PostJobResponse, error) {
	rsp, err := c.SlurmV0040PostJob(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040PostJobResponse(rsp)
}

// SlurmV0040DeleteJobsWithBodyWithResponse request with arbitrary body returning *SlurmV0040DeleteJobsResponse
func (c *ClientWithResponses) SlurmV0040DeleteJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0040DeleteJobsResponse, error) {
	rsp, err := c.SlurmV0040DeleteJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040DeleteJobsResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0040DeleteJobsWithResponse(ctx context.Context, body SlurmV0040DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0040DeleteJobsResponse, error) {
	rsp, err := c.SlurmV0040DeleteJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040DeleteJobsResponse(rsp)
}

// SlurmV0040GetJobsWithResponse request returning *SlurmV0040GetJobsResponse
func (c *ClientWithResponses) SlurmV0040GetJobsWithResponse(ctx context.Context, params *SlurmV0040GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetJobsResponse, error) {
	rsp, err := c.SlurmV0040GetJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetJobsResponse(rsp)
}

// SlurmV0040GetJobsStateWithResponse request returning *SlurmV0040GetJobsStateResponse
func (c *ClientWithResponses) SlurmV0040GetJobsStateWithResponse(ctx context.Context, params *SlurmV0040GetJobsStateParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetJobsStateResponse, error) {
	rsp, err := c.SlurmV0040GetJobsState(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetJobsStateResponse(rsp)
}

// SlurmV0040GetLicensesWithResponse request returning *SlurmV0040GetLicensesResponse
func (c *ClientWithResponses) SlurmV0040GetLicensesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0040GetLicensesResponse, error) {
	rsp, err := c.SlurmV0040GetLicenses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetLicensesResponse(rsp)
}

// SlurmV0040DeleteNodeWithResponse request returning *SlurmV0040DeleteNodeResponse
func (c *ClientWithResponses) SlurmV0040DeleteNodeWithResponse(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*SlurmV0040DeleteNodeResponse, error) {
	rsp, err := c.SlurmV0040DeleteNode(ctx, nodeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040DeleteNodeResponse(rsp)
}

// SlurmV0040GetNodeWithResponse request returning *SlurmV0040GetNodeResponse
func (c *ClientWithResponses) SlurmV0040GetNodeWithResponse(ctx context.Context, nodeName string, params *SlurmV0040GetNodeParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetNodeResponse, error) {
	rsp, err := c.SlurmV0040GetNode(ctx, nodeName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetNodeResponse(rsp)
}

// SlurmV0040PostNodeWithBodyWithResponse request with arbitrary body returning *SlurmV0040PostNodeResponse
func (c *ClientWithResponses) SlurmV0040PostNodeWithBodyWithResponse(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0040PostNodeResponse, error) {
	rsp, err := c.SlurmV0040PostNodeWithBody(ctx, nodeName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040PostNodeResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0040PostNodeWithResponse(ctx context.Context, nodeName string, body SlurmV0040PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0040PostNodeResponse, error) {
	rsp, err := c.SlurmV0040PostNode(ctx, nodeName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040PostNodeResponse(rsp)
}

// SlurmV0040GetNodesWithResponse request returning *SlurmV0040GetNodesResponse
func (c *ClientWithResponses) SlurmV0040GetNodesWithResponse(ctx context.Context, params *SlurmV0040GetNodesParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetNodesResponse, error) {
	rsp, err := c.SlurmV0040GetNodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetNodesResponse(rsp)
}

// SlurmV0040GetPartitionWithResponse request returning *SlurmV0040GetPartitionResponse
func (c *ClientWithResponses) SlurmV0040GetPartitionWithResponse(ctx context.Context, partitionName string, params *SlurmV0040GetPartitionParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetPartitionResponse, error) {
	rsp, err := c.SlurmV0040GetPartition(ctx, partitionName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetPartitionResponse(rsp)
}

// SlurmV0040GetPartitionsWithResponse request returning *SlurmV0040GetPartitionsResponse
func (c *ClientWithResponses) SlurmV0040GetPartitionsWithResponse(ctx context.Context, params *SlurmV0040GetPartitionsParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetPartitionsResponse, error) {
	rsp, err := c.SlurmV0040GetPartitions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetPartitionsResponse(rsp)
}

// SlurmV0040GetPingWithResponse request returning *SlurmV0040GetPingResponse
func (c *ClientWithResponses) SlurmV0040GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0040GetPingResponse, error) {
	rsp, err := c.SlurmV0040GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetPingResponse(rsp)
}

// SlurmV0040GetReconfigureWithResponse request returning *SlurmV0040GetReconfigureResponse
func (c *ClientWithResponses) SlurmV0040GetReconfigureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0040GetReconfigureResponse, error) {
	rsp, err := c.SlurmV0040GetReconfigure(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetReconfigureResponse(rsp)
}

// SlurmV0040GetReservationWithResponse request returning *SlurmV0040GetReservationResponse
func (c *ClientWithResponses) SlurmV0040GetReservationWithResponse(ctx context.Context, reservationName string, params *SlurmV0040GetReservationParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetReservationResponse, error) {
	rsp, err := c.SlurmV0040GetReservation(ctx, reservationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetReservationResponse(rsp)
}

// SlurmV0040GetReservationsWithResponse request returning *SlurmV0040GetReservationsResponse
func (c *ClientWithResponses) SlurmV0040GetReservationsWithResponse(ctx context.Context, params *SlurmV0040GetReservationsParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetReservationsResponse, error) {
	rsp, err := c.SlurmV0040GetReservations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetReservationsResponse(rsp)
}

// SlurmV0040GetSharesWithResponse request returning *SlurmV0040GetSharesResponse
func (c *ClientWithResponses) SlurmV0040GetSharesWithResponse(ctx context.Context, params *SlurmV0040GetSharesParams, reqEditors ...RequestEditorFn) (*SlurmV0040GetSharesResponse, error) {
	rsp, err := c.SlurmV0040GetShares(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0040GetSharesResponse(rsp)
}

// SlurmdbV0040DeleteAccountWithResponse request returning *SlurmdbV0040DeleteAccountResponse
func (c *ClientWithResponses) SlurmdbV0040DeleteAccountWithResponse(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteAccountResponse, error) {
	rsp, err := c.SlurmdbV0040DeleteAccount(ctx, accountName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040DeleteAccountResponse(rsp)
}

// SlurmdbV0040GetAccountWithResponse request returning *SlurmdbV0040GetAccountResponse
func (c *ClientWithResponses) SlurmdbV0040GetAccountWithResponse(ctx context.Context, accountName string, params *SlurmdbV0040GetAccountParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetAccountResponse, error) {
	rsp, err := c.SlurmdbV0040GetAccount(ctx, accountName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetAccountResponse(rsp)
}

// SlurmdbV0040GetAccountsWithResponse request returning *SlurmdbV0040GetAccountsResponse
func (c *ClientWithResponses) SlurmdbV0040GetAccountsWithResponse(ctx context.Context, params *SlurmdbV0040GetAccountsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetAccountsResponse, error) {
	rsp, err := c.SlurmdbV0040GetAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetAccountsResponse(rsp)
}

// SlurmdbV0040PostAccountsWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostAccountsResponse
func (c *ClientWithResponses) SlurmdbV0040PostAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAccountsResponse, error) {
	rsp, err := c.SlurmdbV0040PostAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostAccountsResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostAccountsWithResponse(ctx context.Context, body SlurmdbV0040PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAccountsResponse, error) {
	rsp, err := c.SlurmdbV0040PostAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostAccountsResponse(rsp)
}

// SlurmdbV0040PostAccountsAssociationWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostAccountsAssociationResponse
func (c *ClientWithResponses) SlurmdbV0040PostAccountsAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAccountsAssociationResponse, error) {
	rsp, err := c.SlurmdbV0040PostAccountsAssociationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostAccountsAssociationResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostAccountsAssociationWithResponse(ctx context.Context, body SlurmdbV0040PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAccountsAssociationResponse, error) {
	rsp, err := c.SlurmdbV0040PostAccountsAssociation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostAccountsAssociationResponse(rsp)
}

// SlurmdbV0040DeleteAssociationWithResponse request returning *SlurmdbV0040DeleteAssociationResponse
func (c *ClientWithResponses) SlurmdbV0040DeleteAssociationWithResponse(ctx context.Context, params *SlurmdbV0040DeleteAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteAssociationResponse, error) {
	rsp, err := c.SlurmdbV0040DeleteAssociation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040DeleteAssociationResponse(rsp)
}

// SlurmdbV0040GetAssociationWithResponse request returning *SlurmdbV0040GetAssociationResponse
func (c *ClientWithResponses) SlurmdbV0040GetAssociationWithResponse(ctx context.Context, params *SlurmdbV0040GetAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetAssociationResponse, error) {
	rsp, err := c.SlurmdbV0040GetAssociation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetAssociationResponse(rsp)
}

// SlurmdbV0040DeleteAssociationsWithResponse request returning *SlurmdbV0040DeleteAssociationsResponse
func (c *ClientWithResponses) SlurmdbV0040DeleteAssociationsWithResponse(ctx context.Context, params *SlurmdbV0040DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0040DeleteAssociations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040DeleteAssociationsResponse(rsp)
}

// SlurmdbV0040GetAssociationsWithResponse request returning *SlurmdbV0040GetAssociationsResponse
func (c *ClientWithResponses) SlurmdbV0040GetAssociationsWithResponse(ctx context.Context, params *SlurmdbV0040GetAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0040GetAssociations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetAssociationsResponse(rsp)
}

// SlurmdbV0040PostAssociationsWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostAssociationsResponse
func (c *ClientWithResponses) SlurmdbV0040PostAssociationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0040PostAssociationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostAssociationsResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostAssociationsWithResponse(ctx context.Context, body SlurmdbV0040PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0040PostAssociations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostAssociationsResponse(rsp)
}

// SlurmdbV0040DeleteClusterWithResponse request returning *SlurmdbV0040DeleteClusterResponse
func (c *ClientWithResponses) SlurmdbV0040DeleteClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0040DeleteClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteClusterResponse, error) {
	rsp, err := c.SlurmdbV0040DeleteCluster(ctx, clusterName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040DeleteClusterResponse(rsp)
}

// SlurmdbV0040GetClusterWithResponse request returning *SlurmdbV0040GetClusterResponse
func (c *ClientWithResponses) SlurmdbV0040GetClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0040GetClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetClusterResponse, error) {
	rsp, err := c.SlurmdbV0040GetCluster(ctx, clusterName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetClusterResponse(rsp)
}

// SlurmdbV0040GetClustersWithResponse request returning *SlurmdbV0040GetClustersResponse
func (c *ClientWithResponses) SlurmdbV0040GetClustersWithResponse(ctx context.Context, params *SlurmdbV0040GetClustersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetClustersResponse, error) {
	rsp, err := c.SlurmdbV0040GetClusters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetClustersResponse(rsp)
}

// SlurmdbV0040PostClustersWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostClustersResponse
func (c *ClientWithResponses) SlurmdbV0040PostClustersWithBodyWithResponse(ctx context.Context, params *SlurmdbV0040PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostClustersResponse, error) {
	rsp, err := c.SlurmdbV0040PostClustersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostClustersResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostClustersWithResponse(ctx context.Context, params *SlurmdbV0040PostClustersParams, body SlurmdbV0040PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostClustersResponse, error) {
	rsp, err := c.SlurmdbV0040PostClusters(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostClustersResponse(rsp)
}

// SlurmdbV0040GetConfigWithResponse request returning *SlurmdbV0040GetConfigResponse
func (c *ClientWithResponses) SlurmdbV0040GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetConfigResponse, error) {
	rsp, err := c.SlurmdbV0040GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetConfigResponse(rsp)
}

// SlurmdbV0040PostConfigWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostConfigResponse
func (c *ClientWithResponses) SlurmdbV0040PostConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostConfigResponse, error) {
	rsp, err := c.SlurmdbV0040PostConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostConfigResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostConfigWithResponse(ctx context.Context, body SlurmdbV0040PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostConfigResponse, error) {
	rsp, err := c.SlurmdbV0040PostConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostConfigResponse(rsp)
}

// SlurmdbV0040GetDiagWithResponse request returning *SlurmdbV0040GetDiagResponse
func (c *ClientWithResponses) SlurmdbV0040GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetDiagResponse, error) {
	rsp, err := c.SlurmdbV0040GetDiag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetDiagResponse(rsp)
}

// SlurmdbV0040GetInstanceWithResponse request returning *SlurmdbV0040GetInstanceResponse
func (c *ClientWithResponses) SlurmdbV0040GetInstanceWithResponse(ctx context.Context, params *SlurmdbV0040GetInstanceParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetInstanceResponse, error) {
	rsp, err := c.SlurmdbV0040GetInstance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetInstanceResponse(rsp)
}

// SlurmdbV0040GetInstancesWithResponse request returning *SlurmdbV0040GetInstancesResponse
func (c *ClientWithResponses) SlurmdbV0040GetInstancesWithResponse(ctx context.Context, params *SlurmdbV0040GetInstancesParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetInstancesResponse, error) {
	rsp, err := c.SlurmdbV0040GetInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetInstancesResponse(rsp)
}

// SlurmdbV0040GetJobWithResponse request returning *SlurmdbV0040GetJobResponse
func (c *ClientWithResponses) SlurmdbV0040GetJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetJobResponse, error) {
	rsp, err := c.SlurmdbV0040GetJob(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetJobResponse(rsp)
}

// SlurmdbV0040GetJobsWithResponse request returning *SlurmdbV0040GetJobsResponse
func (c *ClientWithResponses) SlurmdbV0040GetJobsWithResponse(ctx context.Context, params *SlurmdbV0040GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetJobsResponse, error) {
	rsp, err := c.SlurmdbV0040GetJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetJobsResponse(rsp)
}

// SlurmdbV0040GetQosWithResponse request returning *SlurmdbV0040GetQosResponse
func (c *ClientWithResponses) SlurmdbV0040GetQosWithResponse(ctx context.Context, params *SlurmdbV0040GetQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetQosResponse, error) {
	rsp, err := c.SlurmdbV0040GetQos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetQosResponse(rsp)
}

// SlurmdbV0040PostQosWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostQosResponse
func (c *ClientWithResponses) SlurmdbV0040PostQosWithBodyWithResponse(ctx context.Context, params *SlurmdbV0040PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostQosResponse, error) {
	rsp, err := c.SlurmdbV0040PostQosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostQosResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostQosWithResponse(ctx context.Context, params *SlurmdbV0040PostQosParams, body SlurmdbV0040PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostQosResponse, error) {
	rsp, err := c.SlurmdbV0040PostQos(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostQosResponse(rsp)
}

// SlurmdbV0040DeleteSingleQosWithResponse request returning *SlurmdbV0040DeleteSingleQosResponse
func (c *ClientWithResponses) SlurmdbV0040DeleteSingleQosWithResponse(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteSingleQosResponse, error) {
	rsp, err := c.SlurmdbV0040DeleteSingleQos(ctx, qos, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040DeleteSingleQosResponse(rsp)
}

// SlurmdbV0040GetSingleQosWithResponse request returning *SlurmdbV0040GetSingleQosResponse
func (c *ClientWithResponses) SlurmdbV0040GetSingleQosWithResponse(ctx context.Context, qos string, params *SlurmdbV0040GetSingleQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetSingleQosResponse, error) {
	rsp, err := c.SlurmdbV0040GetSingleQos(ctx, qos, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetSingleQosResponse(rsp)
}

// SlurmdbV0040GetTresWithResponse request returning *SlurmdbV0040GetTresResponse
func (c *ClientWithResponses) SlurmdbV0040GetTresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetTresResponse, error) {
	rsp, err := c.SlurmdbV0040GetTres(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetTresResponse(rsp)
}

// SlurmdbV0040PostTresWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostTresResponse
func (c *ClientWithResponses) SlurmdbV0040PostTresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostTresResponse, error) {
	rsp, err := c.SlurmdbV0040PostTresWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostTresResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostTresWithResponse(ctx context.Context, body SlurmdbV0040PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostTresResponse, error) {
	rsp, err := c.SlurmdbV0040PostTres(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostTresResponse(rsp)
}

// SlurmdbV0040DeleteUserWithResponse request returning *SlurmdbV0040DeleteUserResponse
func (c *ClientWithResponses) SlurmdbV0040DeleteUserWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteUserResponse, error) {
	rsp, err := c.SlurmdbV0040DeleteUser(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040DeleteUserResponse(rsp)
}

// SlurmdbV0040GetUserWithResponse request returning *SlurmdbV0040GetUserResponse
func (c *ClientWithResponses) SlurmdbV0040GetUserWithResponse(ctx context.Context, name string, params *SlurmdbV0040GetUserParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetUserResponse, error) {
	rsp, err := c.SlurmdbV0040GetUser(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetUserResponse(rsp)
}

// SlurmdbV0040GetUsersWithResponse request returning *SlurmdbV0040GetUsersResponse
func (c *ClientWithResponses) SlurmdbV0040GetUsersWithResponse(ctx context.Context, params *SlurmdbV0040GetUsersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetUsersResponse, error) {
	rsp, err := c.SlurmdbV0040GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetUsersResponse(rsp)
}

// SlurmdbV0040PostUsersWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostUsersResponse
func (c *ClientWithResponses) SlurmdbV0040PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostUsersResponse, error) {
	rsp, err := c.SlurmdbV0040PostUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostUsersResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostUsersWithResponse(ctx context.Context, body SlurmdbV0040PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostUsersResponse, error) {
	rsp, err := c.SlurmdbV0040PostUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostUsersResponse(rsp)
}

// SlurmdbV0040PostUsersAssociationWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostUsersAssociationResponse
func (c *ClientWithResponses) SlurmdbV0040PostUsersAssociationWithBodyWithResponse(ctx context.Context, params *SlurmdbV0040PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostUsersAssociationResponse, error) {
	rsp, err := c.SlurmdbV0040PostUsersAssociationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostUsersAssociationResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostUsersAssociationWithResponse(ctx context.Context, params *SlurmdbV0040PostUsersAssociationParams, body SlurmdbV0040PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostUsersAssociationResponse, error) {
	rsp, err := c.SlurmdbV0040PostUsersAssociation(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostUsersAssociationResponse(rsp)
}

// SlurmdbV0040DeleteWckeyWithResponse request returning *SlurmdbV0040DeleteWckeyResponse
func (c *ClientWithResponses) SlurmdbV0040DeleteWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0040DeleteWckeyResponse, error) {
	rsp, err := c.SlurmdbV0040DeleteWckey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040DeleteWckeyResponse(rsp)
}

// SlurmdbV0040GetWckeyWithResponse request returning *SlurmdbV0040GetWckeyResponse
func (c *ClientWithResponses) SlurmdbV0040GetWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetWckeyResponse, error) {
	rsp, err := c.SlurmdbV0040GetWckey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetWckeyResponse(rsp)
}

// SlurmdbV0040GetWckeysWithResponse request returning *SlurmdbV0040GetWckeysResponse
func (c *ClientWithResponses) SlurmdbV0040GetWckeysWithResponse(ctx context.Context, params *SlurmdbV0040GetWckeysParams, reqEditors ...RequestEditorFn) (*SlurmdbV0040GetWckeysResponse, error) {
	rsp, err := c.SlurmdbV0040GetWckeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040GetWckeysResponse(rsp)
}

// SlurmdbV0040PostWckeysWithBodyWithResponse request with arbitrary body returning *SlurmdbV0040PostWckeysResponse
func (c *ClientWithResponses) SlurmdbV0040PostWckeysWithBodyWithResponse(ctx context.Context, params *SlurmdbV0040PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostWckeysResponse, error) {
	rsp, err := c.SlurmdbV0040PostWckeysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostWckeysResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0040PostWckeysWithResponse(ctx context.Context, params *SlurmdbV0040PostWckeysParams, body SlurmdbV0040PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0040PostWckeysResponse, error) {
	rsp, err := c.SlurmdbV0040PostWckeys(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0040PostWckeysResponse(rsp)
}

// ParseSlurmV0040GetDiagResponse parses an HTTP response from a SlurmV0040GetDiagWithResponse call
func ParseSlurmV0040GetDiagResponse(rsp *http.Response) (*SlurmV0040GetDiagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetDiagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiDiagResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiDiagResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040PostJobSubmitResponse parses an HTTP response from a SlurmV0040PostJobSubmitWithResponse call
func ParseSlurmV0040PostJobSubmitResponse(rsp *http.Response) (*SlurmV0040PostJobSubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040PostJobSubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiJobSubmitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiJobSubmitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040DeleteJobResponse parses an HTTP response from a SlurmV0040DeleteJobWithResponse call
func ParseSlurmV0040DeleteJobResponse(rsp *http.Response) (*SlurmV0040DeleteJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040DeleteJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetJobResponse parses an HTTP response from a SlurmV0040GetJobWithResponse call
func ParseSlurmV0040GetJobResponse(rsp *http.Response) (*SlurmV0040GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040PostJobResponse parses an HTTP response from a SlurmV0040PostJobWithResponse call
func ParseSlurmV0040PostJobResponse(rsp *http.Response) (*SlurmV0040PostJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040PostJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiJobPostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiJobPostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040DeleteJobsResponse parses an HTTP response from a SlurmV0040DeleteJobsWithResponse call
func ParseSlurmV0040DeleteJobsResponse(rsp *http.Response) (*SlurmV0040DeleteJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040DeleteJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiKillJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiKillJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetJobsResponse parses an HTTP response from a SlurmV0040GetJobsWithResponse call
func ParseSlurmV0040GetJobsResponse(rsp *http.Response) (*SlurmV0040GetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetJobsStateResponse parses an HTTP response from a SlurmV0040GetJobsStateWithResponse call
func ParseSlurmV0040GetJobsStateResponse(rsp *http.Response) (*SlurmV0040GetJobsStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetJobsStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetLicensesResponse parses an HTTP response from a SlurmV0040GetLicensesWithResponse call
func ParseSlurmV0040GetLicensesResponse(rsp *http.Response) (*SlurmV0040GetLicensesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetLicensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiLicensesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiLicensesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040DeleteNodeResponse parses an HTTP response from a SlurmV0040DeleteNodeWithResponse call
func ParseSlurmV0040DeleteNodeResponse(rsp *http.Response) (*SlurmV0040DeleteNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040DeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetNodeResponse parses an HTTP response from a SlurmV0040GetNodeWithResponse call
func ParseSlurmV0040GetNodeResponse(rsp *http.Response) (*SlurmV0040GetNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040PostNodeResponse parses an HTTP response from a SlurmV0040PostNodeWithResponse call
func ParseSlurmV0040PostNodeResponse(rsp *http.Response) (*SlurmV0040PostNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040PostNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetNodesResponse parses an HTTP response from a SlurmV0040GetNodesWithResponse call
func ParseSlurmV0040GetNodesResponse(rsp *http.Response) (*SlurmV0040GetNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetPartitionResponse parses an HTTP response from a SlurmV0040GetPartitionWithResponse call
func ParseSlurmV0040GetPartitionResponse(rsp *http.Response) (*SlurmV0040GetPartitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetPartitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetPartitionsResponse parses an HTTP response from a SlurmV0040GetPartitionsWithResponse call
func ParseSlurmV0040GetPartitionsResponse(rsp *http.Response) (*SlurmV0040GetPartitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetPartitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetPingResponse parses an HTTP response from a SlurmV0040GetPingWithResponse call
func ParseSlurmV0040GetPingResponse(rsp *http.Response) (*SlurmV0040GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiPingArrayResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiPingArrayResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetReconfigureResponse parses an HTTP response from a SlurmV0040GetReconfigureWithResponse call
func ParseSlurmV0040GetReconfigureResponse(rsp *http.Response) (*SlurmV0040GetReconfigureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetReconfigureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetReservationResponse parses an HTTP response from a SlurmV0040GetReservationWithResponse call
func ParseSlurmV0040GetReservationResponse(rsp *http.Response) (*SlurmV0040GetReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetReservationsResponse parses an HTTP response from a SlurmV0040GetReservationsWithResponse call
func ParseSlurmV0040GetReservationsResponse(rsp *http.Response) (*SlurmV0040GetReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0040GetSharesResponse parses an HTTP response from a SlurmV0040GetSharesWithResponse call
func ParseSlurmV0040GetSharesResponse(rsp *http.Response) (*SlurmV0040GetSharesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0040GetSharesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiSharesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiSharesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040DeleteAccountResponse parses an HTTP response from a SlurmdbV0040DeleteAccountWithResponse call
func ParseSlurmdbV0040DeleteAccountResponse(rsp *http.Response) (*SlurmdbV0040DeleteAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiAccountsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiAccountsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetAccountResponse parses an HTTP response from a SlurmdbV0040GetAccountWithResponse call
func ParseSlurmdbV0040GetAccountResponse(rsp *http.Response) (*SlurmdbV0040GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetAccountsResponse parses an HTTP response from a SlurmdbV0040GetAccountsWithResponse call
func ParseSlurmdbV0040GetAccountsResponse(rsp *http.Response) (*SlurmdbV0040GetAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostAccountsResponse parses an HTTP response from a SlurmdbV0040PostAccountsWithResponse call
func ParseSlurmdbV0040PostAccountsResponse(rsp *http.Response) (*SlurmdbV0040PostAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostAccountsAssociationResponse parses an HTTP response from a SlurmdbV0040PostAccountsAssociationWithResponse call
func ParseSlurmdbV0040PostAccountsAssociationResponse(rsp *http.Response) (*SlurmdbV0040PostAccountsAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostAccountsAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiAccountsAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiAccountsAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040DeleteAssociationResponse parses an HTTP response from a SlurmdbV0040DeleteAssociationWithResponse call
func ParseSlurmdbV0040DeleteAssociationResponse(rsp *http.Response) (*SlurmdbV0040DeleteAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040DeleteAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetAssociationResponse parses an HTTP response from a SlurmdbV0040GetAssociationWithResponse call
func ParseSlurmdbV0040GetAssociationResponse(rsp *http.Response) (*SlurmdbV0040GetAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040DeleteAssociationsResponse parses an HTTP response from a SlurmdbV0040DeleteAssociationsWithResponse call
func ParseSlurmdbV0040DeleteAssociationsResponse(rsp *http.Response) (*SlurmdbV0040DeleteAssociationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040DeleteAssociationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetAssociationsResponse parses an HTTP response from a SlurmdbV0040GetAssociationsWithResponse call
func ParseSlurmdbV0040GetAssociationsResponse(rsp *http.Response) (*SlurmdbV0040GetAssociationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetAssociationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostAssociationsResponse parses an HTTP response from a SlurmdbV0040PostAssociationsWithResponse call
func ParseSlurmdbV0040PostAssociationsResponse(rsp *http.Response) (*SlurmdbV0040PostAssociationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostAssociationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040DeleteClusterResponse parses an HTTP response from a SlurmdbV0040DeleteClusterWithResponse call
func ParseSlurmdbV0040DeleteClusterResponse(rsp *http.Response) (*SlurmdbV0040DeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiClustersRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiClustersRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetClusterResponse parses an HTTP response from a SlurmdbV0040GetClusterWithResponse call
func ParseSlurmdbV0040GetClusterResponse(rsp *http.Response) (*SlurmdbV0040GetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetClustersResponse parses an HTTP response from a SlurmdbV0040GetClustersWithResponse call
func ParseSlurmdbV0040GetClustersResponse(rsp *http.Response) (*SlurmdbV0040GetClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostClustersResponse parses an HTTP response from a SlurmdbV0040PostClustersWithResponse call
func ParseSlurmdbV0040PostClustersResponse(rsp *http.Response) (*SlurmdbV0040PostClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetConfigResponse parses an HTTP response from a SlurmdbV0040GetConfigWithResponse call
func ParseSlurmdbV0040GetConfigResponse(rsp *http.Response) (*SlurmdbV0040GetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiSlurmdbdConfigResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiSlurmdbdConfigResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostConfigResponse parses an HTTP response from a SlurmdbV0040PostConfigWithResponse call
func ParseSlurmdbV0040PostConfigResponse(rsp *http.Response) (*SlurmdbV0040PostConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetDiagResponse parses an HTTP response from a SlurmdbV0040GetDiagWithResponse call
func ParseSlurmdbV0040GetDiagResponse(rsp *http.Response) (*SlurmdbV0040GetDiagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetDiagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiSlurmdbdStatsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiSlurmdbdStatsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetInstanceResponse parses an HTTP response from a SlurmdbV0040GetInstanceWithResponse call
func ParseSlurmdbV0040GetInstanceResponse(rsp *http.Response) (*SlurmdbV0040GetInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetInstancesResponse parses an HTTP response from a SlurmdbV0040GetInstancesWithResponse call
func ParseSlurmdbV0040GetInstancesResponse(rsp *http.Response) (*SlurmdbV0040GetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetJobResponse parses an HTTP response from a SlurmdbV0040GetJobWithResponse call
func ParseSlurmdbV0040GetJobResponse(rsp *http.Response) (*SlurmdbV0040GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetJobsResponse parses an HTTP response from a SlurmdbV0040GetJobsWithResponse call
func ParseSlurmdbV0040GetJobsResponse(rsp *http.Response) (*SlurmdbV0040GetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetQosResponse parses an HTTP response from a SlurmdbV0040GetQosWithResponse call
func ParseSlurmdbV0040GetQosResponse(rsp *http.Response) (*SlurmdbV0040GetQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostQosResponse parses an HTTP response from a SlurmdbV0040PostQosWithResponse call
func ParseSlurmdbV0040PostQosResponse(rsp *http.Response) (*SlurmdbV0040PostQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040DeleteSingleQosResponse parses an HTTP response from a SlurmdbV0040DeleteSingleQosWithResponse call
func ParseSlurmdbV0040DeleteSingleQosResponse(rsp *http.Response) (*SlurmdbV0040DeleteSingleQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040DeleteSingleQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiSlurmdbdQosRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiSlurmdbdQosRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetSingleQosResponse parses an HTTP response from a SlurmdbV0040GetSingleQosWithResponse call
func ParseSlurmdbV0040GetSingleQosResponse(rsp *http.Response) (*SlurmdbV0040GetSingleQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetSingleQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetTresResponse parses an HTTP response from a SlurmdbV0040GetTresWithResponse call
func ParseSlurmdbV0040GetTresResponse(rsp *http.Response) (*SlurmdbV0040GetTresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetTresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiTresResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiTresResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostTresResponse parses an HTTP response from a SlurmdbV0040PostTresWithResponse call
func ParseSlurmdbV0040PostTresResponse(rsp *http.Response) (*SlurmdbV0040PostTresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostTresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040DeleteUserResponse parses an HTTP response from a SlurmdbV0040DeleteUserWithResponse call
func ParseSlurmdbV0040DeleteUserResponse(rsp *http.Response) (*SlurmdbV0040DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetUserResponse parses an HTTP response from a SlurmdbV0040GetUserWithResponse call
func ParseSlurmdbV0040GetUserResponse(rsp *http.Response) (*SlurmdbV0040GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetUsersResponse parses an HTTP response from a SlurmdbV0040GetUsersWithResponse call
func ParseSlurmdbV0040GetUsersResponse(rsp *http.Response) (*SlurmdbV0040GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostUsersResponse parses an HTTP response from a SlurmdbV0040PostUsersWithResponse call
func ParseSlurmdbV0040PostUsersResponse(rsp *http.Response) (*SlurmdbV0040PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostUsersAssociationResponse parses an HTTP response from a SlurmdbV0040PostUsersAssociationWithResponse call
func ParseSlurmdbV0040PostUsersAssociationResponse(rsp *http.Response) (*SlurmdbV0040PostUsersAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostUsersAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiUsersAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiUsersAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040DeleteWckeyResponse parses an HTTP response from a SlurmdbV0040DeleteWckeyWithResponse call
func ParseSlurmdbV0040DeleteWckeyResponse(rsp *http.Response) (*SlurmdbV0040DeleteWckeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040DeleteWckeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiWckeyRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiWckeyRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetWckeyResponse parses an HTTP response from a SlurmdbV0040GetWckeyWithResponse call
func ParseSlurmdbV0040GetWckeyResponse(rsp *http.Response) (*SlurmdbV0040GetWckeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetWckeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040GetWckeysResponse parses an HTTP response from a SlurmdbV0040GetWckeysWithResponse call
func ParseSlurmdbV0040GetWckeysResponse(rsp *http.Response) (*SlurmdbV0040GetWckeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040GetWckeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0040PostWckeysResponse parses an HTTP response from a SlurmdbV0040PostWckeysWithResponse call
func ParseSlurmdbV0040PostWckeysResponse(rsp *http.Response) (*SlurmdbV0040PostWckeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0040PostWckeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0040OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get diagnostics
	// (GET /slurm/v0.0.40/diag/)
	SlurmV0040GetDiag(w http.ResponseWriter, r *http.Request)
	// submit new job
	// (POST /slurm/v0.0.40/job/submit)
	SlurmV0040PostJobSubmit(w http.ResponseWriter, r *http.Request)
	// cancel or signal job
	// (DELETE /slurm/v0.0.40/job/{job_id})
	SlurmV0040DeleteJob(w http.ResponseWriter, r *http.Request, jobId string, params SlurmV0040DeleteJobParams)
	// get job info
	// (GET /slurm/v0.0.40/job/{job_id})
	SlurmV0040GetJob(w http.ResponseWriter, r *http.Request, jobId string, params SlurmV0040GetJobParams)
	// update job
	// (POST /slurm/v0.0.40/job/{job_id})
	SlurmV0040PostJob(w http.ResponseWriter, r *http.Request, jobId string)
	// send signal to list of jobs
	// (DELETE /slurm/v0.0.40/jobs/)
	SlurmV0040DeleteJobs(w http.ResponseWriter, r *http.Request)
	// get list of jobs
	// (GET /slurm/v0.0.40/jobs/)
	SlurmV0040GetJobs(w http.ResponseWriter, r *http.Request, params SlurmV0040GetJobsParams)
	// get list of job states
	// (GET /slurm/v0.0.40/jobs/state/)
	SlurmV0040GetJobsState(w http.ResponseWriter, r *http.Request, params SlurmV0040GetJobsStateParams)
	// get all Slurm tracked license info
	// (GET /slurm/v0.0.40/licenses/)
	SlurmV0040GetLicenses(w http.ResponseWriter, r *http.Request)
	// delete node
	// (DELETE /slurm/v0.0.40/node/{node_name})
	SlurmV0040DeleteNode(w http.ResponseWriter, r *http.Request, nodeName string)
	// get node info
	// (GET /slurm/v0.0.40/node/{node_name})
	SlurmV0040GetNode(w http.ResponseWriter, r *http.Request, nodeName string, params SlurmV0040GetNodeParams)
	// update node properties
	// (POST /slurm/v0.0.40/node/{node_name})
	SlurmV0040PostNode(w http.ResponseWriter, r *http.Request, nodeName string)
	// get node(s) info
	// (GET /slurm/v0.0.40/nodes/)
	SlurmV0040GetNodes(w http.ResponseWriter, r *http.Request, params SlurmV0040GetNodesParams)
	// get partition info
	// (GET /slurm/v0.0.40/partition/{partition_name})
	SlurmV0040GetPartition(w http.ResponseWriter, r *http.Request, partitionName string, params SlurmV0040GetPartitionParams)
	// get all partition info
	// (GET /slurm/v0.0.40/partitions/)
	SlurmV0040GetPartitions(w http.ResponseWriter, r *http.Request, params SlurmV0040GetPartitionsParams)
	// ping test
	// (GET /slurm/v0.0.40/ping/)
	SlurmV0040GetPing(w http.ResponseWriter, r *http.Request)
	// request slurmctld reconfigure
	// (GET /slurm/v0.0.40/reconfigure/)
	SlurmV0040GetReconfigure(w http.ResponseWriter, r *http.Request)
	// get reservation info
	// (GET /slurm/v0.0.40/reservation/{reservation_name})
	SlurmV0040GetReservation(w http.ResponseWriter, r *http.Request, reservationName string, params SlurmV0040GetReservationParams)
	// get all reservation info
	// (GET /slurm/v0.0.40/reservations/)
	SlurmV0040GetReservations(w http.ResponseWriter, r *http.Request, params SlurmV0040GetReservationsParams)
	// get fairshare info
	// (GET /slurm/v0.0.40/shares)
	SlurmV0040GetShares(w http.ResponseWriter, r *http.Request, params SlurmV0040GetSharesParams)
	// Delete account
	// (DELETE /slurmdb/v0.0.40/account/{account_name})
	SlurmdbV0040DeleteAccount(w http.ResponseWriter, r *http.Request, accountName string)
	// Get account info
	// (GET /slurmdb/v0.0.40/account/{account_name})
	SlurmdbV0040GetAccount(w http.ResponseWriter, r *http.Request, accountName string, params SlurmdbV0040GetAccountParams)
	// Get account list
	// (GET /slurmdb/v0.0.40/accounts/)
	SlurmdbV0040GetAccounts(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetAccountsParams)
	// Add/update list of accounts
	// (POST /slurmdb/v0.0.40/accounts/)
	SlurmdbV0040PostAccounts(w http.ResponseWriter, r *http.Request)
	// Add accounts with conditional association
	// (POST /slurmdb/v0.0.40/accounts_association/)
	SlurmdbV0040PostAccountsAssociation(w http.ResponseWriter, r *http.Request)
	// Delete association
	// (DELETE /slurmdb/v0.0.40/association/)
	SlurmdbV0040DeleteAssociation(w http.ResponseWriter, r *http.Request, params SlurmdbV0040DeleteAssociationParams)
	// Get association info
	// (GET /slurmdb/v0.0.40/association/)
	SlurmdbV0040GetAssociation(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetAssociationParams)
	// Delete associations
	// (DELETE /slurmdb/v0.0.40/associations/)
	SlurmdbV0040DeleteAssociations(w http.ResponseWriter, r *http.Request, params SlurmdbV0040DeleteAssociationsParams)
	// Get association list
	// (GET /slurmdb/v0.0.40/associations/)
	SlurmdbV0040GetAssociations(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetAssociationsParams)
	// Set associations info
	// (POST /slurmdb/v0.0.40/associations/)
	SlurmdbV0040PostAssociations(w http.ResponseWriter, r *http.Request)
	// Delete cluster
	// (DELETE /slurmdb/v0.0.40/cluster/{cluster_name})
	SlurmdbV0040DeleteCluster(w http.ResponseWriter, r *http.Request, clusterName string, params SlurmdbV0040DeleteClusterParams)
	// Get cluster info
	// (GET /slurmdb/v0.0.40/cluster/{cluster_name})
	SlurmdbV0040GetCluster(w http.ResponseWriter, r *http.Request, clusterName string, params SlurmdbV0040GetClusterParams)
	// Get cluster list
	// (GET /slurmdb/v0.0.40/clusters/)
	SlurmdbV0040GetClusters(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetClustersParams)
	// Get cluster list
	// (POST /slurmdb/v0.0.40/clusters/)
	SlurmdbV0040PostClusters(w http.ResponseWriter, r *http.Request, params SlurmdbV0040PostClustersParams)
	// Dump all configuration information
	// (GET /slurmdb/v0.0.40/config)
	SlurmdbV0040GetConfig(w http.ResponseWriter, r *http.Request)
	// Load all configuration information
	// (POST /slurmdb/v0.0.40/config)
	SlurmdbV0040PostConfig(w http.ResponseWriter, r *http.Request)
	// Get slurmdb diagnostics
	// (GET /slurmdb/v0.0.40/diag/)
	SlurmdbV0040GetDiag(w http.ResponseWriter, r *http.Request)
	// Get instance info
	// (GET /slurmdb/v0.0.40/instance/)
	SlurmdbV0040GetInstance(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetInstanceParams)
	// Get instance list
	// (GET /slurmdb/v0.0.40/instances/)
	SlurmdbV0040GetInstances(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetInstancesParams)
	// Get job info
	// (GET /slurmdb/v0.0.40/job/{job_id})
	SlurmdbV0040GetJob(w http.ResponseWriter, r *http.Request, jobId string)
	// Get job list
	// (GET /slurmdb/v0.0.40/jobs/)
	SlurmdbV0040GetJobs(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetJobsParams)
	// Get QOS list
	// (GET /slurmdb/v0.0.40/qos/)
	SlurmdbV0040GetQos(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetQosParams)
	// Add or update QOSs
	// (POST /slurmdb/v0.0.40/qos/)
	SlurmdbV0040PostQos(w http.ResponseWriter, r *http.Request, params SlurmdbV0040PostQosParams)
	// Delete QOS
	// (DELETE /slurmdb/v0.0.40/qos/{qos})
	SlurmdbV0040DeleteSingleQos(w http.ResponseWriter, r *http.Request, qos string)
	// Get QOS info
	// (GET /slurmdb/v0.0.40/qos/{qos})
	SlurmdbV0040GetSingleQos(w http.ResponseWriter, r *http.Request, qos string, params SlurmdbV0040GetSingleQosParams)
	// Get TRES info
	// (GET /slurmdb/v0.0.40/tres/)
	SlurmdbV0040GetTres(w http.ResponseWriter, r *http.Request)
	// Add TRES
	// (POST /slurmdb/v0.0.40/tres/)
	SlurmdbV0040PostTres(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /slurmdb/v0.0.40/user/{name})
	SlurmdbV0040DeleteUser(w http.ResponseWriter, r *http.Request, name string)
	// Get user info
	// (GET /slurmdb/v0.0.40/user/{name})
	SlurmdbV0040GetUser(w http.ResponseWriter, r *http.Request, name string, params SlurmdbV0040GetUserParams)
	// Get user list
	// (GET /slurmdb/v0.0.40/users/)
	SlurmdbV0040GetUsers(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetUsersParams)
	// Update users
	// (POST /slurmdb/v0.0.40/users/)
	SlurmdbV0040PostUsers(w http.ResponseWriter, r *http.Request)
	// Add users with conditional association
	// (POST /slurmdb/v0.0.40/users_association/)
	SlurmdbV0040PostUsersAssociation(w http.ResponseWriter, r *http.Request, params SlurmdbV0040PostUsersAssociationParams)
	// Delete wckey
	// (DELETE /slurmdb/v0.0.40/wckey/{id})
	SlurmdbV0040DeleteWckey(w http.ResponseWriter, r *http.Request, id string)
	// Get wckey info
	// (GET /slurmdb/v0.0.40/wckey/{id})
	SlurmdbV0040GetWckey(w http.ResponseWriter, r *http.Request, id string)
	// Get wckey list
	// (GET /slurmdb/v0.0.40/wckeys/)
	SlurmdbV0040GetWckeys(w http.ResponseWriter, r *http.Request, params SlurmdbV0040GetWckeysParams)
	// Add or update wckeys
	// (POST /slurmdb/v0.0.40/wckeys/)
	SlurmdbV0040PostWckeys(w http.ResponseWriter, r *http.Request, params SlurmdbV0040PostWckeysParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SlurmV0040GetDiag operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetDiag(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetDiag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040PostJobSubmit operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040PostJobSubmit(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040PostJobSubmit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040DeleteJob operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040DeleteJob(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", r.PathValue("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040DeleteJobParams

	// ------------- Optional query parameter "signal" -------------

	err = runtime.BindQueryParameter("form", false, false, "signal", r.URL.Query(), &params.Signal)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "signal", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040DeleteJob(w, r, jobId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetJob operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetJob(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", r.PathValue("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetJobParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetJob(w, r, jobId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040PostJob operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040PostJob(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", r.PathValue("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040PostJob(w, r, jobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040DeleteJobs operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040DeleteJobs(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040DeleteJobs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetJobs operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetJobsParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetJobsState operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetJobsState(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetJobsStateParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetJobsState(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetLicenses operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetLicenses(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetLicenses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040DeleteNode operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040DeleteNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "node_name" -------------
	var nodeName string

	err = runtime.BindStyledParameterWithOptions("simple", "node_name", r.PathValue("node_name"), &nodeName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040DeleteNode(w, r, nodeName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetNode operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "node_name" -------------
	var nodeName string

	err = runtime.BindStyledParameterWithOptions("simple", "node_name", r.PathValue("node_name"), &nodeName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetNodeParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetNode(w, r, nodeName, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040PostNode operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040PostNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "node_name" -------------
	var nodeName string

	err = runtime.BindStyledParameterWithOptions("simple", "node_name", r.PathValue("node_name"), &nodeName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040PostNode(w, r, nodeName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetNodes operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetNodes(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetNodesParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetNodes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetPartition operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetPartition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "partition_name" -------------
	var partitionName string

	err = runtime.BindStyledParameterWithOptions("simple", "partition_name", r.PathValue("partition_name"), &partitionName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "partition_name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetPartitionParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetPartition(w, r, partitionName, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetPartitions operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetPartitions(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetPartitionsParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetPartitions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetPing operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetPing(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetPing(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetReconfigure operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetReconfigure(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetReconfigure(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetReservation operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetReservation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reservation_name" -------------
	var reservationName string

	err = runtime.BindStyledParameterWithOptions("simple", "reservation_name", r.PathValue("reservation_name"), &reservationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reservation_name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetReservationParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetReservation(w, r, reservationName, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetReservations operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetReservations(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetReservationsParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetReservations(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmV0040GetShares operation middleware
func (siw *ServerInterfaceWrapper) SlurmV0040GetShares(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmV0040GetSharesParams

	// ------------- Optional query parameter "accounts" -------------

	err = runtime.BindQueryParameter("form", false, false, "accounts", r.URL.Query(), &params.Accounts)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accounts", Err: err})
		return
	}

	// ------------- Optional query parameter "users" -------------

	err = runtime.BindQueryParameter("form", false, false, "users", r.URL.Query(), &params.Users)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "users", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmV0040GetShares(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040DeleteAccount operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040DeleteAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "account_name" -------------
	var accountName string

	err = runtime.BindStyledParameterWithOptions("simple", "account_name", r.PathValue("account_name"), &accountName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account_name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040DeleteAccount(w, r, accountName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetAccount operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "account_name" -------------
	var accountName string

	err = runtime.BindStyledParameterWithOptions("simple", "account_name", r.PathValue("account_name"), &accountName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account_name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetAccountParams

	// ------------- Optional query parameter "with_assocs" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_assocs", r.URL.Query(), &params.WithAssocs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_assocs", Err: err})
		return
	}

	// ------------- Optional query parameter "with_coords" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_coords", r.URL.Query(), &params.WithCoords)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_coords", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetAccount(w, r, accountName, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetAccounts operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetAccounts(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetAccountsParams

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", false, false, "description", r.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "description", Err: err})
		return
	}

	// ------------- Optional query parameter "with_assocs" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_assocs", r.URL.Query(), &params.WithAssocs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_assocs", Err: err})
		return
	}

	// ------------- Optional query parameter "with_coords" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_coords", r.URL.Query(), &params.WithCoords)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_coords", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetAccounts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostAccounts operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostAccounts(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostAccounts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostAccountsAssociation operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostAccountsAssociation(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostAccountsAssociation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040DeleteAssociation operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040DeleteAssociation(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040DeleteAssociationParams

	// ------------- Optional query parameter "account" -------------

	err = runtime.BindQueryParameter("form", false, false, "account", r.URL.Query(), &params.Account)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "default_qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "default_qos", r.URL.Query(), &params.DefaultQos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "default_qos", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "only_defaults" -------------

	err = runtime.BindQueryParameter("form", false, false, "only_defaults", r.URL.Query(), &params.OnlyDefaults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "only_defaults", Err: err})
		return
	}

	// ------------- Optional query parameter "parent_account" -------------

	err = runtime.BindQueryParameter("form", false, false, "parent_account", r.URL.Query(), &params.ParentAccount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "parent_account", Err: err})
		return
	}

	// ------------- Optional query parameter "partition" -------------

	err = runtime.BindQueryParameter("form", false, false, "partition", r.URL.Query(), &params.Partition)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "partition", Err: err})
		return
	}

	// ------------- Optional query parameter "qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "qos", r.URL.Query(), &params.Qos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "qos", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_end", r.URL.Query(), &params.UsageEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_end", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_start", r.URL.Query(), &params.UsageStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_start", Err: err})
		return
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", false, false, "user", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Optional query parameter "with_usage" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_usage", r.URL.Query(), &params.WithUsage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_usage", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	// ------------- Optional query parameter "with_raw_qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_raw_qos", r.URL.Query(), &params.WithRawQos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_raw_qos", Err: err})
		return
	}

	// ------------- Optional query parameter "with_sub_accts" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_sub_accts", r.URL.Query(), &params.WithSubAccts)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_sub_accts", Err: err})
		return
	}

	// ------------- Optional query parameter "without_parent_info" -------------

	err = runtime.BindQueryParameter("form", false, false, "without_parent_info", r.URL.Query(), &params.WithoutParentInfo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "without_parent_info", Err: err})
		return
	}

	// ------------- Optional query parameter "without_parent_limits" -------------

	err = runtime.BindQueryParameter("form", false, false, "without_parent_limits", r.URL.Query(), &params.WithoutParentLimits)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "without_parent_limits", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040DeleteAssociation(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetAssociation operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetAssociation(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetAssociationParams

	// ------------- Optional query parameter "account" -------------

	err = runtime.BindQueryParameter("form", false, false, "account", r.URL.Query(), &params.Account)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "default_qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "default_qos", r.URL.Query(), &params.DefaultQos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "default_qos", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "only_defaults" -------------

	err = runtime.BindQueryParameter("form", false, false, "only_defaults", r.URL.Query(), &params.OnlyDefaults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "only_defaults", Err: err})
		return
	}

	// ------------- Optional query parameter "parent_account" -------------

	err = runtime.BindQueryParameter("form", false, false, "parent_account", r.URL.Query(), &params.ParentAccount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "parent_account", Err: err})
		return
	}

	// ------------- Optional query parameter "partition" -------------

	err = runtime.BindQueryParameter("form", false, false, "partition", r.URL.Query(), &params.Partition)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "partition", Err: err})
		return
	}

	// ------------- Optional query parameter "qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "qos", r.URL.Query(), &params.Qos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "qos", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_end", r.URL.Query(), &params.UsageEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_end", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_start", r.URL.Query(), &params.UsageStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_start", Err: err})
		return
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", false, false, "user", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Optional query parameter "with_usage" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_usage", r.URL.Query(), &params.WithUsage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_usage", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	// ------------- Optional query parameter "with_raw_qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_raw_qos", r.URL.Query(), &params.WithRawQos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_raw_qos", Err: err})
		return
	}

	// ------------- Optional query parameter "with_sub_accts" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_sub_accts", r.URL.Query(), &params.WithSubAccts)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_sub_accts", Err: err})
		return
	}

	// ------------- Optional query parameter "without_parent_info" -------------

	err = runtime.BindQueryParameter("form", false, false, "without_parent_info", r.URL.Query(), &params.WithoutParentInfo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "without_parent_info", Err: err})
		return
	}

	// ------------- Optional query parameter "without_parent_limits" -------------

	err = runtime.BindQueryParameter("form", false, false, "without_parent_limits", r.URL.Query(), &params.WithoutParentLimits)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "without_parent_limits", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetAssociation(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040DeleteAssociations operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040DeleteAssociations(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040DeleteAssociationsParams

	// ------------- Optional query parameter "account" -------------

	err = runtime.BindQueryParameter("form", false, false, "account", r.URL.Query(), &params.Account)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "default_qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "default_qos", r.URL.Query(), &params.DefaultQos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "default_qos", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "only_defaults" -------------

	err = runtime.BindQueryParameter("form", false, false, "only_defaults", r.URL.Query(), &params.OnlyDefaults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "only_defaults", Err: err})
		return
	}

	// ------------- Optional query parameter "parent_account" -------------

	err = runtime.BindQueryParameter("form", false, false, "parent_account", r.URL.Query(), &params.ParentAccount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "parent_account", Err: err})
		return
	}

	// ------------- Optional query parameter "partition" -------------

	err = runtime.BindQueryParameter("form", false, false, "partition", r.URL.Query(), &params.Partition)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "partition", Err: err})
		return
	}

	// ------------- Optional query parameter "qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "qos", r.URL.Query(), &params.Qos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "qos", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_end", r.URL.Query(), &params.UsageEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_end", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_start", r.URL.Query(), &params.UsageStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_start", Err: err})
		return
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", false, false, "user", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Optional query parameter "with_usage" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_usage", r.URL.Query(), &params.WithUsage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_usage", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	// ------------- Optional query parameter "with_raw_qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_raw_qos", r.URL.Query(), &params.WithRawQos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_raw_qos", Err: err})
		return
	}

	// ------------- Optional query parameter "with_sub_accts" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_sub_accts", r.URL.Query(), &params.WithSubAccts)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_sub_accts", Err: err})
		return
	}

	// ------------- Optional query parameter "without_parent_info" -------------

	err = runtime.BindQueryParameter("form", false, false, "without_parent_info", r.URL.Query(), &params.WithoutParentInfo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "without_parent_info", Err: err})
		return
	}

	// ------------- Optional query parameter "without_parent_limits" -------------

	err = runtime.BindQueryParameter("form", false, false, "without_parent_limits", r.URL.Query(), &params.WithoutParentLimits)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "without_parent_limits", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040DeleteAssociations(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetAssociations operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetAssociations(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetAssociationsParams

	// ------------- Optional query parameter "account" -------------

	err = runtime.BindQueryParameter("form", false, false, "account", r.URL.Query(), &params.Account)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "default_qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "default_qos", r.URL.Query(), &params.DefaultQos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "default_qos", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "only_defaults" -------------

	err = runtime.BindQueryParameter("form", false, false, "only_defaults", r.URL.Query(), &params.OnlyDefaults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "only_defaults", Err: err})
		return
	}

	// ------------- Optional query parameter "parent_account" -------------

	err = runtime.BindQueryParameter("form", false, false, "parent_account", r.URL.Query(), &params.ParentAccount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "parent_account", Err: err})
		return
	}

	// ------------- Optional query parameter "partition" -------------

	err = runtime.BindQueryParameter("form", false, false, "partition", r.URL.Query(), &params.Partition)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "partition", Err: err})
		return
	}

	// ------------- Optional query parameter "qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "qos", r.URL.Query(), &params.Qos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "qos", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_end", r.URL.Query(), &params.UsageEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_end", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_start", r.URL.Query(), &params.UsageStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_start", Err: err})
		return
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", false, false, "user", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Optional query parameter "with_usage" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_usage", r.URL.Query(), &params.WithUsage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_usage", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	// ------------- Optional query parameter "with_raw_qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_raw_qos", r.URL.Query(), &params.WithRawQos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_raw_qos", Err: err})
		return
	}

	// ------------- Optional query parameter "with_sub_accts" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_sub_accts", r.URL.Query(), &params.WithSubAccts)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_sub_accts", Err: err})
		return
	}

	// ------------- Optional query parameter "without_parent_info" -------------

	err = runtime.BindQueryParameter("form", false, false, "without_parent_info", r.URL.Query(), &params.WithoutParentInfo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "without_parent_info", Err: err})
		return
	}

	// ------------- Optional query parameter "without_parent_limits" -------------

	err = runtime.BindQueryParameter("form", false, false, "without_parent_limits", r.URL.Query(), &params.WithoutParentLimits)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "without_parent_limits", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetAssociations(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostAssociations operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostAssociations(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostAssociations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040DeleteCluster operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040DeleteCluster(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_name", r.PathValue("cluster_name"), &clusterName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040DeleteClusterParams

	// ------------- Optional query parameter "classification" -------------

	err = runtime.BindQueryParameter("form", false, false, "classification", r.URL.Query(), &params.Classification)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "classification", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "federation" -------------

	err = runtime.BindQueryParameter("form", false, false, "federation", r.URL.Query(), &params.Federation)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "federation", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "rpc_version" -------------

	err = runtime.BindQueryParameter("form", false, false, "rpc_version", r.URL.Query(), &params.RpcVersion)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rpc_version", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_end", r.URL.Query(), &params.UsageEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_end", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_start", r.URL.Query(), &params.UsageStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_start", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	// ------------- Optional query parameter "with_usage" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_usage", r.URL.Query(), &params.WithUsage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_usage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040DeleteCluster(w, r, clusterName, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetCluster operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetCluster(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_name", r.PathValue("cluster_name"), &clusterName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetClusterParams

	// ------------- Optional query parameter "classification" -------------

	err = runtime.BindQueryParameter("form", false, false, "classification", r.URL.Query(), &params.Classification)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "classification", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "federation" -------------

	err = runtime.BindQueryParameter("form", false, false, "federation", r.URL.Query(), &params.Federation)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "federation", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "rpc_version" -------------

	err = runtime.BindQueryParameter("form", false, false, "rpc_version", r.URL.Query(), &params.RpcVersion)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rpc_version", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_end", r.URL.Query(), &params.UsageEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_end", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_start", r.URL.Query(), &params.UsageStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_start", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	// ------------- Optional query parameter "with_usage" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_usage", r.URL.Query(), &params.WithUsage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_usage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetCluster(w, r, clusterName, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetClusters operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetClusters(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetClustersParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetClusters(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostClusters operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostClusters(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040PostClustersParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostClusters(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetConfig operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetConfig(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostConfig operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostConfig(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetDiag operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetDiag(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetDiag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetInstance operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetInstance(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetInstanceParams

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "extra" -------------

	err = runtime.BindQueryParameter("form", false, false, "extra", r.URL.Query(), &params.Extra)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "extra", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "instance_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "instance_id", r.URL.Query(), &params.InstanceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instance_id", Err: err})
		return
	}

	// ------------- Optional query parameter "instance_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "instance_type", r.URL.Query(), &params.InstanceType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instance_type", Err: err})
		return
	}

	// ------------- Optional query parameter "node_list" -------------

	err = runtime.BindQueryParameter("form", false, false, "node_list", r.URL.Query(), &params.NodeList)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_list", Err: err})
		return
	}

	// ------------- Optional query parameter "time_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "time_end", r.URL.Query(), &params.TimeEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time_end", Err: err})
		return
	}

	// ------------- Optional query parameter "time_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "time_start", r.URL.Query(), &params.TimeStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time_start", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetInstance(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetInstances operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetInstances(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetInstancesParams

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "extra" -------------

	err = runtime.BindQueryParameter("form", false, false, "extra", r.URL.Query(), &params.Extra)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "extra", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "instance_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "instance_id", r.URL.Query(), &params.InstanceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instance_id", Err: err})
		return
	}

	// ------------- Optional query parameter "instance_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "instance_type", r.URL.Query(), &params.InstanceType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instance_type", Err: err})
		return
	}

	// ------------- Optional query parameter "node_list" -------------

	err = runtime.BindQueryParameter("form", false, false, "node_list", r.URL.Query(), &params.NodeList)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_list", Err: err})
		return
	}

	// ------------- Optional query parameter "time_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "time_end", r.URL.Query(), &params.TimeEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time_end", Err: err})
		return
	}

	// ------------- Optional query parameter "time_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "time_start", r.URL.Query(), &params.TimeStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time_start", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetInstances(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetJob operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetJob(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", r.PathValue("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetJob(w, r, jobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetJobs operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetJobsParams

	// ------------- Optional query parameter "account" -------------

	err = runtime.BindQueryParameter("form", false, false, "account", r.URL.Query(), &params.Account)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account", Err: err})
		return
	}

	// ------------- Optional query parameter "association" -------------

	err = runtime.BindQueryParameter("form", false, false, "association", r.URL.Query(), &params.Association)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "association", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "constraints" -------------

	err = runtime.BindQueryParameter("form", false, false, "constraints", r.URL.Query(), &params.Constraints)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "constraints", Err: err})
		return
	}

	// ------------- Optional query parameter "cpus_max" -------------

	err = runtime.BindQueryParameter("form", false, false, "cpus_max", r.URL.Query(), &params.CpusMax)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cpus_max", Err: err})
		return
	}

	// ------------- Optional query parameter "cpus_min" -------------

	err = runtime.BindQueryParameter("form", false, false, "cpus_min", r.URL.Query(), &params.CpusMin)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cpus_min", Err: err})
		return
	}

	// ------------- Optional query parameter "scheduler_unset" -------------

	err = runtime.BindQueryParameter("form", false, false, "scheduler_unset", r.URL.Query(), &params.SchedulerUnset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scheduler_unset", Err: err})
		return
	}

	// ------------- Optional query parameter "scheduled_on_submit" -------------

	err = runtime.BindQueryParameter("form", false, false, "scheduled_on_submit", r.URL.Query(), &params.ScheduledOnSubmit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scheduled_on_submit", Err: err})
		return
	}

	// ------------- Optional query parameter "scheduled_by_main" -------------

	err = runtime.BindQueryParameter("form", false, false, "scheduled_by_main", r.URL.Query(), &params.ScheduledByMain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scheduled_by_main", Err: err})
		return
	}

	// ------------- Optional query parameter "scheduled_by_backfill" -------------

	err = runtime.BindQueryParameter("form", false, false, "scheduled_by_backfill", r.URL.Query(), &params.ScheduledByBackfill)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scheduled_by_backfill", Err: err})
		return
	}

	// ------------- Optional query parameter "job_started" -------------

	err = runtime.BindQueryParameter("form", false, false, "job_started", r.URL.Query(), &params.JobStarted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_started", Err: err})
		return
	}

	// ------------- Optional query parameter "exit_code" -------------

	err = runtime.BindQueryParameter("form", false, false, "exit_code", r.URL.Query(), &params.ExitCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exit_code", Err: err})
		return
	}

	// ------------- Optional query parameter "show_duplicates" -------------

	err = runtime.BindQueryParameter("form", false, false, "show_duplicates", r.URL.Query(), &params.ShowDuplicates)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "show_duplicates", Err: err})
		return
	}

	// ------------- Optional query parameter "skip_steps" -------------

	err = runtime.BindQueryParameter("form", false, false, "skip_steps", r.URL.Query(), &params.SkipSteps)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skip_steps", Err: err})
		return
	}

	// ------------- Optional query parameter "disable_truncate_usage_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "disable_truncate_usage_time", r.URL.Query(), &params.DisableTruncateUsageTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "disable_truncate_usage_time", Err: err})
		return
	}

	// ------------- Optional query parameter "whole_hetjob" -------------

	err = runtime.BindQueryParameter("form", false, false, "whole_hetjob", r.URL.Query(), &params.WholeHetjob)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "whole_hetjob", Err: err})
		return
	}

	// ------------- Optional query parameter "disable_whole_hetjob" -------------

	err = runtime.BindQueryParameter("form", false, false, "disable_whole_hetjob", r.URL.Query(), &params.DisableWholeHetjob)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "disable_whole_hetjob", Err: err})
		return
	}

	// ------------- Optional query parameter "disable_wait_for_result" -------------

	err = runtime.BindQueryParameter("form", false, false, "disable_wait_for_result", r.URL.Query(), &params.DisableWaitForResult)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "disable_wait_for_result", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_time_as_submit_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_time_as_submit_time", r.URL.Query(), &params.UsageTimeAsSubmitTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_time_as_submit_time", Err: err})
		return
	}

	// ------------- Optional query parameter "show_batch_script" -------------

	err = runtime.BindQueryParameter("form", false, false, "show_batch_script", r.URL.Query(), &params.ShowBatchScript)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "show_batch_script", Err: err})
		return
	}

	// ------------- Optional query parameter "show_job_environment" -------------

	err = runtime.BindQueryParameter("form", false, false, "show_job_environment", r.URL.Query(), &params.ShowJobEnvironment)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "show_job_environment", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "groups" -------------

	err = runtime.BindQueryParameter("form", false, false, "groups", r.URL.Query(), &params.Groups)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groups", Err: err})
		return
	}

	// ------------- Optional query parameter "job_name" -------------

	err = runtime.BindQueryParameter("form", false, false, "job_name", r.URL.Query(), &params.JobName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_name", Err: err})
		return
	}

	// ------------- Optional query parameter "nodes_max" -------------

	err = runtime.BindQueryParameter("form", false, false, "nodes_max", r.URL.Query(), &params.NodesMax)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodes_max", Err: err})
		return
	}

	// ------------- Optional query parameter "nodes_min" -------------

	err = runtime.BindQueryParameter("form", false, false, "nodes_min", r.URL.Query(), &params.NodesMin)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodes_min", Err: err})
		return
	}

	// ------------- Optional query parameter "partition" -------------

	err = runtime.BindQueryParameter("form", false, false, "partition", r.URL.Query(), &params.Partition)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "partition", Err: err})
		return
	}

	// ------------- Optional query parameter "qos" -------------

	err = runtime.BindQueryParameter("form", false, false, "qos", r.URL.Query(), &params.Qos)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "qos", Err: err})
		return
	}

	// ------------- Optional query parameter "reason" -------------

	err = runtime.BindQueryParameter("form", false, false, "reason", r.URL.Query(), &params.Reason)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reason", Err: err})
		return
	}

	// ------------- Optional query parameter "reservation" -------------

	err = runtime.BindQueryParameter("form", false, false, "reservation", r.URL.Query(), &params.Reservation)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reservation", Err: err})
		return
	}

	// ------------- Optional query parameter "reservation_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "reservation_id", r.URL.Query(), &params.ReservationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reservation_id", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", false, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	// ------------- Optional query parameter "step" -------------

	err = runtime.BindQueryParameter("form", false, false, "step", r.URL.Query(), &params.Step)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step", Err: err})
		return
	}

	// ------------- Optional query parameter "timelimit_max" -------------

	err = runtime.BindQueryParameter("form", false, false, "timelimit_max", r.URL.Query(), &params.TimelimitMax)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timelimit_max", Err: err})
		return
	}

	// ------------- Optional query parameter "timelimit_min" -------------

	err = runtime.BindQueryParameter("form", false, false, "timelimit_min", r.URL.Query(), &params.TimelimitMin)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timelimit_min", Err: err})
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "end_time", r.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_time", Err: err})
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "start_time", r.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_time", Err: err})
		return
	}

	// ------------- Optional query parameter "submit_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "submit_time", r.URL.Query(), &params.SubmitTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "submit_time", Err: err})
		return
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", false, false, "node", r.URL.Query(), &params.Node)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node", Err: err})
		return
	}

	// ------------- Optional query parameter "users" -------------

	err = runtime.BindQueryParameter("form", false, false, "users", r.URL.Query(), &params.Users)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "users", Err: err})
		return
	}

	// ------------- Optional query parameter "wckey" -------------

	err = runtime.BindQueryParameter("form", false, false, "wckey", r.URL.Query(), &params.Wckey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wckey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetQos operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetQos(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetQosParams

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", false, false, "description", r.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "description", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "preempt_mode" -------------

	err = runtime.BindQueryParameter("form", false, false, "preempt_mode", r.URL.Query(), &params.PreemptMode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "preempt_mode", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetQos(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostQos operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostQos(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040PostQosParams

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", false, false, "description", r.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "description", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "preempt_mode" -------------

	err = runtime.BindQueryParameter("form", false, false, "preempt_mode", r.URL.Query(), &params.PreemptMode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "preempt_mode", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostQos(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040DeleteSingleQos operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040DeleteSingleQos(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "qos" -------------
	var qos string

	err = runtime.BindStyledParameterWithOptions("simple", "qos", r.PathValue("qos"), &qos, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "qos", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040DeleteSingleQos(w, r, qos)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetSingleQos operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetSingleQos(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "qos" -------------
	var qos string

	err = runtime.BindStyledParameterWithOptions("simple", "qos", r.PathValue("qos"), &qos, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "qos", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetSingleQosParams

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetSingleQos(w, r, qos, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetTres operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetTres(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetTres(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostTres operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostTres(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostTres(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040DeleteUser(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetUser operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetUserParams

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	// ------------- Optional query parameter "with_assocs" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_assocs", r.URL.Query(), &params.WithAssocs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_assocs", Err: err})
		return
	}

	// ------------- Optional query parameter "with_coords" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_coords", r.URL.Query(), &params.WithCoords)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_coords", Err: err})
		return
	}

	// ------------- Optional query parameter "with_wckeys" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_wckeys", r.URL.Query(), &params.WithWckeys)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_wckeys", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetUser(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetUsers operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetUsersParams

	// ------------- Optional query parameter "admin_level" -------------

	err = runtime.BindQueryParameter("form", false, false, "admin_level", r.URL.Query(), &params.AdminLevel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "admin_level", Err: err})
		return
	}

	// ------------- Optional query parameter "default_account" -------------

	err = runtime.BindQueryParameter("form", false, false, "default_account", r.URL.Query(), &params.DefaultAccount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "default_account", Err: err})
		return
	}

	// ------------- Optional query parameter "default_wckey" -------------

	err = runtime.BindQueryParameter("form", false, false, "default_wckey", r.URL.Query(), &params.DefaultWckey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "default_wckey", Err: err})
		return
	}

	// ------------- Optional query parameter "with_assocs" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_assocs", r.URL.Query(), &params.WithAssocs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_assocs", Err: err})
		return
	}

	// ------------- Optional query parameter "with_coords" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_coords", r.URL.Query(), &params.WithCoords)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_coords", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	// ------------- Optional query parameter "with_wckeys" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_wckeys", r.URL.Query(), &params.WithWckeys)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_wckeys", Err: err})
		return
	}

	// ------------- Optional query parameter "without_defaults" -------------

	err = runtime.BindQueryParameter("form", false, false, "without_defaults", r.URL.Query(), &params.WithoutDefaults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "without_defaults", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostUsers operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostUsersAssociation operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostUsersAssociation(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040PostUsersAssociationParams

	// ------------- Optional query parameter "update_time" -------------

	err = runtime.BindQueryParameter("form", false, false, "update_time", r.URL.Query(), &params.UpdateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "update_time", Err: err})
		return
	}

	// ------------- Optional query parameter "flags" -------------

	err = runtime.BindQueryParameter("form", false, false, "flags", r.URL.Query(), &params.Flags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostUsersAssociation(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040DeleteWckey operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040DeleteWckey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040DeleteWckey(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetWckey operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetWckey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetWckey(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040GetWckeys operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040GetWckeys(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040GetWckeysParams

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "only_defaults" -------------

	err = runtime.BindQueryParameter("form", false, false, "only_defaults", r.URL.Query(), &params.OnlyDefaults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "only_defaults", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_end", r.URL.Query(), &params.UsageEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_end", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_start", r.URL.Query(), &params.UsageStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_start", Err: err})
		return
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", false, false, "user", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Optional query parameter "with_usage" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_usage", r.URL.Query(), &params.WithUsage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_usage", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040GetWckeys(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SlurmdbV0040PostWckeys operation middleware
func (siw *ServerInterfaceWrapper) SlurmdbV0040PostWckeys(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, UserScopes, []string{})

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SlurmdbV0040PostWckeysParams

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", false, false, "cluster", r.URL.Query(), &params.Cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", false, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "only_defaults" -------------

	err = runtime.BindQueryParameter("form", false, false, "only_defaults", r.URL.Query(), &params.OnlyDefaults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "only_defaults", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_end" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_end", r.URL.Query(), &params.UsageEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_end", Err: err})
		return
	}

	// ------------- Optional query parameter "usage_start" -------------

	err = runtime.BindQueryParameter("form", false, false, "usage_start", r.URL.Query(), &params.UsageStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "usage_start", Err: err})
		return
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", false, false, "user", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Optional query parameter "with_usage" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_usage", r.URL.Query(), &params.WithUsage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_usage", Err: err})
		return
	}

	// ------------- Optional query parameter "with_deleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "with_deleted", r.URL.Query(), &params.WithDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_deleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SlurmdbV0040PostWckeys(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/diag/", wrapper.SlurmV0040GetDiag)
	m.HandleFunc("POST "+options.BaseURL+"/slurm/v0.0.40/job/submit", wrapper.SlurmV0040PostJobSubmit)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurm/v0.0.40/job/{job_id}", wrapper.SlurmV0040DeleteJob)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/job/{job_id}", wrapper.SlurmV0040GetJob)
	m.HandleFunc("POST "+options.BaseURL+"/slurm/v0.0.40/job/{job_id}", wrapper.SlurmV0040PostJob)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurm/v0.0.40/jobs/", wrapper.SlurmV0040DeleteJobs)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/jobs/", wrapper.SlurmV0040GetJobs)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/jobs/state/", wrapper.SlurmV0040GetJobsState)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/licenses/", wrapper.SlurmV0040GetLicenses)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurm/v0.0.40/node/{node_name}", wrapper.SlurmV0040DeleteNode)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/node/{node_name}", wrapper.SlurmV0040GetNode)
	m.HandleFunc("POST "+options.BaseURL+"/slurm/v0.0.40/node/{node_name}", wrapper.SlurmV0040PostNode)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/nodes/", wrapper.SlurmV0040GetNodes)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/partition/{partition_name}", wrapper.SlurmV0040GetPartition)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/partitions/", wrapper.SlurmV0040GetPartitions)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/ping/", wrapper.SlurmV0040GetPing)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/reconfigure/", wrapper.SlurmV0040GetReconfigure)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/reservation/{reservation_name}", wrapper.SlurmV0040GetReservation)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/reservations/", wrapper.SlurmV0040GetReservations)
	m.HandleFunc("GET "+options.BaseURL+"/slurm/v0.0.40/shares", wrapper.SlurmV0040GetShares)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurmdb/v0.0.40/account/{account_name}", wrapper.SlurmdbV0040DeleteAccount)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/account/{account_name}", wrapper.SlurmdbV0040GetAccount)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/accounts/", wrapper.SlurmdbV0040GetAccounts)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/accounts/", wrapper.SlurmdbV0040PostAccounts)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/accounts_association/", wrapper.SlurmdbV0040PostAccountsAssociation)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurmdb/v0.0.40/association/", wrapper.SlurmdbV0040DeleteAssociation)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/association/", wrapper.SlurmdbV0040GetAssociation)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurmdb/v0.0.40/associations/", wrapper.SlurmdbV0040DeleteAssociations)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/associations/", wrapper.SlurmdbV0040GetAssociations)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/associations/", wrapper.SlurmdbV0040PostAssociations)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurmdb/v0.0.40/cluster/{cluster_name}", wrapper.SlurmdbV0040DeleteCluster)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/cluster/{cluster_name}", wrapper.SlurmdbV0040GetCluster)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/clusters/", wrapper.SlurmdbV0040GetClusters)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/clusters/", wrapper.SlurmdbV0040PostClusters)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/config", wrapper.SlurmdbV0040GetConfig)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/config", wrapper.SlurmdbV0040PostConfig)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/diag/", wrapper.SlurmdbV0040GetDiag)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/instance/", wrapper.SlurmdbV0040GetInstance)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/instances/", wrapper.SlurmdbV0040GetInstances)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/job/{job_id}", wrapper.SlurmdbV0040GetJob)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/jobs/", wrapper.SlurmdbV0040GetJobs)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/qos/", wrapper.SlurmdbV0040GetQos)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/qos/", wrapper.SlurmdbV0040PostQos)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurmdb/v0.0.40/qos/{qos}", wrapper.SlurmdbV0040DeleteSingleQos)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/qos/{qos}", wrapper.SlurmdbV0040GetSingleQos)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/tres/", wrapper.SlurmdbV0040GetTres)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/tres/", wrapper.SlurmdbV0040PostTres)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurmdb/v0.0.40/user/{name}", wrapper.SlurmdbV0040DeleteUser)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/user/{name}", wrapper.SlurmdbV0040GetUser)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/users/", wrapper.SlurmdbV0040GetUsers)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/users/", wrapper.SlurmdbV0040PostUsers)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/users_association/", wrapper.SlurmdbV0040PostUsersAssociation)
	m.HandleFunc("DELETE "+options.BaseURL+"/slurmdb/v0.0.40/wckey/{id}", wrapper.SlurmdbV0040DeleteWckey)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/wckey/{id}", wrapper.SlurmdbV0040GetWckey)
	m.HandleFunc("GET "+options.BaseURL+"/slurmdb/v0.0.40/wckeys/", wrapper.SlurmdbV0040GetWckeys)
	m.HandleFunc("POST "+options.BaseURL+"/slurmdb/v0.0.40/wckeys/", wrapper.SlurmdbV0040PostWckeys)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
