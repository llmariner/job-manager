// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: api/v1/batch_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InternalBatchJob_State int32

const (
	InternalBatchJob_STATE_UNSPECIFIED InternalBatchJob_State = 0
	InternalBatchJob_QUEUED            InternalBatchJob_State = 1
	InternalBatchJob_RUNNING           InternalBatchJob_State = 2
	InternalBatchJob_SUCCEEDED         InternalBatchJob_State = 3
	InternalBatchJob_FAILED            InternalBatchJob_State = 4
	InternalBatchJob_CANCELED          InternalBatchJob_State = 5
	InternalBatchJob_DELETED           InternalBatchJob_State = 6
)

// Enum value maps for InternalBatchJob_State.
var (
	InternalBatchJob_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "QUEUED",
		2: "RUNNING",
		3: "SUCCEEDED",
		4: "FAILED",
		5: "CANCELED",
		6: "DELETED",
	}
	InternalBatchJob_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"QUEUED":            1,
		"RUNNING":           2,
		"SUCCEEDED":         3,
		"FAILED":            4,
		"CANCELED":          5,
		"DELETED":           6,
	}
)

func (x InternalBatchJob_State) Enum() *InternalBatchJob_State {
	p := new(InternalBatchJob_State)
	*p = x
	return p
}

func (x InternalBatchJob_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InternalBatchJob_State) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_batch_service_proto_enumTypes[0].Descriptor()
}

func (InternalBatchJob_State) Type() protoreflect.EnumType {
	return &file_api_v1_batch_service_proto_enumTypes[0]
}

func (x InternalBatchJob_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InternalBatchJob_State.Descriptor instead.
func (InternalBatchJob_State) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{8, 0}
}

type InternalBatchJob_Action int32

const (
	InternalBatchJob_ACTION_UNSPECIFIED InternalBatchJob_Action = 0
	InternalBatchJob_CREATING           InternalBatchJob_Action = 1
	InternalBatchJob_CANCELING          InternalBatchJob_Action = 2
	InternalBatchJob_DELETING           InternalBatchJob_Action = 3
)

// Enum value maps for InternalBatchJob_Action.
var (
	InternalBatchJob_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "CREATING",
		2: "CANCELING",
		3: "DELETING",
	}
	InternalBatchJob_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"CREATING":           1,
		"CANCELING":          2,
		"DELETING":           3,
	}
)

func (x InternalBatchJob_Action) Enum() *InternalBatchJob_Action {
	p := new(InternalBatchJob_Action)
	*p = x
	return p
}

func (x InternalBatchJob_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InternalBatchJob_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_batch_service_proto_enumTypes[1].Descriptor()
}

func (InternalBatchJob_Action) Type() protoreflect.EnumType {
	return &file_api_v1_batch_service_proto_enumTypes[1]
}

func (x InternalBatchJob_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InternalBatchJob_Action.Descriptor instead.
func (InternalBatchJob_Action) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{8, 1}
}

type BatchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt           int64               `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	FinishedAt          int64               `protobuf:"varint,3,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	Error               *BatchJob_Error     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Status              string              `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Image               string              `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	Command             string              `protobuf:"bytes,7,opt,name=command,proto3" json:"command,omitempty"`
	Resources           *BatchJob_Resources `protobuf:"bytes,8,opt,name=resources,proto3" json:"resources,omitempty"`
	Envs                map[string]string   `protobuf:"bytes,9,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataFiles           []string            `protobuf:"bytes,10,rep,name=data_files,json=dataFiles,proto3" json:"data_files,omitempty"`
	ProjectId           string              `protobuf:"bytes,11,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	KubernetesNamespace string              `protobuf:"bytes,12,opt,name=kubernetes_namespace,json=kubernetesNamespace,proto3" json:"kubernetes_namespace,omitempty"`
	// cluster_id is the ID of the cluster where he job runs.
	ClusterId         string         `protobuf:"bytes,13,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Kind              *BatchJob_Kind `protobuf:"bytes,15,opt,name=kind,proto3" json:"kind,omitempty"`
	OrganizationTitle string         `protobuf:"bytes,16,opt,name=organization_title,json=organizationTitle,proto3" json:"organization_title,omitempty"`
	ProjectTitle      string         `protobuf:"bytes,17,opt,name=project_title,json=projectTitle,proto3" json:"project_title,omitempty"`
	ClusterName       string         `protobuf:"bytes,18,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *BatchJob) Reset() {
	*x = BatchJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJob) ProtoMessage() {}

func (x *BatchJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJob.ProtoReflect.Descriptor instead.
func (*BatchJob) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{0}
}

func (x *BatchJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchJob) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BatchJob) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *BatchJob) GetError() *BatchJob_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BatchJob) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BatchJob) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BatchJob) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *BatchJob) GetResources() *BatchJob_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *BatchJob) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *BatchJob) GetDataFiles() []string {
	if x != nil {
		return x.DataFiles
	}
	return nil
}

func (x *BatchJob) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BatchJob) GetKubernetesNamespace() string {
	if x != nil {
		return x.KubernetesNamespace
	}
	return ""
}

func (x *BatchJob) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BatchJob) GetKind() *BatchJob_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *BatchJob) GetOrganizationTitle() string {
	if x != nil {
		return x.OrganizationTitle
	}
	return ""
}

func (x *BatchJob) GetProjectTitle() string {
	if x != nil {
		return x.ProjectTitle
	}
	return ""
}

func (x *BatchJob) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type PyTorchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerCount int32 `protobuf:"varint,1,opt,name=worker_count,json=workerCount,proto3" json:"worker_count,omitempty"`
}

func (x *PyTorchJob) Reset() {
	*x = PyTorchJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PyTorchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PyTorchJob) ProtoMessage() {}

func (x *PyTorchJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PyTorchJob.ProtoReflect.Descriptor instead.
func (*PyTorchJob) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{1}
}

func (x *PyTorchJob) GetWorkerCount() int32 {
	if x != nil {
		return x.WorkerCount
	}
	return 0
}

type CreateBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image   string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// scripts is a map of script names to script contents.
	// The total size of the scripts should not exceed 1MB.
	Scripts   map[string][]byte   `protobuf:"bytes,3,rep,name=scripts,proto3" json:"scripts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resources *BatchJob_Resources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	Envs      map[string]string   `protobuf:"bytes,5,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// data_files is a list of file IDs that will be downloaded to the container.
	DataFiles []string       `protobuf:"bytes,6,rep,name=data_files,json=dataFiles,proto3" json:"data_files,omitempty"`
	Kind      *BatchJob_Kind `protobuf:"bytes,7,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *CreateBatchJobRequest) Reset() {
	*x = CreateBatchJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchJobRequest) ProtoMessage() {}

func (x *CreateBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchJobRequest.ProtoReflect.Descriptor instead.
func (*CreateBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBatchJobRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateBatchJobRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CreateBatchJobRequest) GetScripts() map[string][]byte {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *CreateBatchJobRequest) GetResources() *BatchJob_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *CreateBatchJobRequest) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *CreateBatchJobRequest) GetDataFiles() []string {
	if x != nil {
		return x.DataFiles
	}
	return nil
}

func (x *CreateBatchJobRequest) GetKind() *BatchJob_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

type ListBatchJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// after is the identifier for the last batch job from the previous pagination request.
	After string `protobuf:"bytes,1,opt,name=after,proto3" json:"after,omitempty"`
	// limit is the number of batch jobs to retrieve. Defaults to 20.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListBatchJobsRequest) Reset() {
	*x = ListBatchJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchJobsRequest) ProtoMessage() {}

func (x *ListBatchJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchJobsRequest.ProtoReflect.Descriptor instead.
func (*ListBatchJobsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListBatchJobsRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListBatchJobsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListBatchJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs    []*BatchJob `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	HasMore bool        `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *ListBatchJobsResponse) Reset() {
	*x = ListBatchJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchJobsResponse) ProtoMessage() {}

func (x *ListBatchJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchJobsResponse.ProtoReflect.Descriptor instead.
func (*ListBatchJobsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListBatchJobsResponse) GetJobs() []*BatchJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *ListBatchJobsResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type GetBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBatchJobRequest) Reset() {
	*x = GetBatchJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchJobRequest) ProtoMessage() {}

func (x *GetBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchJobRequest.ProtoReflect.Descriptor instead.
func (*GetBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetBatchJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelBatchJobRequest) Reset() {
	*x = CancelBatchJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBatchJobRequest) ProtoMessage() {}

func (x *CancelBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBatchJobRequest.ProtoReflect.Descriptor instead.
func (*CancelBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{6}
}

func (x *CancelBatchJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBatchJobRequest) Reset() {
	*x = DeleteBatchJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBatchJobRequest) ProtoMessage() {}

func (x *DeleteBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBatchJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteBatchJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type InternalBatchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job          *BatchJob               `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	State        InternalBatchJob_State  `protobuf:"varint,2,opt,name=state,proto3,enum=llmariner.batch.server.v1.InternalBatchJob_State" json:"state,omitempty"`
	QueuedAction InternalBatchJob_Action `protobuf:"varint,3,opt,name=queued_action,json=queuedAction,proto3,enum=llmariner.batch.server.v1.InternalBatchJob_Action" json:"queued_action,omitempty"`
}

func (x *InternalBatchJob) Reset() {
	*x = InternalBatchJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalBatchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalBatchJob) ProtoMessage() {}

func (x *InternalBatchJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalBatchJob.ProtoReflect.Descriptor instead.
func (*InternalBatchJob) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{8}
}

func (x *InternalBatchJob) GetJob() *BatchJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *InternalBatchJob) GetState() InternalBatchJob_State {
	if x != nil {
		return x.State
	}
	return InternalBatchJob_STATE_UNSPECIFIED
}

func (x *InternalBatchJob) GetQueuedAction() InternalBatchJob_Action {
	if x != nil {
		return x.QueuedAction
	}
	return InternalBatchJob_ACTION_UNSPECIFIED
}

type ListQueuedInternalBatchJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListQueuedInternalBatchJobsRequest) Reset() {
	*x = ListQueuedInternalBatchJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueuedInternalBatchJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueuedInternalBatchJobsRequest) ProtoMessage() {}

func (x *ListQueuedInternalBatchJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueuedInternalBatchJobsRequest.ProtoReflect.Descriptor instead.
func (*ListQueuedInternalBatchJobsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{9}
}

type ListQueuedInternalBatchJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*InternalBatchJob `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *ListQueuedInternalBatchJobsResponse) Reset() {
	*x = ListQueuedInternalBatchJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueuedInternalBatchJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueuedInternalBatchJobsResponse) ProtoMessage() {}

func (x *ListQueuedInternalBatchJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueuedInternalBatchJobsResponse.ProtoReflect.Descriptor instead.
func (*ListQueuedInternalBatchJobsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListQueuedInternalBatchJobsResponse) GetJobs() []*InternalBatchJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type GetInternalBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInternalBatchJobRequest) Reset() {
	*x = GetInternalBatchJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInternalBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInternalBatchJobRequest) ProtoMessage() {}

func (x *GetInternalBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInternalBatchJobRequest.ProtoReflect.Descriptor instead.
func (*GetInternalBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetInternalBatchJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateBatchJobStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State InternalBatchJob_State `protobuf:"varint,2,opt,name=state,proto3,enum=llmariner.batch.server.v1.InternalBatchJob_State" json:"state,omitempty"`
	// currently only used for FAILED state.
	Reason  string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateBatchJobStateRequest) Reset() {
	*x = UpdateBatchJobStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBatchJobStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatchJobStateRequest) ProtoMessage() {}

func (x *UpdateBatchJobStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBatchJobStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateBatchJobStateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateBatchJobStateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBatchJobStateRequest) GetState() InternalBatchJob_State {
	if x != nil {
		return x.State
	}
	return InternalBatchJob_STATE_UNSPECIFIED
}

func (x *UpdateBatchJobStateRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateBatchJobStateRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateBatchJobStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateBatchJobStateResponse) Reset() {
	*x = UpdateBatchJobStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBatchJobStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatchJobStateResponse) ProtoMessage() {}

func (x *UpdateBatchJobStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBatchJobStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateBatchJobStateResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{13}
}

type BatchJob_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BatchJob_Error) Reset() {
	*x = BatchJob_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJob_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJob_Error) ProtoMessage() {}

func (x *BatchJob_Error) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJob_Error.ProtoReflect.Descriptor instead.
func (*BatchJob_Error) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BatchJob_Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BatchJob_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BatchJob_Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuCount int32 `protobuf:"varint,1,opt,name=gpu_count,json=gpuCount,proto3" json:"gpu_count,omitempty"`
}

func (x *BatchJob_Resources) Reset() {
	*x = BatchJob_Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJob_Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJob_Resources) ProtoMessage() {}

func (x *BatchJob_Resources) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJob_Resources.ProtoReflect.Descriptor instead.
func (*BatchJob_Resources) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BatchJob_Resources) GetGpuCount() int32 {
	if x != nil {
		return x.GpuCount
	}
	return 0
}

type BatchJob_Kind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*BatchJob_Kind_Pytorch
	Kind isBatchJob_Kind_Kind `protobuf_oneof:"Kind"`
}

func (x *BatchJob_Kind) Reset() {
	*x = BatchJob_Kind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_batch_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJob_Kind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJob_Kind) ProtoMessage() {}

func (x *BatchJob_Kind) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_batch_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJob_Kind.ProtoReflect.Descriptor instead.
func (*BatchJob_Kind) Descriptor() ([]byte, []int) {
	return file_api_v1_batch_service_proto_rawDescGZIP(), []int{0, 3}
}

func (m *BatchJob_Kind) GetKind() isBatchJob_Kind_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *BatchJob_Kind) GetPytorch() *PyTorchJob {
	if x, ok := x.GetKind().(*BatchJob_Kind_Pytorch); ok {
		return x.Pytorch
	}
	return nil
}

type isBatchJob_Kind_Kind interface {
	isBatchJob_Kind_Kind()
}

type BatchJob_Kind_Pytorch struct {
	Pytorch *PyTorchJob `protobuf:"bytes,14,opt,name=pytorch,proto3,oneof"`
}

func (*BatchJob_Kind_Pytorch) isBatchJob_Kind_Kind() {}

var File_api_v1_batch_service_proto protoreflect.FileDescriptor

var file_api_v1_batch_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6c, 0x6c,
	0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x07, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2e, 0x45, 0x6e, 0x76, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x6c, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x79, 0x74, 0x6f, 0x72, 0x63, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x79, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x07, 0x70, 0x79,
	0x74, 0x6f, 0x72, 0x63, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x2f, 0x0a,
	0x0a, 0x50, 0x79, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f,
	0x04, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x6c, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6c,
	0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x6c,
	0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x42, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x6b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x6c,
	0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72,
	0x65, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa7, 0x03, 0x0a, 0x10, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x35,
	0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x6c,
	0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x22, 0x4b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x22, 0x24, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x23, 0x4c, 0x69, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62,
	0x73, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xa7, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb5, 0x05, 0x0a, 0x0c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x30, 0x2e, 0x6c,
	0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4a, 0x6f, 0x62, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x8a,
	0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73,
	0x12, 0x2f, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x7e, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x2d, 0x2e, 0x6c, 0x6c, 0x6d,
	0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x6c, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x30,
	0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x30, 0x2e, 0x6c,
	0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4a, 0x6f, 0x62, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x32, 0xb5, 0x03, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x3d, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x35, 0x2e,
	0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x6c, 0x6c, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72,
	0x2f, 0x6a, 0x6f, 0x62, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_batch_service_proto_rawDescOnce sync.Once
	file_api_v1_batch_service_proto_rawDescData = file_api_v1_batch_service_proto_rawDesc
)

func file_api_v1_batch_service_proto_rawDescGZIP() []byte {
	file_api_v1_batch_service_proto_rawDescOnce.Do(func() {
		file_api_v1_batch_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_batch_service_proto_rawDescData)
	})
	return file_api_v1_batch_service_proto_rawDescData
}

var file_api_v1_batch_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v1_batch_service_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_v1_batch_service_proto_goTypes = []interface{}{
	(InternalBatchJob_State)(0),                 // 0: llmariner.batch.server.v1.InternalBatchJob.State
	(InternalBatchJob_Action)(0),                // 1: llmariner.batch.server.v1.InternalBatchJob.Action
	(*BatchJob)(nil),                            // 2: llmariner.batch.server.v1.BatchJob
	(*PyTorchJob)(nil),                          // 3: llmariner.batch.server.v1.PyTorchJob
	(*CreateBatchJobRequest)(nil),               // 4: llmariner.batch.server.v1.CreateBatchJobRequest
	(*ListBatchJobsRequest)(nil),                // 5: llmariner.batch.server.v1.ListBatchJobsRequest
	(*ListBatchJobsResponse)(nil),               // 6: llmariner.batch.server.v1.ListBatchJobsResponse
	(*GetBatchJobRequest)(nil),                  // 7: llmariner.batch.server.v1.GetBatchJobRequest
	(*CancelBatchJobRequest)(nil),               // 8: llmariner.batch.server.v1.CancelBatchJobRequest
	(*DeleteBatchJobRequest)(nil),               // 9: llmariner.batch.server.v1.DeleteBatchJobRequest
	(*InternalBatchJob)(nil),                    // 10: llmariner.batch.server.v1.InternalBatchJob
	(*ListQueuedInternalBatchJobsRequest)(nil),  // 11: llmariner.batch.server.v1.ListQueuedInternalBatchJobsRequest
	(*ListQueuedInternalBatchJobsResponse)(nil), // 12: llmariner.batch.server.v1.ListQueuedInternalBatchJobsResponse
	(*GetInternalBatchJobRequest)(nil),          // 13: llmariner.batch.server.v1.GetInternalBatchJobRequest
	(*UpdateBatchJobStateRequest)(nil),          // 14: llmariner.batch.server.v1.UpdateBatchJobStateRequest
	(*UpdateBatchJobStateResponse)(nil),         // 15: llmariner.batch.server.v1.UpdateBatchJobStateResponse
	(*BatchJob_Error)(nil),                      // 16: llmariner.batch.server.v1.BatchJob.Error
	(*BatchJob_Resources)(nil),                  // 17: llmariner.batch.server.v1.BatchJob.Resources
	nil,                                         // 18: llmariner.batch.server.v1.BatchJob.EnvsEntry
	(*BatchJob_Kind)(nil),                       // 19: llmariner.batch.server.v1.BatchJob.Kind
	nil,                                         // 20: llmariner.batch.server.v1.CreateBatchJobRequest.ScriptsEntry
	nil,                                         // 21: llmariner.batch.server.v1.CreateBatchJobRequest.EnvsEntry
}
var file_api_v1_batch_service_proto_depIdxs = []int32{
	16, // 0: llmariner.batch.server.v1.BatchJob.error:type_name -> llmariner.batch.server.v1.BatchJob.Error
	17, // 1: llmariner.batch.server.v1.BatchJob.resources:type_name -> llmariner.batch.server.v1.BatchJob.Resources
	18, // 2: llmariner.batch.server.v1.BatchJob.envs:type_name -> llmariner.batch.server.v1.BatchJob.EnvsEntry
	19, // 3: llmariner.batch.server.v1.BatchJob.kind:type_name -> llmariner.batch.server.v1.BatchJob.Kind
	20, // 4: llmariner.batch.server.v1.CreateBatchJobRequest.scripts:type_name -> llmariner.batch.server.v1.CreateBatchJobRequest.ScriptsEntry
	17, // 5: llmariner.batch.server.v1.CreateBatchJobRequest.resources:type_name -> llmariner.batch.server.v1.BatchJob.Resources
	21, // 6: llmariner.batch.server.v1.CreateBatchJobRequest.envs:type_name -> llmariner.batch.server.v1.CreateBatchJobRequest.EnvsEntry
	19, // 7: llmariner.batch.server.v1.CreateBatchJobRequest.kind:type_name -> llmariner.batch.server.v1.BatchJob.Kind
	2,  // 8: llmariner.batch.server.v1.ListBatchJobsResponse.jobs:type_name -> llmariner.batch.server.v1.BatchJob
	2,  // 9: llmariner.batch.server.v1.InternalBatchJob.job:type_name -> llmariner.batch.server.v1.BatchJob
	0,  // 10: llmariner.batch.server.v1.InternalBatchJob.state:type_name -> llmariner.batch.server.v1.InternalBatchJob.State
	1,  // 11: llmariner.batch.server.v1.InternalBatchJob.queued_action:type_name -> llmariner.batch.server.v1.InternalBatchJob.Action
	10, // 12: llmariner.batch.server.v1.ListQueuedInternalBatchJobsResponse.jobs:type_name -> llmariner.batch.server.v1.InternalBatchJob
	0,  // 13: llmariner.batch.server.v1.UpdateBatchJobStateRequest.state:type_name -> llmariner.batch.server.v1.InternalBatchJob.State
	3,  // 14: llmariner.batch.server.v1.BatchJob.Kind.pytorch:type_name -> llmariner.batch.server.v1.PyTorchJob
	4,  // 15: llmariner.batch.server.v1.BatchService.CreateBatchJob:input_type -> llmariner.batch.server.v1.CreateBatchJobRequest
	5,  // 16: llmariner.batch.server.v1.BatchService.ListBatchJobs:input_type -> llmariner.batch.server.v1.ListBatchJobsRequest
	7,  // 17: llmariner.batch.server.v1.BatchService.GetBatchJob:input_type -> llmariner.batch.server.v1.GetBatchJobRequest
	8,  // 18: llmariner.batch.server.v1.BatchService.CancelBatchJob:input_type -> llmariner.batch.server.v1.CancelBatchJobRequest
	9,  // 19: llmariner.batch.server.v1.BatchService.DeleteBatchJob:input_type -> llmariner.batch.server.v1.DeleteBatchJobRequest
	11, // 20: llmariner.batch.server.v1.BatchWorkerService.ListQueuedInternalBatchJobs:input_type -> llmariner.batch.server.v1.ListQueuedInternalBatchJobsRequest
	13, // 21: llmariner.batch.server.v1.BatchWorkerService.GetInternalBatchJob:input_type -> llmariner.batch.server.v1.GetInternalBatchJobRequest
	14, // 22: llmariner.batch.server.v1.BatchWorkerService.UpdateBatchJobState:input_type -> llmariner.batch.server.v1.UpdateBatchJobStateRequest
	2,  // 23: llmariner.batch.server.v1.BatchService.CreateBatchJob:output_type -> llmariner.batch.server.v1.BatchJob
	6,  // 24: llmariner.batch.server.v1.BatchService.ListBatchJobs:output_type -> llmariner.batch.server.v1.ListBatchJobsResponse
	2,  // 25: llmariner.batch.server.v1.BatchService.GetBatchJob:output_type -> llmariner.batch.server.v1.BatchJob
	2,  // 26: llmariner.batch.server.v1.BatchService.CancelBatchJob:output_type -> llmariner.batch.server.v1.BatchJob
	2,  // 27: llmariner.batch.server.v1.BatchService.DeleteBatchJob:output_type -> llmariner.batch.server.v1.BatchJob
	12, // 28: llmariner.batch.server.v1.BatchWorkerService.ListQueuedInternalBatchJobs:output_type -> llmariner.batch.server.v1.ListQueuedInternalBatchJobsResponse
	10, // 29: llmariner.batch.server.v1.BatchWorkerService.GetInternalBatchJob:output_type -> llmariner.batch.server.v1.InternalBatchJob
	15, // 30: llmariner.batch.server.v1.BatchWorkerService.UpdateBatchJobState:output_type -> llmariner.batch.server.v1.UpdateBatchJobStateResponse
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_v1_batch_service_proto_init() }
func file_api_v1_batch_service_proto_init() {
	if File_api_v1_batch_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_batch_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PyTorchJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBatchJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBatchJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalBatchJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueuedInternalBatchJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueuedInternalBatchJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInternalBatchJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBatchJobStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBatchJobStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJob_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJob_Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_batch_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJob_Kind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_batch_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*BatchJob_Kind_Pytorch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_batch_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_v1_batch_service_proto_goTypes,
		DependencyIndexes: file_api_v1_batch_service_proto_depIdxs,
		EnumInfos:         file_api_v1_batch_service_proto_enumTypes,
		MessageInfos:      file_api_v1_batch_service_proto_msgTypes,
	}.Build()
	File_api_v1_batch_service_proto = out.File
	file_api_v1_batch_service_proto_rawDesc = nil
	file_api_v1_batch_service_proto_goTypes = nil
	file_api_v1_batch_service_proto_depIdxs = nil
}
