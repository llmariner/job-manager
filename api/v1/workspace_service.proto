syntax = "proto3";

package llmariner.workspace.server.v1;

import "google/api/annotations.proto";

option go_package = "github.com/llmariner/job-manager/api/v1";

message Notebook {
  string id = 1;
  string name = 2;

  int64 created_at = 3;
  int64 started_at = 4;
  int64 stopped_at = 5;

  string image = 6;
  Resources resources = 7;
  map<string, string> envs = 8;

  message Error {
    string code = 1;
    string message = 2;
  }
  Error error = 9;
  string status = 10;

  // this field is populated only when a new notebook is created.
  string token = 11;

  string project_id = 12;
  string kubernetes_namespace = 13;
  // cluster_id is the ID of the cluster where the notebook runs.
  string cluster_id = 19;
}

message Resources {
  message Quantity {
    int32 requests = 1;
    int32 limits = 2;
  }

  Quantity cpu_milicore = 1;
  Quantity memory_megabytes = 2;
  Quantity storage_megabytes = 3;

  int32 gpu_count = 4;
}

message CreateNotebookRequest {
  string name = 1;

  message Image {
    oneof image {
      // Type of preset images.
      string type = 1;
      // URI to the custom container image.
      string uri = 2;
    }
  }
  Image image = 2;
  Resources resources = 3;
  map<string, string> envs = 4;
}

message ListNotebooksRequest {
  // after is the identifier for the last notebook from the previous pagination request.
  string after = 1;
  // limit is the number of notes to retrieve. Defaults to 20.
  int32 limit = 2;
}

message ListNotebooksResponse {
  repeated Notebook notebooks = 1;
  bool has_more = 3;
}

message GetNotebookRequest {
  string id = 1;
}

message DeleteNotebookRequest {
  string id = 1;
}

message DeleteNotebookResponse {
}

message StopNotebookRequest {
  string id = 1;
}

message StartNotebookRequest {
  string id = 1;
}

service WorkspaceService {
  rpc CreateNotebook(CreateNotebookRequest) returns (Notebook) {
    option (google.api.http) = {
      post: "/v1/workspaces/notebooks"
      body: "*"
    };
  }
  rpc ListNotebooks(ListNotebooksRequest) returns (ListNotebooksResponse) {
    option (google.api.http) = {
      get: "/v1/workspaces/notebooks"
    };
  }
  rpc GetNotebook(GetNotebookRequest) returns (Notebook) {
    option (google.api.http) = {
      get: "/v1/workspaces/notebooks/{id}"
    };
  }
  rpc DeleteNotebook(DeleteNotebookRequest) returns (DeleteNotebookResponse) {
    option (google.api.http) = {
      delete: "/v1/workspaces/notebooks/{id}"
    };
  }

  rpc StopNotebook(StopNotebookRequest) returns (Notebook) {
    option (google.api.http) = {
      post: "/v1/workspaces/notebooks/{id}/actions:stop"
    };
  }
  rpc StartNotebook(StartNotebookRequest) returns (Notebook) {
    option (google.api.http) = {
      post: "/v1/workspaces/notebooks/{id}/actions:start"
    };
  }
}

enum NotebookState {
  STATE_UNSPECIFIED = 0;
  QUEUED = 1;
  INITIALIZING = 2;
  RUNNING = 3;
  STOPPED = 4;
  FAILED = 5;
  DELETED = 6;
}

enum NotebookQueuedAction {
  ACTION_UNSPECIFIED = 0;
  STARTING = 1;
  STOPPING = 2;
  DELETING = 3;
}

message InternalNotebook {
  Notebook notebook = 1;
  NotebookState state = 2;
  NotebookQueuedAction queued_action = 3;
}

message ListQueuedInternalNotebooksRequest {
}

message ListQueuedInternalNotebooksResponse {
  repeated InternalNotebook notebooks = 1;
}

message UpdateNotebookStateRequest {
  string id = 1;
  NotebookState state = 2;
}

message UpdateNotebookStateResponse {
}

service WorkspaceWorkerService {
  rpc ListQueuedInternalNotebooks(ListQueuedInternalNotebooksRequest) returns (ListQueuedInternalNotebooksResponse);
  rpc UpdateNotebookState(UpdateNotebookStateRequest) returns (UpdateNotebookStateResponse);
}
