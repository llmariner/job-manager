// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobWorkerServiceClient is the client API for JobWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobWorkerServiceClient interface {
	// UpdateClusterStatus updates the status of the cluster.
	UpdateClusterStatus(ctx context.Context, in *UpdateClusterStatusRequest, opts ...grpc.CallOption) (*UpdateClusterStatusResponse, error)
}

type jobWorkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobWorkerServiceClient(cc grpc.ClientConnInterface) JobWorkerServiceClient {
	return &jobWorkerServiceClient{cc}
}

func (c *jobWorkerServiceClient) UpdateClusterStatus(ctx context.Context, in *UpdateClusterStatusRequest, opts ...grpc.CallOption) (*UpdateClusterStatusResponse, error) {
	out := new(UpdateClusterStatusResponse)
	err := c.cc.Invoke(ctx, "/llmariner.jobs.server.v1.JobWorkerService/UpdateClusterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobWorkerServiceServer is the server API for JobWorkerService service.
// All implementations must embed UnimplementedJobWorkerServiceServer
// for forward compatibility
type JobWorkerServiceServer interface {
	// UpdateClusterStatus updates the status of the cluster.
	UpdateClusterStatus(context.Context, *UpdateClusterStatusRequest) (*UpdateClusterStatusResponse, error)
	mustEmbedUnimplementedJobWorkerServiceServer()
}

// UnimplementedJobWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobWorkerServiceServer struct {
}

func (UnimplementedJobWorkerServiceServer) UpdateClusterStatus(context.Context, *UpdateClusterStatusRequest) (*UpdateClusterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterStatus not implemented")
}
func (UnimplementedJobWorkerServiceServer) mustEmbedUnimplementedJobWorkerServiceServer() {}

// UnsafeJobWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobWorkerServiceServer will
// result in compilation errors.
type UnsafeJobWorkerServiceServer interface {
	mustEmbedUnimplementedJobWorkerServiceServer()
}

func RegisterJobWorkerServiceServer(s grpc.ServiceRegistrar, srv JobWorkerServiceServer) {
	s.RegisterService(&JobWorkerService_ServiceDesc, srv)
}

func _JobWorkerService_UpdateClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServiceServer).UpdateClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmariner.jobs.server.v1.JobWorkerService/UpdateClusterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServiceServer).UpdateClusterStatus(ctx, req.(*UpdateClusterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobWorkerService_ServiceDesc is the grpc.ServiceDesc for JobWorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobWorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmariner.jobs.server.v1.JobWorkerService",
	HandlerType: (*JobWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateClusterStatus",
			Handler:    _JobWorkerService_UpdateClusterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/job_manager_server_worker.proto",
}
