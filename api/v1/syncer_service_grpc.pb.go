// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncerServiceClient is the client API for SyncerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncerServiceClient interface {
	PutKubernetesObject(ctx context.Context, in *PutKubernetesObjectRequest, opts ...grpc.CallOption) (*PutKubernetesObjectResponse, error)
	DeleteKubernetesObject(ctx context.Context, in *DeleteKubernetesObjectRequest, opts ...grpc.CallOption) (*DeleteKubernetesObjectResponse, error)
}

type syncerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncerServiceClient(cc grpc.ClientConnInterface) SyncerServiceClient {
	return &syncerServiceClient{cc}
}

func (c *syncerServiceClient) PutKubernetesObject(ctx context.Context, in *PutKubernetesObjectRequest, opts ...grpc.CallOption) (*PutKubernetesObjectResponse, error) {
	out := new(PutKubernetesObjectResponse)
	err := c.cc.Invoke(ctx, "/llmariner.syncer.server.v1.SyncerService/PutKubernetesObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) DeleteKubernetesObject(ctx context.Context, in *DeleteKubernetesObjectRequest, opts ...grpc.CallOption) (*DeleteKubernetesObjectResponse, error) {
	out := new(DeleteKubernetesObjectResponse)
	err := c.cc.Invoke(ctx, "/llmariner.syncer.server.v1.SyncerService/DeleteKubernetesObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncerServiceServer is the server API for SyncerService service.
// All implementations must embed UnimplementedSyncerServiceServer
// for forward compatibility
type SyncerServiceServer interface {
	PutKubernetesObject(context.Context, *PutKubernetesObjectRequest) (*PutKubernetesObjectResponse, error)
	DeleteKubernetesObject(context.Context, *DeleteKubernetesObjectRequest) (*DeleteKubernetesObjectResponse, error)
	mustEmbedUnimplementedSyncerServiceServer()
}

// UnimplementedSyncerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncerServiceServer struct {
}

func (UnimplementedSyncerServiceServer) PutKubernetesObject(context.Context, *PutKubernetesObjectRequest) (*PutKubernetesObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutKubernetesObject not implemented")
}
func (UnimplementedSyncerServiceServer) DeleteKubernetesObject(context.Context, *DeleteKubernetesObjectRequest) (*DeleteKubernetesObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubernetesObject not implemented")
}
func (UnimplementedSyncerServiceServer) mustEmbedUnimplementedSyncerServiceServer() {}

// UnsafeSyncerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncerServiceServer will
// result in compilation errors.
type UnsafeSyncerServiceServer interface {
	mustEmbedUnimplementedSyncerServiceServer()
}

func RegisterSyncerServiceServer(s grpc.ServiceRegistrar, srv SyncerServiceServer) {
	s.RegisterService(&SyncerService_ServiceDesc, srv)
}

func _SyncerService_PutKubernetesObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutKubernetesObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).PutKubernetesObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmariner.syncer.server.v1.SyncerService/PutKubernetesObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).PutKubernetesObject(ctx, req.(*PutKubernetesObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_DeleteKubernetesObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKubernetesObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).DeleteKubernetesObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmariner.syncer.server.v1.SyncerService/DeleteKubernetesObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).DeleteKubernetesObject(ctx, req.(*DeleteKubernetesObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncerService_ServiceDesc is the grpc.ServiceDesc for SyncerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmariner.syncer.server.v1.SyncerService",
	HandlerType: (*SyncerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutKubernetesObject",
			Handler:    _SyncerService_PutKubernetesObject_Handler,
		},
		{
			MethodName: "DeleteKubernetesObject",
			Handler:    _SyncerService_DeleteKubernetesObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/syncer_service.proto",
}
